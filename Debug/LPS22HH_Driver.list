
LPS22HH_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000898c  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08009030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000032c  20000084  080090b4  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003b0  080090b4  000203b0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016b1b  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000306e  00000000  00000000  00036bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010a8  00000000  00000000  00039c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f50  00000000  00000000  0003acf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000347ca  00000000  00000000  0003bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017392  00000000  00000000  0007040a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013da05  00000000  00000000  0008779c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c51a1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004cfc  00000000  00000000  001c51f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000084 	.word	0x20000084
 8000250:	00000000 	.word	0x00000000
 8000254:	08008ba8 	.word	0x08008ba8

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000088 	.word	0x20000088
 8000270:	08008ba8 	.word	0x08008ba8

08000274 <__aeabi_drsub>:
 8000274:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000278:	e002      	b.n	8000280 <__adddf3>
 800027a:	bf00      	nop

0800027c <__aeabi_dsub>:
 800027c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000280 <__adddf3>:
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000286:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028a:	ea94 0f05 	teq	r4, r5
 800028e:	bf08      	it	eq
 8000290:	ea90 0f02 	teqeq	r0, r2
 8000294:	bf1f      	itttt	ne
 8000296:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a6:	f000 80e2 	beq.w	800046e <__adddf3+0x1ee>
 80002aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b2:	bfb8      	it	lt
 80002b4:	426d      	neglt	r5, r5
 80002b6:	dd0c      	ble.n	80002d2 <__adddf3+0x52>
 80002b8:	442c      	add	r4, r5
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	ea82 0000 	eor.w	r0, r2, r0
 80002c6:	ea83 0101 	eor.w	r1, r3, r1
 80002ca:	ea80 0202 	eor.w	r2, r0, r2
 80002ce:	ea81 0303 	eor.w	r3, r1, r3
 80002d2:	2d36      	cmp	r5, #54	; 0x36
 80002d4:	bf88      	it	hi
 80002d6:	bd30      	pophi	{r4, r5, pc}
 80002d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e8:	d002      	beq.n	80002f0 <__adddf3+0x70>
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x84>
 80002fe:	4252      	negs	r2, r2
 8000300:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000304:	ea94 0f05 	teq	r4, r5
 8000308:	f000 80a7 	beq.w	800045a <__adddf3+0x1da>
 800030c:	f1a4 0401 	sub.w	r4, r4, #1
 8000310:	f1d5 0e20 	rsbs	lr, r5, #32
 8000314:	db0d      	blt.n	8000332 <__adddf3+0xb2>
 8000316:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031a:	fa22 f205 	lsr.w	r2, r2, r5
 800031e:	1880      	adds	r0, r0, r2
 8000320:	f141 0100 	adc.w	r1, r1, #0
 8000324:	fa03 f20e 	lsl.w	r2, r3, lr
 8000328:	1880      	adds	r0, r0, r2
 800032a:	fa43 f305 	asr.w	r3, r3, r5
 800032e:	4159      	adcs	r1, r3
 8000330:	e00e      	b.n	8000350 <__adddf3+0xd0>
 8000332:	f1a5 0520 	sub.w	r5, r5, #32
 8000336:	f10e 0e20 	add.w	lr, lr, #32
 800033a:	2a01      	cmp	r2, #1
 800033c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000340:	bf28      	it	cs
 8000342:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	18c0      	adds	r0, r0, r3
 800034c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000354:	d507      	bpl.n	8000366 <__adddf3+0xe6>
 8000356:	f04f 0e00 	mov.w	lr, #0
 800035a:	f1dc 0c00 	rsbs	ip, ip, #0
 800035e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000362:	eb6e 0101 	sbc.w	r1, lr, r1
 8000366:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036a:	d31b      	bcc.n	80003a4 <__adddf3+0x124>
 800036c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000370:	d30c      	bcc.n	800038c <__adddf3+0x10c>
 8000372:	0849      	lsrs	r1, r1, #1
 8000374:	ea5f 0030 	movs.w	r0, r0, rrx
 8000378:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800037c:	f104 0401 	add.w	r4, r4, #1
 8000380:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000384:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000388:	f080 809a 	bcs.w	80004c0 <__adddf3+0x240>
 800038c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000390:	bf08      	it	eq
 8000392:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000396:	f150 0000 	adcs.w	r0, r0, #0
 800039a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039e:	ea41 0105 	orr.w	r1, r1, r5
 80003a2:	bd30      	pop	{r4, r5, pc}
 80003a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a8:	4140      	adcs	r0, r0
 80003aa:	eb41 0101 	adc.w	r1, r1, r1
 80003ae:	3c01      	subs	r4, #1
 80003b0:	bf28      	it	cs
 80003b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b6:	d2e9      	bcs.n	800038c <__adddf3+0x10c>
 80003b8:	f091 0f00 	teq	r1, #0
 80003bc:	bf04      	itt	eq
 80003be:	4601      	moveq	r1, r0
 80003c0:	2000      	moveq	r0, #0
 80003c2:	fab1 f381 	clz	r3, r1
 80003c6:	bf08      	it	eq
 80003c8:	3320      	addeq	r3, #32
 80003ca:	f1a3 030b 	sub.w	r3, r3, #11
 80003ce:	f1b3 0220 	subs.w	r2, r3, #32
 80003d2:	da0c      	bge.n	80003ee <__adddf3+0x16e>
 80003d4:	320c      	adds	r2, #12
 80003d6:	dd08      	ble.n	80003ea <__adddf3+0x16a>
 80003d8:	f102 0c14 	add.w	ip, r2, #20
 80003dc:	f1c2 020c 	rsb	r2, r2, #12
 80003e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e4:	fa21 f102 	lsr.w	r1, r1, r2
 80003e8:	e00c      	b.n	8000404 <__adddf3+0x184>
 80003ea:	f102 0214 	add.w	r2, r2, #20
 80003ee:	bfd8      	it	le
 80003f0:	f1c2 0c20 	rsble	ip, r2, #32
 80003f4:	fa01 f102 	lsl.w	r1, r1, r2
 80003f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003fc:	bfdc      	itt	le
 80003fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000402:	4090      	lslle	r0, r2
 8000404:	1ae4      	subs	r4, r4, r3
 8000406:	bfa2      	ittt	ge
 8000408:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800040c:	4329      	orrge	r1, r5
 800040e:	bd30      	popge	{r4, r5, pc}
 8000410:	ea6f 0404 	mvn.w	r4, r4
 8000414:	3c1f      	subs	r4, #31
 8000416:	da1c      	bge.n	8000452 <__adddf3+0x1d2>
 8000418:	340c      	adds	r4, #12
 800041a:	dc0e      	bgt.n	800043a <__adddf3+0x1ba>
 800041c:	f104 0414 	add.w	r4, r4, #20
 8000420:	f1c4 0220 	rsb	r2, r4, #32
 8000424:	fa20 f004 	lsr.w	r0, r0, r4
 8000428:	fa01 f302 	lsl.w	r3, r1, r2
 800042c:	ea40 0003 	orr.w	r0, r0, r3
 8000430:	fa21 f304 	lsr.w	r3, r1, r4
 8000434:	ea45 0103 	orr.w	r1, r5, r3
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f1c4 040c 	rsb	r4, r4, #12
 800043e:	f1c4 0220 	rsb	r2, r4, #32
 8000442:	fa20 f002 	lsr.w	r0, r0, r2
 8000446:	fa01 f304 	lsl.w	r3, r1, r4
 800044a:	ea40 0003 	orr.w	r0, r0, r3
 800044e:	4629      	mov	r1, r5
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	fa21 f004 	lsr.w	r0, r1, r4
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f094 0f00 	teq	r4, #0
 800045e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000462:	bf06      	itte	eq
 8000464:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000468:	3401      	addeq	r4, #1
 800046a:	3d01      	subne	r5, #1
 800046c:	e74e      	b.n	800030c <__adddf3+0x8c>
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf18      	it	ne
 8000474:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000478:	d029      	beq.n	80004ce <__adddf3+0x24e>
 800047a:	ea94 0f05 	teq	r4, r5
 800047e:	bf08      	it	eq
 8000480:	ea90 0f02 	teqeq	r0, r2
 8000484:	d005      	beq.n	8000492 <__adddf3+0x212>
 8000486:	ea54 0c00 	orrs.w	ip, r4, r0
 800048a:	bf04      	itt	eq
 800048c:	4619      	moveq	r1, r3
 800048e:	4610      	moveq	r0, r2
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea91 0f03 	teq	r1, r3
 8000496:	bf1e      	ittt	ne
 8000498:	2100      	movne	r1, #0
 800049a:	2000      	movne	r0, #0
 800049c:	bd30      	popne	{r4, r5, pc}
 800049e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a2:	d105      	bne.n	80004b0 <__adddf3+0x230>
 80004a4:	0040      	lsls	r0, r0, #1
 80004a6:	4149      	adcs	r1, r1
 80004a8:	bf28      	it	cs
 80004aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b4:	bf3c      	itt	cc
 80004b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ba:	bd30      	popcc	{r4, r5, pc}
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c8:	f04f 0000 	mov.w	r0, #0
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf1a      	itte	ne
 80004d4:	4619      	movne	r1, r3
 80004d6:	4610      	movne	r0, r2
 80004d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004dc:	bf1c      	itt	ne
 80004de:	460b      	movne	r3, r1
 80004e0:	4602      	movne	r2, r0
 80004e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e6:	bf06      	itte	eq
 80004e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ec:	ea91 0f03 	teqeq	r1, r3
 80004f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	bf00      	nop

080004f8 <__aeabi_ui2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f04f 0500 	mov.w	r5, #0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e750      	b.n	80003b8 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_i2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000530:	bf48      	it	mi
 8000532:	4240      	negmi	r0, r0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e73e      	b.n	80003b8 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_f2d>:
 800053c:	0042      	lsls	r2, r0, #1
 800053e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000542:	ea4f 0131 	mov.w	r1, r1, rrx
 8000546:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054a:	bf1f      	itttt	ne
 800054c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000550:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000554:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000558:	4770      	bxne	lr
 800055a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055e:	bf08      	it	eq
 8000560:	4770      	bxeq	lr
 8000562:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000566:	bf04      	itt	eq
 8000568:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800057c:	e71c      	b.n	80003b8 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_ul2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	e00a      	b.n	80005a6 <__aeabi_l2d+0x16>

08000590 <__aeabi_l2d>:
 8000590:	ea50 0201 	orrs.w	r2, r0, r1
 8000594:	bf08      	it	eq
 8000596:	4770      	bxeq	lr
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059e:	d502      	bpl.n	80005a6 <__aeabi_l2d+0x16>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b2:	f43f aed8 	beq.w	8000366 <__adddf3+0xe6>
 80005b6:	f04f 0203 	mov.w	r2, #3
 80005ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005be:	bf18      	it	ne
 80005c0:	3203      	addne	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	fa01 fe03 	lsl.w	lr, r1, r3
 80005de:	ea40 000e 	orr.w	r0, r0, lr
 80005e2:	fa21 f102 	lsr.w	r1, r1, r2
 80005e6:	4414      	add	r4, r2
 80005e8:	e6bd      	b.n	8000366 <__adddf3+0xe6>
 80005ea:	bf00      	nop

080005ec <__aeabi_dmul>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fa:	bf1d      	ittte	ne
 80005fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000600:	ea94 0f0c 	teqne	r4, ip
 8000604:	ea95 0f0c 	teqne	r5, ip
 8000608:	f000 f8de 	bleq	80007c8 <__aeabi_dmul+0x1dc>
 800060c:	442c      	add	r4, r5
 800060e:	ea81 0603 	eor.w	r6, r1, r3
 8000612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061e:	bf18      	it	ne
 8000620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800062c:	d038      	beq.n	80006a0 <__aeabi_dmul+0xb4>
 800062e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000632:	f04f 0500 	mov.w	r5, #0
 8000636:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000642:	f04f 0600 	mov.w	r6, #0
 8000646:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064a:	f09c 0f00 	teq	ip, #0
 800064e:	bf18      	it	ne
 8000650:	f04e 0e01 	orrne.w	lr, lr, #1
 8000654:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000658:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800065c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000660:	d204      	bcs.n	800066c <__aeabi_dmul+0x80>
 8000662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000666:	416d      	adcs	r5, r5
 8000668:	eb46 0606 	adc.w	r6, r6, r6
 800066c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800067c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000680:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000684:	bf88      	it	hi
 8000686:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068a:	d81e      	bhi.n	80006ca <__aeabi_dmul+0xde>
 800068c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000690:	bf08      	it	eq
 8000692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000696:	f150 0000 	adcs.w	r0, r0, #0
 800069a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a4:	ea46 0101 	orr.w	r1, r6, r1
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b4:	bfc2      	ittt	gt
 80006b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006be:	bd70      	popgt	{r4, r5, r6, pc}
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c4:	f04f 0e00 	mov.w	lr, #0
 80006c8:	3c01      	subs	r4, #1
 80006ca:	f300 80ab 	bgt.w	8000824 <__aeabi_dmul+0x238>
 80006ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d2:	bfde      	ittt	le
 80006d4:	2000      	movle	r0, #0
 80006d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006da:	bd70      	pople	{r4, r5, r6, pc}
 80006dc:	f1c4 0400 	rsb	r4, r4, #0
 80006e0:	3c20      	subs	r4, #32
 80006e2:	da35      	bge.n	8000750 <__aeabi_dmul+0x164>
 80006e4:	340c      	adds	r4, #12
 80006e6:	dc1b      	bgt.n	8000720 <__aeabi_dmul+0x134>
 80006e8:	f104 0414 	add.w	r4, r4, #20
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f305 	lsl.w	r3, r0, r5
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f205 	lsl.w	r2, r1, r5
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	fa21 f604 	lsr.w	r6, r1, r4
 8000710:	eb42 0106 	adc.w	r1, r2, r6
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 040c 	rsb	r4, r4, #12
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f304 	lsl.w	r3, r0, r4
 800072c:	fa20 f005 	lsr.w	r0, r0, r5
 8000730:	fa01 f204 	lsl.w	r2, r1, r4
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	f141 0100 	adc.w	r1, r1, #0
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f205 	lsl.w	r2, r0, r5
 8000758:	ea4e 0e02 	orr.w	lr, lr, r2
 800075c:	fa20 f304 	lsr.w	r3, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea43 0302 	orr.w	r3, r3, r2
 8000768:	fa21 f004 	lsr.w	r0, r1, r4
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	fa21 f204 	lsr.w	r2, r1, r4
 8000774:	ea20 0002 	bic.w	r0, r0, r2
 8000778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f094 0f00 	teq	r4, #0
 800078c:	d10f      	bne.n	80007ae <__aeabi_dmul+0x1c2>
 800078e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000792:	0040      	lsls	r0, r0, #1
 8000794:	eb41 0101 	adc.w	r1, r1, r1
 8000798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3c01      	subeq	r4, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1a6>
 80007a2:	ea41 0106 	orr.w	r1, r1, r6
 80007a6:	f095 0f00 	teq	r5, #0
 80007aa:	bf18      	it	ne
 80007ac:	4770      	bxne	lr
 80007ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	eb43 0303 	adc.w	r3, r3, r3
 80007b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3d01      	subeq	r5, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1c6>
 80007c2:	ea43 0306 	orr.w	r3, r3, r6
 80007c6:	4770      	bx	lr
 80007c8:	ea94 0f0c 	teq	r4, ip
 80007cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d0:	bf18      	it	ne
 80007d2:	ea95 0f0c 	teqne	r5, ip
 80007d6:	d00c      	beq.n	80007f2 <__aeabi_dmul+0x206>
 80007d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e2:	d1d1      	bne.n	8000788 <__aeabi_dmul+0x19c>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f6:	bf06      	itte	eq
 80007f8:	4610      	moveq	r0, r2
 80007fa:	4619      	moveq	r1, r3
 80007fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000800:	d019      	beq.n	8000836 <__aeabi_dmul+0x24a>
 8000802:	ea94 0f0c 	teq	r4, ip
 8000806:	d102      	bne.n	800080e <__aeabi_dmul+0x222>
 8000808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800080c:	d113      	bne.n	8000836 <__aeabi_dmul+0x24a>
 800080e:	ea95 0f0c 	teq	r5, ip
 8000812:	d105      	bne.n	8000820 <__aeabi_dmul+0x234>
 8000814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000818:	bf1c      	itt	ne
 800081a:	4610      	movne	r0, r2
 800081c:	4619      	movne	r1, r3
 800081e:	d10a      	bne.n	8000836 <__aeabi_dmul+0x24a>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083e:	bd70      	pop	{r4, r5, r6, pc}

08000840 <__aeabi_ddiv>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000846:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084e:	bf1d      	ittte	ne
 8000850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000854:	ea94 0f0c 	teqne	r4, ip
 8000858:	ea95 0f0c 	teqne	r5, ip
 800085c:	f000 f8a7 	bleq	80009ae <__aeabi_ddiv+0x16e>
 8000860:	eba4 0405 	sub.w	r4, r4, r5
 8000864:	ea81 0e03 	eor.w	lr, r1, r3
 8000868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800086c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000870:	f000 8088 	beq.w	8000984 <__aeabi_ddiv+0x144>
 8000874:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000878:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800087c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000884:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800088c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000890:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000894:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000898:	429d      	cmp	r5, r3
 800089a:	bf08      	it	eq
 800089c:	4296      	cmpeq	r6, r2
 800089e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a6:	d202      	bcs.n	80008ae <__aeabi_ddiv+0x6e>
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	1ab6      	subs	r6, r6, r2
 80008b0:	eb65 0503 	sbc.w	r5, r5, r3
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800091c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000920:	d018      	beq.n	8000954 <__aeabi_ddiv+0x114>
 8000922:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093e:	d1c0      	bne.n	80008c2 <__aeabi_ddiv+0x82>
 8000940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000944:	d10b      	bne.n	800095e <__aeabi_ddiv+0x11e>
 8000946:	ea41 0100 	orr.w	r1, r1, r0
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000952:	e7b6      	b.n	80008c2 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	bf04      	itt	eq
 800095a:	4301      	orreq	r1, r0
 800095c:	2000      	moveq	r0, #0
 800095e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000962:	bf88      	it	hi
 8000964:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000968:	f63f aeaf 	bhi.w	80006ca <__aeabi_dmul+0xde>
 800096c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000970:	bf04      	itt	eq
 8000972:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097a:	f150 0000 	adcs.w	r0, r0, #0
 800097e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800098c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	e690      	b.n	80006ca <__aeabi_dmul+0xde>
 80009a8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ac:	e68d      	b.n	80006ca <__aeabi_dmul+0xde>
 80009ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b2:	ea94 0f0c 	teq	r4, ip
 80009b6:	bf08      	it	eq
 80009b8:	ea95 0f0c 	teqeq	r5, ip
 80009bc:	f43f af3b 	beq.w	8000836 <__aeabi_dmul+0x24a>
 80009c0:	ea94 0f0c 	teq	r4, ip
 80009c4:	d10a      	bne.n	80009dc <__aeabi_ddiv+0x19c>
 80009c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ca:	f47f af34 	bne.w	8000836 <__aeabi_dmul+0x24a>
 80009ce:	ea95 0f0c 	teq	r5, ip
 80009d2:	f47f af25 	bne.w	8000820 <__aeabi_dmul+0x234>
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	e72c      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009dc:	ea95 0f0c 	teq	r5, ip
 80009e0:	d106      	bne.n	80009f0 <__aeabi_ddiv+0x1b0>
 80009e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e6:	f43f aefd 	beq.w	80007e4 <__aeabi_dmul+0x1f8>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e722      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fa:	f47f aec5 	bne.w	8000788 <__aeabi_dmul+0x19c>
 80009fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a02:	f47f af0d 	bne.w	8000820 <__aeabi_dmul+0x234>
 8000a06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0a:	f47f aeeb 	bne.w	80007e4 <__aeabi_dmul+0x1f8>
 8000a0e:	e712      	b.n	8000836 <__aeabi_dmul+0x24a>

08000a10 <__aeabi_d2f>:
 8000a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a18:	bf24      	itt	cs
 8000a1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a22:	d90d      	bls.n	8000a40 <__aeabi_d2f+0x30>
 8000a24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a38:	bf08      	it	eq
 8000a3a:	f020 0001 	biceq.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a44:	d121      	bne.n	8000a8a <__aeabi_d2f+0x7a>
 8000a46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a4a:	bfbc      	itt	lt
 8000a4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	4770      	bxlt	lr
 8000a52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5a:	f1c2 0218 	rsb	r2, r2, #24
 8000a5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000a62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a66:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6a:	bf18      	it	ne
 8000a6c:	f040 0001 	orrne.w	r0, r0, #1
 8000a70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a7c:	ea40 000c 	orr.w	r0, r0, ip
 8000a80:	fa23 f302 	lsr.w	r3, r3, r2
 8000a84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a88:	e7cc      	b.n	8000a24 <__aeabi_d2f+0x14>
 8000a8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8e:	d107      	bne.n	8000aa0 <__aeabi_d2f+0x90>
 8000a90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a94:	bf1e      	ittt	ne
 8000a96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9e:	4770      	bxne	lr
 8000aa0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_uldivmod>:
 8000ab0:	b953      	cbnz	r3, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab2:	b94a      	cbnz	r2, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	2800      	cmpeq	r0, #0
 8000aba:	bf1c      	itt	ne
 8000abc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac4:	f000 b982 	b.w	8000dcc <__aeabi_idiv0>
 8000ac8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000acc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad0:	f000 f806 	bl	8000ae0 <__udivmoddi4>
 8000ad4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000adc:	b004      	add	sp, #16
 8000ade:	4770      	bx	lr

08000ae0 <__udivmoddi4>:
 8000ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	460f      	mov	r7, r1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d148      	bne.n	8000b80 <__udivmoddi4+0xa0>
 8000aee:	428a      	cmp	r2, r1
 8000af0:	4694      	mov	ip, r2
 8000af2:	d961      	bls.n	8000bb8 <__udivmoddi4+0xd8>
 8000af4:	fab2 f382 	clz	r3, r2
 8000af8:	b143      	cbz	r3, 8000b0c <__udivmoddi4+0x2c>
 8000afa:	f1c3 0120 	rsb	r1, r3, #32
 8000afe:	409f      	lsls	r7, r3
 8000b00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b04:	409c      	lsls	r4, r3
 8000b06:	fa20 f101 	lsr.w	r1, r0, r1
 8000b0a:	430f      	orrs	r7, r1
 8000b0c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000b10:	fa1f fe8c 	uxth.w	lr, ip
 8000b14:	0c22      	lsrs	r2, r4, #16
 8000b16:	fbb7 f6f1 	udiv	r6, r7, r1
 8000b1a:	fb01 7716 	mls	r7, r1, r6, r7
 8000b1e:	fb06 f00e 	mul.w	r0, r6, lr
 8000b22:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b26:	4290      	cmp	r0, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x5c>
 8000b2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x5a>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f200 8137 	bhi.w	8000da8 <__udivmoddi4+0x2c8>
 8000b3a:	463e      	mov	r6, r7
 8000b3c:	1a12      	subs	r2, r2, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb2 f0f1 	udiv	r0, r2, r1
 8000b44:	fb01 2210 	mls	r2, r1, r0, r2
 8000b48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x86>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5c:	d202      	bcs.n	8000b64 <__udivmoddi4+0x84>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f200 811c 	bhi.w	8000d9c <__udivmoddi4+0x2bc>
 8000b64:	4610      	mov	r0, r2
 8000b66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6a:	eba4 040e 	sub.w	r4, r4, lr
 8000b6e:	2600      	movs	r6, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0x9a>
 8000b72:	40dc      	lsrs	r4, r3
 8000b74:	2300      	movs	r3, #0
 8000b76:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7a:	4631      	mov	r1, r6
 8000b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0xb8>
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	f000 80fd 	beq.w	8000d84 <__udivmoddi4+0x2a4>
 8000b8a:	2600      	movs	r6, #0
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	4630      	mov	r0, r6
 8000b92:	4631      	mov	r1, r6
 8000b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b98:	fab3 f683 	clz	r6, r3
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d14b      	bne.n	8000c38 <__udivmoddi4+0x158>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	f0c0 80f2 	bcc.w	8000d8a <__udivmoddi4+0x2aa>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f240 80ef 	bls.w	8000d8a <__udivmoddi4+0x2aa>
 8000bac:	4630      	mov	r0, r6
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d0e3      	beq.n	8000b7a <__udivmoddi4+0x9a>
 8000bb2:	e9c5 4700 	strd	r4, r7, [r5]
 8000bb6:	e7e0      	b.n	8000b7a <__udivmoddi4+0x9a>
 8000bb8:	b902      	cbnz	r2, 8000bbc <__udivmoddi4+0xdc>
 8000bba:	deff      	udf	#255	; 0xff
 8000bbc:	fab2 f382 	clz	r3, r2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f040 809d 	bne.w	8000d00 <__udivmoddi4+0x220>
 8000bc6:	1a89      	subs	r1, r1, r2
 8000bc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000bcc:	b297      	uxth	r7, r2
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f2fe 	udiv	r2, r1, lr
 8000bd6:	fb0e 1112 	mls	r1, lr, r2, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb07 f002 	mul.w	r0, r7, r2
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d90f      	bls.n	8000c06 <__udivmoddi4+0x126>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f102 38ff 	add.w	r8, r2, #4294967295
 8000bee:	bf2c      	ite	cs
 8000bf0:	f04f 0901 	movcs.w	r9, #1
 8000bf4:	f04f 0900 	movcc.w	r9, #0
 8000bf8:	4288      	cmp	r0, r1
 8000bfa:	d903      	bls.n	8000c04 <__udivmoddi4+0x124>
 8000bfc:	f1b9 0f00 	cmp.w	r9, #0
 8000c00:	f000 80cf 	beq.w	8000da2 <__udivmoddi4+0x2c2>
 8000c04:	4642      	mov	r2, r8
 8000c06:	1a09      	subs	r1, r1, r0
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	fb00 f707 	mul.w	r7, r0, r7
 8000c16:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c1a:	42a7      	cmp	r7, r4
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x150>
 8000c1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c22:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x14e>
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	f200 80b4 	bhi.w	8000d96 <__udivmoddi4+0x2b6>
 8000c2e:	4608      	mov	r0, r1
 8000c30:	1be4      	subs	r4, r4, r7
 8000c32:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c36:	e79b      	b.n	8000b70 <__udivmoddi4+0x90>
 8000c38:	f1c6 0720 	rsb	r7, r6, #32
 8000c3c:	40b3      	lsls	r3, r6
 8000c3e:	fa01 f406 	lsl.w	r4, r1, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	40f9      	lsrs	r1, r7
 8000c48:	40b2      	lsls	r2, r6
 8000c4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c56:	431c      	orrs	r4, r3
 8000c58:	fa1f fe8c 	uxth.w	lr, ip
 8000c5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c60:	0c20      	lsrs	r0, r4, #16
 8000c62:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c66:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c6e:	fb08 f00e 	mul.w	r0, r8, lr
 8000c72:	4288      	cmp	r0, r1
 8000c74:	d90f      	bls.n	8000c96 <__udivmoddi4+0x1b6>
 8000c76:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7a:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7e:	bf2c      	ite	cs
 8000c80:	f04f 0b01 	movcs.w	fp, #1
 8000c84:	f04f 0b00 	movcc.w	fp, #0
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	d903      	bls.n	8000c94 <__udivmoddi4+0x1b4>
 8000c8c:	f1bb 0f00 	cmp.w	fp, #0
 8000c90:	f000 808d 	beq.w	8000dae <__udivmoddi4+0x2ce>
 8000c94:	46d0      	mov	r8, sl
 8000c96:	1a09      	subs	r1, r1, r0
 8000c98:	b2a4      	uxth	r4, r4
 8000c9a:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9e:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000caa:	458e      	cmp	lr, r1
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1de>
 8000cae:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb6:	d201      	bcs.n	8000cbc <__udivmoddi4+0x1dc>
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d87f      	bhi.n	8000dbc <__udivmoddi4+0x2dc>
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	eba1 010e 	sub.w	r1, r1, lr
 8000cc6:	fba0 9802 	umull	r9, r8, r0, r2
 8000cca:	4541      	cmp	r1, r8
 8000ccc:	464c      	mov	r4, r9
 8000cce:	46c6      	mov	lr, r8
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0x1f8>
 8000cd2:	d106      	bne.n	8000ce2 <__udivmoddi4+0x202>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d204      	bcs.n	8000ce2 <__udivmoddi4+0x202>
 8000cd8:	3801      	subs	r0, #1
 8000cda:	ebb9 0402 	subs.w	r4, r9, r2
 8000cde:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d070      	beq.n	8000dc8 <__udivmoddi4+0x2e8>
 8000ce6:	1b1a      	subs	r2, r3, r4
 8000ce8:	eb61 010e 	sbc.w	r1, r1, lr
 8000cec:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf0:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf4:	40f1      	lsrs	r1, r6
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	e73c      	b.n	8000b7a <__udivmoddi4+0x9a>
 8000d00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d04:	f1c3 0020 	rsb	r0, r3, #32
 8000d08:	fa01 f203 	lsl.w	r2, r1, r3
 8000d0c:	fa21 f600 	lsr.w	r6, r1, r0
 8000d10:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d14:	fa24 f100 	lsr.w	r1, r4, r0
 8000d18:	fa1f f78c 	uxth.w	r7, ip
 8000d1c:	409c      	lsls	r4, r3
 8000d1e:	4311      	orrs	r1, r2
 8000d20:	fbb6 f0fe 	udiv	r0, r6, lr
 8000d24:	0c0a      	lsrs	r2, r1, #16
 8000d26:	fb0e 6610 	mls	r6, lr, r0, r6
 8000d2a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000d2e:	fb00 f607 	mul.w	r6, r0, r7
 8000d32:	4296      	cmp	r6, r2
 8000d34:	d90e      	bls.n	8000d54 <__udivmoddi4+0x274>
 8000d36:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d3e:	bf2c      	ite	cs
 8000d40:	f04f 0901 	movcs.w	r9, #1
 8000d44:	f04f 0900 	movcc.w	r9, #0
 8000d48:	4296      	cmp	r6, r2
 8000d4a:	d902      	bls.n	8000d52 <__udivmoddi4+0x272>
 8000d4c:	f1b9 0f00 	cmp.w	r9, #0
 8000d50:	d031      	beq.n	8000db6 <__udivmoddi4+0x2d6>
 8000d52:	4640      	mov	r0, r8
 8000d54:	1b92      	subs	r2, r2, r6
 8000d56:	b289      	uxth	r1, r1
 8000d58:	fbb2 f6fe 	udiv	r6, r2, lr
 8000d5c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000d60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000d64:	fb06 f207 	mul.w	r2, r6, r7
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x29c>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d74:	d201      	bcs.n	8000d7a <__udivmoddi4+0x29a>
 8000d76:	428a      	cmp	r2, r1
 8000d78:	d823      	bhi.n	8000dc2 <__udivmoddi4+0x2e2>
 8000d7a:	4646      	mov	r6, r8
 8000d7c:	1a89      	subs	r1, r1, r2
 8000d7e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d82:	e725      	b.n	8000bd0 <__udivmoddi4+0xf0>
 8000d84:	462e      	mov	r6, r5
 8000d86:	4628      	mov	r0, r5
 8000d88:	e6f7      	b.n	8000b7a <__udivmoddi4+0x9a>
 8000d8a:	1a84      	subs	r4, r0, r2
 8000d8c:	eb61 0303 	sbc.w	r3, r1, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	461f      	mov	r7, r3
 8000d94:	e70b      	b.n	8000bae <__udivmoddi4+0xce>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e749      	b.n	8000c30 <__udivmoddi4+0x150>
 8000d9c:	4464      	add	r4, ip
 8000d9e:	3802      	subs	r0, #2
 8000da0:	e6e1      	b.n	8000b66 <__udivmoddi4+0x86>
 8000da2:	3a02      	subs	r2, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	e72e      	b.n	8000c06 <__udivmoddi4+0x126>
 8000da8:	3e02      	subs	r6, #2
 8000daa:	4462      	add	r2, ip
 8000dac:	e6c6      	b.n	8000b3c <__udivmoddi4+0x5c>
 8000dae:	f1a8 0802 	sub.w	r8, r8, #2
 8000db2:	4461      	add	r1, ip
 8000db4:	e76f      	b.n	8000c96 <__udivmoddi4+0x1b6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	e7cb      	b.n	8000d54 <__udivmoddi4+0x274>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e77d      	b.n	8000cbe <__udivmoddi4+0x1de>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	e7d9      	b.n	8000d7c <__udivmoddi4+0x29c>
 8000dc8:	462e      	mov	r6, r5
 8000dca:	e6d6      	b.n	8000b7a <__udivmoddi4+0x9a>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <LPS22HH_Init>:
 *@Params: Initialization structure with desired params, Device handle pointer, and a structure of low level drivers (see LPS22HH_Hardware.h)
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO, and  Communication Interface will be modified and enabled. Device will be initialized with desired settings.
 **************************************//**************************************/
void LPS22HH_Init(LPS22HH_Init_Struct_t Settings, LPS22HH_Handle_t *Dev, LPS22HH_IO_Drv_t LowLevelDrivers){
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	1d3c      	adds	r4, r7, #4
 8000dd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ddc:	603b      	str	r3, [r7, #0]
	Dev->LPS22HH_IO.Init = LowLevelDrivers.Init;
 8000dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	609a      	str	r2, [r3, #8]
	Dev->LPS22HH_IO.DeInit = LowLevelDrivers.DeInit;
 8000de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	60da      	str	r2, [r3, #12]
	Dev->LPS22HH_IO.WriteReg = LowLevelDrivers.WriteReg;
 8000dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	611a      	str	r2, [r3, #16]
	Dev->LPS22HH_IO.ReadReg = LowLevelDrivers.ReadReg;
 8000df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	615a      	str	r2, [r3, #20]
	Dev->LPS22HH_IO.ioctl = LowLevelDrivers.ioctl;
 8000df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	619a      	str	r2, [r3, #24]

	Dev->LPS22HH_IO.Init();
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	4798      	blx	r3
	Dev->LPS22HH_IO.ioctl(LPS22HH_IRQDisable);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	2001      	movs	r0, #1
 8000e08:	4798      	blx	r3
	uint8_t buffer8;
	uint16_t buffer16;

	/*************WHO_AM_I*****************/
	//Verify device ID
	Dev->LPS22HH_IO.ReadReg(LPS22HH_REG_WHO_AM_I, &buffer8,1);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f107 0116 	add.w	r1, r7, #22
 8000e12:	2201      	movs	r2, #1
 8000e14:	200f      	movs	r0, #15
 8000e16:	4798      	blx	r3
	if(buffer8 != LPS22HH_DEVICE_ID){
 8000e18:	7dbb      	ldrb	r3, [r7, #22]
 8000e1a:	2bb3      	cmp	r3, #179	; 0xb3
 8000e1c:	d003      	beq.n	8000e26 <LPS22HH_Init+0x56>
		_log(log_lps22hh,"Device ID does not match");
 8000e1e:	4966      	ldr	r1, [pc, #408]	; (8000fb8 <LPS22HH_Init+0x1e8>)
 8000e20:	2001      	movs	r0, #1
 8000e22:	f000 fbad 	bl	8001580 <_log>
	}
	/**************************************/

	/*************CTRL_REG2****************/
	//Set up Int pin polarity, I2C Auto-Increment, and Low Noise/Low Current mode
	settings = (Settings.IRQPolarity  << 6) | (1 << 4) | (Settings.LowNoiseLowCurrent << 1);
 8000e26:	7a7b      	ldrb	r3, [r7, #9]
 8000e28:	019b      	lsls	r3, r3, #6
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	7abb      	ldrb	r3, [r7, #10]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	75fb      	strb	r3, [r7, #23]
	Dev->LPS22HH_IO.WriteReg(LPS22HH_REG_CTRL_REG2,&settings,1);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	f107 0117 	add.w	r1, r7, #23
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2011      	movs	r0, #17
 8000e4c:	4798      	blx	r3
	Dev->LPS22HH_IO.ReadReg(LPS22HH_REG_CTRL_REG2,&buffer8,1);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	f107 0116 	add.w	r1, r7, #22
 8000e56:	2201      	movs	r2, #1
 8000e58:	2011      	movs	r0, #17
 8000e5a:	4798      	blx	r3
	if(settings != buffer8){
 8000e5c:	7dfa      	ldrb	r2, [r7, #23]
 8000e5e:	7dbb      	ldrb	r3, [r7, #22]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d003      	beq.n	8000e6c <LPS22HH_Init+0x9c>
		_log(log_lps22hh,"CTRL2 Reg Readback does not match settings");
 8000e64:	4955      	ldr	r1, [pc, #340]	; (8000fbc <LPS22HH_Init+0x1ec>)
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 fb8a 	bl	8001580 <_log>
	}
	/**************************************/

	/************CTRL_REG_1****************/
	//Setup Output data rate, Lowpass filter mode, and enable BDU
	settings = (Settings.OutputDataRate << 4) | (Settings.LowPassFilterMode << 2) | (1 << 1);
 8000e6c:	7a3b      	ldrb	r3, [r7, #8]
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	b25a      	sxtb	r2, r3
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	75fb      	strb	r3, [r7, #23]
	Dev->LPS22HH_IO.WriteReg(LPS22HH_REG_CTRL_REG1, &settings, 1);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	f107 0117 	add.w	r1, r7, #23
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2010      	movs	r0, #16
 8000e92:	4798      	blx	r3
	Dev->LPS22HH_IO.ReadReg(LPS22HH_REG_CTRL_REG1, &buffer8, 1);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	f107 0116 	add.w	r1, r7, #22
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2010      	movs	r0, #16
 8000ea0:	4798      	blx	r3
	if(settings != buffer8){
 8000ea2:	7dfa      	ldrb	r2, [r7, #23]
 8000ea4:	7dbb      	ldrb	r3, [r7, #22]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d003      	beq.n	8000eb2 <LPS22HH_Init+0xe2>
		_log(log_lps22hh,"CTRL1 Reg Readback does not match settings");
 8000eaa:	4945      	ldr	r1, [pc, #276]	; (8000fc0 <LPS22HH_Init+0x1f0>)
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 fb67 	bl	8001580 <_log>
	}
	/**************************************/

	/************IRQ_CFG*******************/

	settings = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	75fb      	strb	r3, [r7, #23]
	if(Settings.IRQMode != 0 && Settings.IRQMode != LPS22HH_LatchIRQMode){ 	//Set the Differential Enable bit if any bit other than the Latch bit is set (all other IRQs require this bit)
 8000eb6:	7b3b      	ldrb	r3, [r7, #12]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <LPS22HH_Init+0xf6>
 8000ebc:	7b3b      	ldrb	r3, [r7, #12]
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d001      	beq.n	8000ec6 <LPS22HH_Init+0xf6>
		settings = 1 << 3;
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	75fb      	strb	r3, [r7, #23]
	}
	settings |= Settings.IRQMode;
 8000ec6:	7b3a      	ldrb	r2, [r7, #12]
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	75fb      	strb	r3, [r7, #23]
	Dev->LPS22HH_IO.WriteReg(LPS22HH_REG_INTERRUPT_CFG,&settings,1);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	f107 0117 	add.w	r1, r7, #23
 8000ed8:	2201      	movs	r2, #1
 8000eda:	200b      	movs	r0, #11
 8000edc:	4798      	blx	r3
	Dev->LPS22HH_IO.ReadReg(LPS22HH_REG_INTERRUPT_CFG,&buffer8,1);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f107 0116 	add.w	r1, r7, #22
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	200b      	movs	r0, #11
 8000eea:	4798      	blx	r3
	if(settings != buffer8){
 8000eec:	7dfa      	ldrb	r2, [r7, #23]
 8000eee:	7dbb      	ldrb	r3, [r7, #22]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d003      	beq.n	8000efc <LPS22HH_Init+0x12c>
		_log(log_lps22hh,"IRQ Config Reg Readback does not match settings");
 8000ef4:	4933      	ldr	r1, [pc, #204]	; (8000fc4 <LPS22HH_Init+0x1f4>)
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f000 fb42 	bl	8001580 <_log>
	}
	/**************************************/

	/***************THS_P******************/
	/*Configure IRQ Threshold Pressure*/
	Dev->LPS22HH_IO.WriteReg(LPS22HH_REG_THS_P_L,(uint8_t*)&Settings.PresThreshold,2);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	1d39      	adds	r1, r7, #4
 8000f02:	2202      	movs	r2, #2
 8000f04:	200c      	movs	r0, #12
 8000f06:	4798      	blx	r3
	Dev->LPS22HH_IO.ReadReg(LPS22HH_REG_THS_P_L,(uint8_t*)&buffer16,2);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	f107 0114 	add.w	r1, r7, #20
 8000f10:	2202      	movs	r2, #2
 8000f12:	200c      	movs	r0, #12
 8000f14:	4798      	blx	r3
	if(Settings.PresThreshold != buffer16){
 8000f16:	88ba      	ldrh	r2, [r7, #4]
 8000f18:	8abb      	ldrh	r3, [r7, #20]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d003      	beq.n	8000f26 <LPS22HH_Init+0x156>
		_log(log_lps22hh,"Threshold pressure does not match settings");
 8000f1e:	492a      	ldr	r1, [pc, #168]	; (8000fc8 <LPS22HH_Init+0x1f8>)
 8000f20:	2001      	movs	r0, #1
 8000f22:	f000 fb2d 	bl	8001580 <_log>
	}
	/**************************************/

	/**************CTRL_REG3***************/
	if(Settings.DataReadyPinCtrl == LPS22HH_IRQPinDisabled){ //Set to 0 if pin is disabled
 8000f26:	7b7b      	ldrb	r3, [r7, #13]
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d109      	bne.n	8000f40 <LPS22HH_Init+0x170>
		settings = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	75fb      	strb	r3, [r7, #23]
		Dev->LPS22HH_IO.WriteReg(LPS22HH_REG_CTRL_REG3, &settings,1);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	f107 0117 	add.w	r1, r7, #23
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2012      	movs	r0, #18
 8000f3c:	4798      	blx	r3
 8000f3e:	e00b      	b.n	8000f58 <LPS22HH_Init+0x188>
	} else {
		settings = ( 1 << 2 )| (Settings.DataReadyPinCtrl << 0);
 8000f40:	7b7b      	ldrb	r3, [r7, #13]
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	75fb      	strb	r3, [r7, #23]
		Dev->LPS22HH_IO.WriteReg(LPS22HH_REG_CTRL_REG3, &settings,1);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	f107 0117 	add.w	r1, r7, #23
 8000f52:	2201      	movs	r2, #1
 8000f54:	2012      	movs	r0, #18
 8000f56:	4798      	blx	r3
	}
	Dev->LPS22HH_IO.ReadReg(LPS22HH_REG_CTRL_REG3, &buffer8,1);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	f107 0116 	add.w	r1, r7, #22
 8000f60:	2201      	movs	r2, #1
 8000f62:	2012      	movs	r0, #18
 8000f64:	4798      	blx	r3
	if(settings != buffer8){
 8000f66:	7dfa      	ldrb	r2, [r7, #23]
 8000f68:	7dbb      	ldrb	r3, [r7, #22]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d003      	beq.n	8000f76 <LPS22HH_Init+0x1a6>
		_log(log_lps22hh,"Ctrl Reg3 Readback does not match settings");
 8000f6e:	4917      	ldr	r1, [pc, #92]	; (8000fcc <LPS22HH_Init+0x1fc>)
 8000f70:	2001      	movs	r0, #1
 8000f72:	f000 fb05 	bl	8001580 <_log>
	}
	/**************************************/

	/**************REFP*******************/
	Dev->LPS22HH_IO.WriteReg(LPS22HH_REG_RPDS_L,(uint8_t*)&Settings.ReferencePressure, 2);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	1d3a      	adds	r2, r7, #4
 8000f7c:	1c91      	adds	r1, r2, #2
 8000f7e:	2202      	movs	r2, #2
 8000f80:	2018      	movs	r0, #24
 8000f82:	4798      	blx	r3
	Dev->LPS22HH_IO.ReadReg(LPS22HH_REG_RPDS_L,(uint8_t*)&buffer16, 2);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f107 0114 	add.w	r1, r7, #20
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	2018      	movs	r0, #24
 8000f90:	4798      	blx	r3
	if(Settings.ReferencePressure != (int16_t)buffer16){
 8000f92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f96:	8abb      	ldrh	r3, [r7, #20]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d003      	beq.n	8000fa6 <LPS22HH_Init+0x1d6>
		_log(log_lps22hh,"Reference pressure does not match settings");
 8000f9e:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <LPS22HH_Init+0x200>)
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f000 faed 	bl	8001580 <_log>
	}
	Dev->LPS22HH_IO.ioctl(LPS22HH_IRQEnable);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	2000      	movs	r0, #0
 8000fac:	4798      	blx	r3
}
 8000fae:	bf00      	nop
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	08008bc0 	.word	0x08008bc0
 8000fbc:	08008bdc 	.word	0x08008bdc
 8000fc0:	08008c08 	.word	0x08008c08
 8000fc4:	08008c34 	.word	0x08008c34
 8000fc8:	08008c64 	.word	0x08008c64
 8000fcc:	08008c90 	.word	0x08008c90
 8000fd0:	08008cbc 	.word	0x08008cbc

08000fd4 <LPS22HH_ReadPressure>:
 *@Return: Dataready flag indication whether new data was retrieved or not.
 *@Precondition: Device is initialized. If in one-shot mode, "StartConversion" function should be called first.
 *@Postcondition: If data is read successfully: LPS22HH StatusReg PA_d bit will be cleared, New data will be
 *............... in the device handle, and the DataReady flag will be reset to 0.
 **************************************//**************************************/
LPS22HH_DataReadyFlag_t LPS22HH_ReadPressure(LPS22HH_Handle_t *Dev){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t buffer[3];
	if(Dev->LPS22HH_IO.ReadReg(LPS22HH_REG_STATUS, &status,1) == LPS22HH_Ok){
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	f107 010f 	add.w	r1, r7, #15
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2027      	movs	r0, #39	; 0x27
 8000fe8:	4798      	blx	r3
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d12c      	bne.n	800104a <LPS22HH_ReadPressure+0x76>
		if((status & 0x01) == 0x01){ // new data is available
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d025      	beq.n	8001046 <LPS22HH_ReadPressure+0x72>
			Dev->DataReadyFlag = LPS22HH_DataReady;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	711a      	strb	r2, [r3, #4]
			Dev->LPS22HH_IO.ReadReg(LPS22HH_REG_PRESSURE_OUT_XL, buffer,3);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	f107 010c 	add.w	r1, r7, #12
 8001008:	2203      	movs	r2, #3
 800100a:	2028      	movs	r0, #40	; 0x28
 800100c:	4798      	blx	r3
			Dev->DataReadyFlag = LPS22HH_DataNotReady;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	711a      	strb	r2, [r3, #4]
			Dev->Pressure = ConvertPressure(buffer) / 4096.0; //Convert to hPA (1 atm = 1013 hPa)
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f823 	bl	8001064 <ConvertPressure>
 800101e:	4603      	mov	r3, r0
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa79 	bl	8000518 <__aeabi_i2d>
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <LPS22HH_ReadPressure+0x88>)
 800102c:	f7ff fc08 	bl	8000840 <__aeabi_ddiv>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fcea 	bl	8000a10 <__aeabi_d2f>
 800103c:	4602      	mov	r2, r0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
			return LPS22HH_DataReady;
 8001042:	2300      	movs	r3, #0
 8001044:	e006      	b.n	8001054 <LPS22HH_ReadPressure+0x80>
		} else {
			return LPS22HH_DataNotReady;
 8001046:	2301      	movs	r3, #1
 8001048:	e004      	b.n	8001054 <LPS22HH_ReadPressure+0x80>
		}
	} else {
		_log(log_lps22hh, "Reading Pressure failed. Try to read again.");
 800104a:	4905      	ldr	r1, [pc, #20]	; (8001060 <LPS22HH_ReadPressure+0x8c>)
 800104c:	2001      	movs	r0, #1
 800104e:	f000 fa97 	bl	8001580 <_log>
			return LPS22HH_DataNotReady;
 8001052:	2301      	movs	r3, #1
	}
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40b00000 	.word	0x40b00000
 8001060:	08008ce8 	.word	0x08008ce8

08001064 <ConvertPressure>:
 *@Params: pointer to data buffer containing the XL, L, and H registers (in that order)
 *@Return: Pressure data as a signed 32 bit integer. (Pressure in hPa * 4096)
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static int32_t ConvertPressure(uint8_t* pdata){
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	int8_t sign = (int8_t)pdata[2]; //Read MSB pdata[0] = XL, pdata[1] = L, pdata[2] = H
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3302      	adds	r3, #2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	72fb      	strb	r3, [r7, #11]
 	int32_t pressure;
	if (sign < 0){
 8001074:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da0f      	bge.n	800109c <ConvertPressure+0x38>
		pressure = 0xFF000000 | (sign << 16) | pdata[1] << 8 | pdata[0];
 800107c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001080:	041b      	lsls	r3, r3, #16
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	4313      	orrs	r3, r2
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	4313      	orrs	r3, r2
 8001094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e00b      	b.n	80010b4 <ConvertPressure+0x50>
	} else {
		pressure = 0x00000000 | (sign << 16) | pdata[1] << 8 | pdata[0];
 800109c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3301      	adds	r3, #1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	4313      	orrs	r3, r2
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
	}
	return pressure;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4907      	ldr	r1, [pc, #28]	; (80010fc <__NVIC_EnableIRQ+0x38>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db12      	blt.n	8001138 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	490a      	ldr	r1, [pc, #40]	; (8001144 <__NVIC_DisableIRQ+0x44>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	3320      	adds	r3, #32
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800112c:	f3bf 8f4f 	dsb	sy
}
 8001130:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001132:	f3bf 8f6f 	isb	sy
}
 8001136:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100

08001148 <LPS22HH_Init>:
/**************************************//**************************************//**************************************
 * Private Function Definitions
 **************************************//**************************************//**************************************/

/*Initializes low level IO*/
static void LPS22HH_Init(){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	HAL_Delay(5); //Device takes 4.5 ms to boot.
 800114c:	2005      	movs	r0, #5
 800114e:	f000 fdaf 	bl	8001cb0 <HAL_Delay>
	LPS22HH_GPIO_Init();
 8001152:	f000 f8fb 	bl	800134c <LPS22HH_GPIO_Init>
	MX_I2C2_Init();
 8001156:	f000 f941 	bl	80013dc <MX_I2C2_Init>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <LPS22HH_DeInit>:

/*DeInitializes low level IO.*/
static void LPS22HH_DeInit(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	//Do Not De-Init I2C Peripheral as other devices may be using it.
	HAL_GPIO_DeInit(LPS22HH_IRQ_GPIO_Port, LPS22HH_IRQ_Pin);
 8001164:	2104      	movs	r1, #4
 8001166:	4802      	ldr	r0, [pc, #8]	; (8001170 <LPS22HH_DeInit+0x10>)
 8001168:	f001 f8ae 	bl	80022c8 <HAL_GPIO_DeInit>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	42021800 	.word	0x42021800

08001174 <LPS22HH_WriteReg>:

/*Sends data to register over I2C2 Bus*/
static LPS22HH_Status_t LPS22HH_WriteReg(uint8_t reg, uint8_t *pdata, uint8_t length){
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af04      	add	r7, sp, #16
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	4613      	mov	r3, r2
 8001182:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, LPS22HH_DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, pdata , length, 5000) != HAL_OK){
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	b29a      	uxth	r2, r3
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	b29b      	uxth	r3, r3
 800118c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001190:	9102      	str	r1, [sp, #8]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	21ba      	movs	r1, #186	; 0xba
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <LPS22HH_WriteReg+0x50>)
 800119e:	f001 fa49 	bl	8002634 <HAL_I2C_Mem_Write>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d007      	beq.n	80011b8 <LPS22HH_WriteReg+0x44>
		_log(log_i2c,"Write to LPS22HH Reg address %x failed.",reg);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	461a      	mov	r2, r3
 80011ac:	4906      	ldr	r1, [pc, #24]	; (80011c8 <LPS22HH_WriteReg+0x54>)
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 f9e6 	bl	8001580 <_log>
		return LPS22HH_Error;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <LPS22HH_WriteReg+0x46>
	}
	return LPS22HH_Ok;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000a0 	.word	0x200000a0
 80011c8:	08008dd8 	.word	0x08008dd8

080011cc <LPS22HH_ReadReg>:

/*Reads data from register over I2C2 Bus*/
static LPS22HH_Status_t LPS22HH_ReadReg(uint8_t reg, uint8_t *pdata, uint8_t length){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read(&hi2c2, LPS22HH_DEVICE_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, pdata , length, 5000) != HAL_OK){
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	f241 3188 	movw	r1, #5000	; 0x1388
 80011e8:	9102      	str	r1, [sp, #8]
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2301      	movs	r3, #1
 80011f2:	21ba      	movs	r1, #186	; 0xba
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <LPS22HH_ReadReg+0x50>)
 80011f6:	f001 fb31 	bl	800285c <HAL_I2C_Mem_Read>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <LPS22HH_ReadReg+0x44>
		_log(log_i2c,"Read from LPS22HH Reg address %x failed.", reg);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	461a      	mov	r2, r3
 8001204:	4906      	ldr	r1, [pc, #24]	; (8001220 <LPS22HH_ReadReg+0x54>)
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f9ba 	bl	8001580 <_log>
		return LPS22HH_Error;
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <LPS22HH_ReadReg+0x46>
	}
	return LPS22HH_Ok;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000a0 	.word	0x200000a0
 8001220:	08008e00 	.word	0x08008e00

08001224 <LPS22HH_ioctl>:

/*Performs any other needed functions for the driver.*/
static uint8_t LPS22HH_ioctl(LPS22HH_Cmd_t command){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t PinStatus;
	switch(command){
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d010      	beq.n	8001256 <LPS22HH_ioctl+0x32>
 8001234:	2b02      	cmp	r3, #2
 8001236:	dc1b      	bgt.n	8001270 <LPS22HH_ioctl+0x4c>
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <LPS22HH_ioctl+0x1e>
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <LPS22HH_ioctl+0x28>
			return 1;
		} else {
			return 0;
		}
	default:
		break;
 8001240:	e016      	b.n	8001270 <LPS22HH_ioctl+0x4c>
		NVIC_EnableIRQ(LPS22HH_IRQ_EXTI_IRQn);
 8001242:	200d      	movs	r0, #13
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_EnableIRQ>
		return LPS22HH_Ok;
 8001248:	2300      	movs	r3, #0
 800124a:	e013      	b.n	8001274 <LPS22HH_ioctl+0x50>
		NVIC_DisableIRQ(LPS22HH_IRQ_EXTI_IRQn);
 800124c:	200d      	movs	r0, #13
 800124e:	f7ff ff57 	bl	8001100 <__NVIC_DisableIRQ>
		return LPS22HH_Ok;
 8001252:	2300      	movs	r3, #0
 8001254:	e00e      	b.n	8001274 <LPS22HH_ioctl+0x50>
		PinStatus = HAL_GPIO_ReadPin(LPS22HH_IRQ_GPIO_Port, LPS22HH_IRQ_Pin);
 8001256:	2104      	movs	r1, #4
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <LPS22HH_ioctl+0x58>)
 800125a:	f001 f913 	bl	8002484 <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
		if(PinStatus == GPIO_PIN_SET){
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <LPS22HH_ioctl+0x48>
			return 1;
 8001268:	2301      	movs	r3, #1
 800126a:	e003      	b.n	8001274 <LPS22HH_ioctl+0x50>
			return 0;
 800126c:	2300      	movs	r3, #0
 800126e:	e001      	b.n	8001274 <LPS22HH_ioctl+0x50>
		break;
 8001270:	bf00      	nop

	}
	return 0;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	42021800 	.word	0x42021800

08001280 <MX_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
*/
void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <MX_GPIO_Init+0xc0>)
 8001298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800129c:	4a28      	ldr	r2, [pc, #160]	; (8001340 <MX_GPIO_Init+0xc0>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <MX_GPIO_Init+0xc0>)
 80012a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <MX_GPIO_Init+0xc0>)
 80012b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ba:	4a21      	ldr	r2, [pc, #132]	; (8001340 <MX_GPIO_Init+0xc0>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_GPIO_Init+0xc0>)
 80012c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <MX_GPIO_Init+0xc0>)
 80012d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012d8:	4a19      	ldr	r2, [pc, #100]	; (8001340 <MX_GPIO_Init+0xc0>)
 80012da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_GPIO_Init+0xc0>)
 80012e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_GPIO_Init+0xc0>)
 80012f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_GPIO_Init+0xc0>)
 80012f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_GPIO_Init+0xc0>)
 8001302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPS22HH_IRQ_Pin;
 800130e:	2304      	movs	r3, #4
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_GPIO_Init+0xc4>)
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LPS22HH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <MX_GPIO_Init+0xc8>)
 8001322:	f000 fdf9 	bl	8001f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	200d      	movs	r0, #13
 800132c:	f000 fdbf 	bl	8001eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001330:	200d      	movs	r0, #13
 8001332:	f000 fdd6 	bl	8001ee2 <HAL_NVIC_EnableIRQ>

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	46020c00 	.word	0x46020c00
 8001344:	10110000 	.word	0x10110000
 8001348:	42021800 	.word	0x42021800

0800134c <LPS22HH_GPIO_Init>:

/* USER CODE BEGIN 2 */
void LPS22HH_GPIO_Init(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <LPS22HH_GPIO_Init+0x84>)
 8001364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <LPS22HH_GPIO_Init+0x84>)
 800136a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <LPS22HH_GPIO_Init+0x84>)
 8001374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <LPS22HH_GPIO_Init+0x84>)
 8001382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <LPS22HH_GPIO_Init+0x84>)
 8001388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <LPS22HH_GPIO_Init+0x84>)
 8001392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = LPS22HH_IRQ_Pin;
 800139e:	2304      	movs	r3, #4
 80013a0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <LPS22HH_GPIO_Init+0x88>)
 80013a4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(LPS22HH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <LPS22HH_GPIO_Init+0x8c>)
 80013b2:	f000 fdb1 	bl	8001f18 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	200d      	movs	r0, #13
 80013bc:	f000 fd77 	bl	8001eae <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013c0:	200d      	movs	r0, #13
 80013c2:	f000 fd8e 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3720      	adds	r7, #32
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	46020c00 	.word	0x46020c00
 80013d4:	10110000 	.word	0x10110000
 80013d8:	42021800 	.word	0x42021800

080013dc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_I2C2_Init+0x74>)
 80013e2:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <MX_I2C2_Init+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_I2C2_Init+0x74>)
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <MX_I2C2_Init+0x7c>)
 80013ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_I2C2_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <MX_I2C2_Init+0x74>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_I2C2_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_I2C2_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_I2C2_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_I2C2_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_I2C2_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001416:	480e      	ldr	r0, [pc, #56]	; (8001450 <MX_I2C2_Init+0x74>)
 8001418:	f001 f87d 	bl	8002516 <HAL_I2C_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001422:	f000 f9a5 	bl	8001770 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001426:	2100      	movs	r1, #0
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <MX_I2C2_Init+0x74>)
 800142a:	f001 fdd7 	bl	8002fdc <HAL_I2CEx_ConfigAnalogFilter>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001434:	f000 f99c 	bl	8001770 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001438:	2100      	movs	r1, #0
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_I2C2_Init+0x74>)
 800143c:	f001 fe19 	bl	8003072 <HAL_I2CEx_ConfigDigitalFilter>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001446:	f000 f993 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000a0 	.word	0x200000a0
 8001454:	40005800 	.word	0x40005800
 8001458:	30909dec 	.word	0x30909dec

0800145c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0bc      	sub	sp, #240	; 0xf0
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	22c8      	movs	r2, #200	; 0xc8
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f006 fb87 	bl	8007b90 <memset>
  if(i2cHandle->Instance==I2C2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a26      	ldr	r2, [pc, #152]	; (8001520 <HAL_I2C_MspInit+0xc4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d144      	bne.n	8001516 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800148c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001498:	2300      	movs	r3, #0
 800149a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 f9b1 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 80014ac:	f000 f960 	bl	8001770 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_I2C_MspInit+0xc8>)
 80014b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014b6:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <HAL_I2C_MspInit+0xc8>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_I2C_MspInit+0xc8>)
 80014c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MEMS_I2C_SCL_Pin|MEMS_I2C_SDA_Pin;
 80014ce:	2330      	movs	r3, #48	; 0x30
 80014d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e6:	2304      	movs	r3, #4
 80014e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <HAL_I2C_MspInit+0xcc>)
 80014f4:	f000 fd10 	bl	8001f18 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_I2C_MspInit+0xc8>)
 80014fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_I2C_MspInit+0xc8>)
 8001500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001504:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_I2C_MspInit+0xc8>)
 800150a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001516:	bf00      	nop
 8001518:	37f0      	adds	r7, #240	; 0xf0
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40005800 	.word	0x40005800
 8001524:	46020c00 	.word	0x46020c00
 8001528:	42021c00 	.word	0x42021c00

0800152c <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001530:	2000      	movs	r0, #0
 8001532:	f001 fdeb 	bl	800310c <HAL_ICACHE_ConfigAssociativityMode>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800153c:	f000 f918 	bl	8001770 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001540:	f001 fe04 	bl	800314c <HAL_ICACHE_Enable>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800154a:	f000 f911 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <__io_putchar>:
#include "stm32u5xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 8001562:	f107 010f 	add.w	r1, r7, #15
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	2201      	movs	r2, #1
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <__io_putchar+0x28>)
 800156e:	f005 fde5 	bl	800713c <HAL_UART_Transmit>
	return ch;
 8001572:	687b      	ldr	r3, [r7, #4]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000030c 	.word	0x2000030c

08001580 <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 8001580:	b40e      	push	{r1, r2, r3}
 8001582:	b580      	push	{r7, lr}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <_log+0x1e>
 8001598:	2b01      	cmp	r3, #1
 800159a:	d004      	beq.n	80015a6 <_log+0x26>
 800159c:	e007      	b.n	80015ae <_log+0x2e>
		case(log_i2c):
		printf("Debug Subsystem I2C: ");
 800159e:	480e      	ldr	r0, [pc, #56]	; (80015d8 <_log+0x58>)
 80015a0:	f006 fdf8 	bl	8008194 <iprintf>
				break;
 80015a4:	e006      	b.n	80015b4 <_log+0x34>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <_log+0x5c>)
 80015a8:	f006 fdf4 	bl	8008194 <iprintf>
				break;
 80015ac:	e002      	b.n	80015b4 <_log+0x34>
		default:
			printf("Unknown Debug Subsystem: ");
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <_log+0x60>)
 80015b0:	f006 fdf0 	bl	8008194 <iprintf>
	}
	vfprintf(stdout, msg, args);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <_log+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	69f9      	ldr	r1, [r7, #28]
 80015be:	4618      	mov	r0, r3
 80015c0:	f006 fc48 	bl	8007e54 <vfiprintf>
	printf("\n");
 80015c4:	200a      	movs	r0, #10
 80015c6:	f006 fdfd 	bl	80081c4 <putchar>
	va_end(args);
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015d4:	b003      	add	sp, #12
 80015d6:	4770      	bx	lr
 80015d8:	08008e2c 	.word	0x08008e2c
 80015dc:	08008e44 	.word	0x08008e44
 80015e0:	08008e60 	.word	0x08008e60
 80015e4:	20000020 	.word	0x20000020

080015e8 <log_init>:

void log_init(){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	  MX_USART1_UART_Init();
 80015ec:	f000 f9fe 	bl	80019ec <MX_USART1_UART_Init>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b5b0      	push	{r4, r5, r7, lr}
 80015f6:	b08e      	sub	sp, #56	; 0x38
 80015f8:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  LPS22HH_Init_Struct_t PressureSensor_Init = {
 80015fa:	4a28      	ldr	r2, [pc, #160]	; (800169c <main+0xa8>)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001600:	c303      	stmia	r3!, {r0, r1}
 8001602:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001604:	f000 fad0 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f850 	bl	80016ac <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800160c:	f000 f8a8 	bl	8001760 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001610:	f7ff fe36 	bl	8001280 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001614:	f7ff fee2 	bl	80013dc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001618:	f000 f9e8 	bl	80019ec <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 800161c:	f7ff ff86 	bl	800152c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  log_init();
 8001620:	f7ff ffe2 	bl	80015e8 <log_init>
  LPS22HH_Init(PressureSensor_Init, &PressureSensor, LPS22HH_Hardware_Drv);
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <main+0xac>)
 8001626:	466c      	mov	r4, sp
 8001628:	461d      	mov	r5, r3
 800162a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162e:	682b      	ldr	r3, [r5, #0]
 8001630:	6023      	str	r3, [r4, #0]
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <main+0xb0>)
 8001634:	1d3a      	adds	r2, r7, #4
 8001636:	ca07      	ldmia	r2, {r0, r1, r2}
 8001638:	f7ff fbca 	bl	8000dd0 <LPS22HH_Init>
  uint32_t stop_time;
  uint32_t samples;
  uint32_t current_time = HAL_GetTick();
 800163c:	f000 fb2c 	bl	8001c98 <HAL_GetTick>
 8001640:	61b8      	str	r0, [r7, #24]
  stop_time = current_time + 5000;
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001648:	3308      	adds	r3, #8
 800164a:	613b      	str	r3, [r7, #16]
  uint32_t profiler = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  samples = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
	  while(current_time < stop_time){
 8001654:	e01a      	b.n	800168c <main+0x98>
		  if(PressureSensor.DataReadyFlag == LPS22HH_DataReady || PressureSensor.LPS22HH_IO.ioctl(LPS22HH_ReadIntPin) == 1){
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <main+0xb0>)
 8001658:	791b      	ldrb	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <main+0x78>
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <main+0xb0>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2002      	movs	r0, #2
 8001664:	4798      	blx	r3
 8001666:	4603      	mov	r3, r0
 8001668:	2b01      	cmp	r3, #1
 800166a:	d10c      	bne.n	8001686 <main+0x92>
			  LPS22HH_ReadPressure(&PressureSensor);
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <main+0xb0>)
 800166e:	f7ff fcb1 	bl	8000fd4 <LPS22HH_ReadPressure>
			  pressure_log[samples] = PressureSensor.Pressure;
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <main+0xb0>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	490c      	ldr	r1, [pc, #48]	; (80016a8 <main+0xb4>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	601a      	str	r2, [r3, #0]
			  samples++;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	3301      	adds	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
		  }
		  current_time = HAL_GetTick();
 8001686:	f000 fb07 	bl	8001c98 <HAL_GetTick>
 800168a:	61b8      	str	r0, [r7, #24]
	  while(current_time < stop_time){
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d3e0      	bcc.n	8001656 <main+0x62>
	  }
	  profiler++;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3301      	adds	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
	  samples = 0;
 800169a:	e7d9      	b.n	8001650 <main+0x5c>
 800169c:	08008e7c 	.word	0x08008e7c
 80016a0:	20000000 	.word	0x20000000
 80016a4:	200000ec 	.word	0x200000ec
 80016a8:	20000108 	.word	0x20000108

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b09e      	sub	sp, #120	; 0x78
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	2260      	movs	r2, #96	; 0x60
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f006 fa68 	bl	8007b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016d0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80016d4:	f001 fd4a 	bl	800316c <HAL_PWREx_ControlVoltageScaling>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80016de:	f000 f847 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ec:	2310      	movs	r3, #16
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f0:	2302      	movs	r3, #2
 80016f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f4:	2302      	movs	r3, #2
 80016f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001700:	230a      	movs	r3, #10
 8001702:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001704:	2302      	movs	r3, #2
 8001706:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001708:	2302      	movs	r3, #2
 800170a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800170c:	2301      	movs	r3, #1
 800170e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001710:	230c      	movs	r3, #12
 8001712:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	4618      	mov	r0, r3
 800171e:	f001 fdc7 	bl	80032b0 <HAL_RCC_OscConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001728:	f000 f822 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172c:	231f      	movs	r3, #31
 800172e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001730:	2303      	movs	r3, #3
 8001732:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	2104      	movs	r1, #4
 8001748:	4618      	mov	r0, r3
 800174a:	f002 fc87 	bl	800405c <HAL_RCC_ClockConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001754:	f000 f80c 	bl	8001770 <Error_Handler>
  }
}
 8001758:	bf00      	nop
 800175a:	3778      	adds	r7, #120	; 0x78
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001764:	f001 fd84 	bl	8003270 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001768:	f001 fd92 	bl	8003290 <HAL_PWREx_DisableUCPDDeadBattery>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>
	...

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_MspInit+0x30>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001788:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_MspInit+0x30>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_MspInit+0x30>)
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	46020c00 	.word	0x46020c00

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fc:	f000 fa38 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HH_IRQ_Pin);
 8001808:	2004      	movs	r0, #4
 800180a:	f000 fe53 	bl	80024b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
	//printf("IRQ Entered\n");
	PressureSensor.DataReadyFlag = LPS22HH_DataReady;
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 8001820:	2200      	movs	r2, #0
 8001822:	711a      	strb	r2, [r3, #4]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	200000ec 	.word	0x200000ec

08001834 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001846:	e000      	b.n	800184a <_read+0x16>
 8001848:	bf00      	nop
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
	}

return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fe63 	bl	8001554 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
	}
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f006 f8fc 	bl	8007b3c <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200c0000 	.word	0x200c0000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000308 	.word	0x20000308
 8001978:	200003b0 	.word	0x200003b0

0800197c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <SystemInit+0x68>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <SystemInit+0x68>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <SystemInit+0x6c>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <SystemInit+0x6c>)
 8001998:	2200      	movs	r2, #0
 800199a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <SystemInit+0x6c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <SystemInit+0x6c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <SystemInit+0x6c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <SystemInit+0x6c>)
 80019ae:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019b2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <SystemInit+0x6c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <SystemInit+0x6c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <SystemInit+0x6c>)
 80019c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <SystemInit+0x6c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SystemInit+0x68>)
 80019d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d6:	609a      	str	r2, [r3, #8]
  #endif
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00
 80019e8:	46020c00 	.word	0x46020c00

080019ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 80019f2:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <MX_USART1_UART_Init+0x94>)
 80019f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 80019f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019fe:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a12:	220c      	movs	r2, #12
 8001a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a34:	4811      	ldr	r0, [pc, #68]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a36:	f005 fb31 	bl	800709c <HAL_UART_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a40:	f7ff fe96 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a48:	f005 ffae 	bl	80079a8 <HAL_UARTEx_SetTxFifoThreshold>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a52:	f7ff fe8d 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a56:	2100      	movs	r1, #0
 8001a58:	4808      	ldr	r0, [pc, #32]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a5a:	f005 ffe3 	bl	8007a24 <HAL_UARTEx_SetRxFifoThreshold>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a64:	f7ff fe84 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_USART1_UART_Init+0x90>)
 8001a6a:	f005 ff64 	bl	8007936 <HAL_UARTEx_DisableFifoMode>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a74:	f7ff fe7c 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000030c 	.word	0x2000030c
 8001a80:	40013800 	.word	0x40013800

08001a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0bc      	sub	sp, #240	; 0xf0
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	22c8      	movs	r2, #200	; 0xc8
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f006 f873 	bl	8007b90 <memset>
  if(uartHandle->Instance==USART1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_UART_MspInit+0xc4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d145      	bne.n	8001b40 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ab4:	f04f 0201 	mov.w	r2, #1
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fe9d 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001ad4:	f7ff fe4c 	bl	8001770 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001ada:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001ade:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001aea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001afc:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_UART_MspInit+0xc8>)
 8001b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_RX_Pin|DEBUG_UART_TX_Pin;
 8001b14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_UART_MspInit+0xcc>)
 8001b3c:	f000 f9ec 	bl	8001f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b40:	bf00      	nop
 8001b42:	37f0      	adds	r7, #240	; 0xf0
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	46020c00 	.word	0x46020c00
 8001b50:	42020000 	.word	0x42020000

08001b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b5a:	e003      	b.n	8001b64 <LoopCopyDataInit>

08001b5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b62:	3104      	adds	r1, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b64:	480b      	ldr	r0, [pc, #44]	; (8001b94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b6c:	d3f6      	bcc.n	8001b5c <CopyDataInit>
	ldr	r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b70:	e002      	b.n	8001b78 <LoopFillZerobss>

08001b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b74:	f842 3b04 	str.w	r3, [r2], #4

08001b78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <LoopForever+0x16>)
	cmp	r2, r3
 8001b7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b7c:	d3f9      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b7e:	f7ff fefd 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f005 ffe1 	bl	8007b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b86:	f7ff fd35 	bl	80015f4 <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b8c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001b90:	08009030 	.word	0x08009030
	ldr	r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b98:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8001b9c:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8001ba0:	200003b0 	.word	0x200003b0

08001ba4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_Init+0x4c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_Init+0x4c>)
 8001bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f000 f96d 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001bbe:	f002 fc3f 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_Init+0x50>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	490b      	ldr	r1, [pc, #44]	; (8001bfc <HAL_Init+0x54>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_Init+0x58>)
 8001bd6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd8:	200f      	movs	r0, #15
 8001bda:	f000 f813 	bl	8001c04 <HAL_InitTick>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e002      	b.n	8001bee <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001be8:	f7ff fdc8 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	46020c00 	.word	0x46020c00
 8001bfc:	08008e88 	.word	0x08008e88
 8001c00:	20000014 	.word	0x20000014

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_InitTick+0x60>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e021      	b.n	8001c5c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_InitTick+0x64>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_InitTick+0x60>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f965 	bl	8001efe <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f000 f92f 	bl	8001eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_InitTick+0x68>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000001c 	.word	0x2000001c
 8001c68:	20000014 	.word	0x20000014
 8001c6c:	20000018 	.word	0x20000018

08001c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_IncTick+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_IncTick+0x24>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	2000001c 	.word	0x2000001c
 8001c94:	2000039c 	.word	0x2000039c

08001c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2000039c 	.word	0x2000039c

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff ffee 	bl	8001c98 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d005      	beq.n	8001cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_Delay+0x44>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd6:	bf00      	nop
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d8f7      	bhi.n	8001cd8 <HAL_Delay+0x28>
  {
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000001c 	.word	0x2000001c

08001cf8 <__NVIC_SetPriorityGrouping>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_EnableIRQ>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db0b      	blt.n	8001d86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4907      	ldr	r1, [pc, #28]	; (8001d94 <__NVIC_EnableIRQ+0x38>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff8e 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff29 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff40 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff90 	bl	8001dec <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5f 	bl	8001d98 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff33 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa4 	bl	8001e54 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f2a:	e1ba      	b.n	80022a2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa01 f303 	lsl.w	r3, r1, r3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 81aa 	beq.w	800229c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a55      	ldr	r2, [pc, #340]	; (80020a0 <HAL_GPIO_Init+0x188>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d15d      	bne.n	800200c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001f56:	2201      	movs	r2, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001f80:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_GPIO_Init+0x18c>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f88:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001f8a:	4a46      	ldr	r2, [pc, #280]	; (80020a4 <HAL_GPIO_Init+0x18c>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220b      	movs	r2, #11
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	08da      	lsrs	r2, r3, #3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	3208      	adds	r2, #8
 8001fd6:	69f9      	ldr	r1, [r7, #28]
 8001fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	4313      	orrs	r3, r2
 8002002:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e067      	b.n	80020dc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x104>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b12      	cmp	r3, #18
 800201a:	d145      	bne.n	80020a8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	08da      	lsrs	r2, r3, #3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3208      	adds	r2, #8
 8002024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002028:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	220f      	movs	r2, #15
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	4013      	ands	r3, r2
 800203e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	4313      	orrs	r3, r2
 8002058:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	69f9      	ldr	r1, [r7, #28]
 8002064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	4013      	ands	r3, r2
 800207e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0203 	and.w	r2, r3, #3
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	4313      	orrs	r3, r2
 8002094:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e01e      	b.n	80020dc <HAL_GPIO_Init+0x1c4>
 800209e:	bf00      	nop
 80020a0:	46020000 	.word	0x46020000
 80020a4:	08008ee0 	.word	0x08008ee0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	4013      	ands	r3, r2
 80020be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d00b      	beq.n	80020fc <HAL_GPIO_Init+0x1e4>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d007      	beq.n	80020fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f0:	2b11      	cmp	r3, #17
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b12      	cmp	r3, #18
 80020fa:	d130      	bne.n	800215e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2203      	movs	r2, #3
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	4013      	ands	r3, r2
 8002112:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	4313      	orrs	r3, r2
 8002124:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002132:	2201      	movs	r2, #1
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	4013      	ands	r3, r2
 8002140:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	f003 0201 	and.w	r2, r3, #1
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	4313      	orrs	r3, r2
 8002156:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d017      	beq.n	8002196 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	4013      	ands	r3, r2
 800217c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	4313      	orrs	r3, r2
 800218e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d07c      	beq.n	800229c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021a2:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <HAL_GPIO_Init+0x3a8>)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3318      	adds	r3, #24
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0a9a      	lsrs	r2, r3, #10
 80021ca:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_GPIO_Init+0x3ac>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	f002 0203 	and.w	r2, r2, #3
 80021d4:	00d2      	lsls	r2, r2, #3
 80021d6:	4093      	lsls	r3, r2
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80021de:	4938      	ldr	r1, [pc, #224]	; (80022c0 <HAL_GPIO_Init+0x3a8>)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3318      	adds	r3, #24
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_GPIO_Init+0x3a8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002210:	4a2b      	ldr	r2, [pc, #172]	; (80022c0 <HAL_GPIO_Init+0x3a8>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002216:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_GPIO_Init+0x3a8>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	43db      	mvns	r3, r3
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	4013      	ands	r3, r2
 8002224:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800223a:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <HAL_GPIO_Init+0x3a8>)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_GPIO_Init+0x3a8>)
 8002242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002246:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43db      	mvns	r3, r3
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	4013      	ands	r3, r2
 8002250:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002266:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <HAL_GPIO_Init+0x3a8>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_GPIO_Init+0x3a8>)
 8002270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002274:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	4013      	ands	r3, r2
 800227e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <HAL_GPIO_Init+0x3a8>)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3301      	adds	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f47f ae3d 	bne.w	8001f2c <HAL_GPIO_Init+0x14>
  }
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3724      	adds	r7, #36	; 0x24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	46022000 	.word	0x46022000
 80022c4:	002f7f7f 	.word	0x002f7f7f

080022c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80022da:	e0bc      	b.n	8002456 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80022dc:	2201      	movs	r2, #1
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80ad 	beq.w	8002450 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a5e      	ldr	r2, [pc, #376]	; (8002474 <HAL_GPIO_DeInit+0x1ac>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d115      	bne.n	800232a <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 80022fe:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_GPIO_DeInit+0x1b0>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002306:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002308:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <HAL_GPIO_DeInit+0x1b0>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8002314:	4b57      	ldr	r3, [pc, #348]	; (8002474 <HAL_GPIO_DeInit+0x1ac>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	4954      	ldr	r1, [pc, #336]	; (8002474 <HAL_GPIO_DeInit+0x1ac>)
 8002324:	4013      	ands	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e053      	b.n	80023d2 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800232a:	4a54      	ldr	r2, [pc, #336]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3318      	adds	r3, #24
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0a9a      	lsrs	r2, r3, #10
 8002350:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <HAL_GPIO_DeInit+0x1b8>)
 8002352:	4013      	ands	r3, r2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	00d2      	lsls	r2, r2, #3
 800235c:	4093      	lsls	r3, r2
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d136      	bne.n	80023d2 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8002364:	4b45      	ldr	r3, [pc, #276]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 8002366:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	4943      	ldr	r1, [pc, #268]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 8002370:	4013      	ands	r3, r2
 8002372:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 8002376:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 8002378:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	493e      	ldr	r1, [pc, #248]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 8002382:	4013      	ands	r3, r2
 8002384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8002388:	4b3c      	ldr	r3, [pc, #240]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	493a      	ldr	r1, [pc, #232]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 8002392:	4013      	ands	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8002396:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	4937      	ldr	r1, [pc, #220]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 80023b4:	4a31      	ldr	r2, [pc, #196]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3318      	adds	r3, #24
 80023bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43da      	mvns	r2, r3
 80023c4:	482d      	ldr	r0, [pc, #180]	; (800247c <HAL_GPIO_DeInit+0x1b4>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	400a      	ands	r2, r1
 80023cc:	3318      	adds	r3, #24
 80023ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2103      	movs	r1, #3
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	431a      	orrs	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3208      	adds	r2, #8
 80023ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	08d2      	lsrs	r2, r2, #3
 8002406:	4019      	ands	r1, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3208      	adds	r2, #8
 800240c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2103      	movs	r1, #3
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	401a      	ands	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	2101      	movs	r1, #1
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	401a      	ands	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2103      	movs	r1, #3
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	3301      	adds	r3, #1
 8002454:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	f47f af3c 	bne.w	80022dc <HAL_GPIO_DeInit+0x14>
  }
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	46020000 	.word	0x46020000
 8002478:	08008ee0 	.word	0x08008ee0
 800247c:	46022000 	.word	0x46022000
 8002480:	002f7f7f 	.word	0x002f7f7f

08002484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e001      	b.n	80024a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80024ca:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f99e 	bl	8001814 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80024e4:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f807 	bl	8002500 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	46022000 	.word	0x46022000

08002500 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e081      	b.n	800262c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d106      	bne.n	8002542 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7fe ff8d 	bl	800145c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2224      	movs	r2, #36	; 0x24
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002566:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002576:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d107      	bne.n	8002590 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	e006      	b.n	800259e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800259c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d104      	bne.n	80025b0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69d9      	ldr	r1, [r3, #28]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	817b      	strh	r3, [r7, #10]
 8002646:	460b      	mov	r3, r1
 8002648:	813b      	strh	r3, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	f040 80f9 	bne.w	800284e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_I2C_Mem_Write+0x34>
 8002662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0ed      	b.n	8002850 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Mem_Write+0x4e>
 800267e:	2302      	movs	r3, #2
 8002680:	e0e6      	b.n	8002850 <HAL_I2C_Mem_Write+0x21c>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800268a:	f7ff fb05 	bl	8001c98 <HAL_GetTick>
 800268e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2319      	movs	r3, #25
 8002696:	2201      	movs	r2, #1
 8002698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fac3 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0d1      	b.n	8002850 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2221      	movs	r2, #33	; 0x21
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2240      	movs	r2, #64	; 0x40
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a3a      	ldr	r2, [r7, #32]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026d4:	88f8      	ldrh	r0, [r7, #6]
 80026d6:	893a      	ldrh	r2, [r7, #8]
 80026d8:	8979      	ldrh	r1, [r7, #10]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	4603      	mov	r3, r0
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f9d3 	bl	8002a90 <I2C_RequestMemoryWrite>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0a9      	b.n	8002850 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	d90e      	bls.n	8002724 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	22ff      	movs	r2, #255	; 0xff
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	b2da      	uxtb	r2, r3
 8002712:	8979      	ldrh	r1, [r7, #10]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fc2b 	bl	8002f78 <I2C_TransferConfig>
 8002722:	e00f      	b.n	8002744 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	b2da      	uxtb	r2, r3
 8002734:	8979      	ldrh	r1, [r7, #10]
 8002736:	2300      	movs	r3, #0
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fc1a 	bl	8002f78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 faad 	bl	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e07b      	b.n	8002850 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	781a      	ldrb	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d034      	beq.n	80027fc <HAL_I2C_Mem_Write+0x1c8>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	2b00      	cmp	r3, #0
 8002798:	d130      	bne.n	80027fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	2200      	movs	r2, #0
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fa3f 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e04d      	b.n	8002850 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2bff      	cmp	r3, #255	; 0xff
 80027bc:	d90e      	bls.n	80027dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	22ff      	movs	r2, #255	; 0xff
 80027c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	8979      	ldrh	r1, [r7, #10]
 80027cc:	2300      	movs	r3, #0
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fbcf 	bl	8002f78 <I2C_TransferConfig>
 80027da:	e00f      	b.n	80027fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	8979      	ldrh	r1, [r7, #10]
 80027ee:	2300      	movs	r3, #0
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fbbe 	bl	8002f78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d19e      	bne.n	8002744 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa8c 	bl	8002d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e01a      	b.n	8002850 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2220      	movs	r2, #32
 8002820:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_I2C_Mem_Write+0x224>)
 800282e:	400b      	ands	r3, r1
 8002830:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	fe00e800 	.word	0xfe00e800

0800285c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	461a      	mov	r2, r3
 800286a:	4603      	mov	r3, r0
 800286c:	817b      	strh	r3, [r7, #10]
 800286e:	460b      	mov	r3, r1
 8002870:	813b      	strh	r3, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b20      	cmp	r3, #32
 8002880:	f040 80fd 	bne.w	8002a7e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_I2C_Mem_Read+0x34>
 800288a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002896:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0f1      	b.n	8002a80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_I2C_Mem_Read+0x4e>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e0ea      	b.n	8002a80 <HAL_I2C_Mem_Read+0x224>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028b2:	f7ff f9f1 	bl	8001c98 <HAL_GetTick>
 80028b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2319      	movs	r3, #25
 80028be:	2201      	movs	r2, #1
 80028c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f9af 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0d5      	b.n	8002a80 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2222      	movs	r2, #34	; 0x22
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a3a      	ldr	r2, [r7, #32]
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028fc:	88f8      	ldrh	r0, [r7, #6]
 80028fe:	893a      	ldrh	r2, [r7, #8]
 8002900:	8979      	ldrh	r1, [r7, #10]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4603      	mov	r3, r0
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f913 	bl	8002b38 <I2C_RequestMemoryRead>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0ad      	b.n	8002a80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	2bff      	cmp	r3, #255	; 0xff
 800292c:	d90e      	bls.n	800294c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	22ff      	movs	r2, #255	; 0xff
 8002932:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	b2da      	uxtb	r2, r3
 800293a:	8979      	ldrh	r1, [r7, #10]
 800293c:	4b52      	ldr	r3, [pc, #328]	; (8002a88 <HAL_I2C_Mem_Read+0x22c>)
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fb17 	bl	8002f78 <I2C_TransferConfig>
 800294a:	e00f      	b.n	800296c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	b2da      	uxtb	r2, r3
 800295c:	8979      	ldrh	r1, [r7, #10]
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <HAL_I2C_Mem_Read+0x22c>)
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fb06 	bl	8002f78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	2200      	movs	r2, #0
 8002974:	2104      	movs	r1, #4
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f956 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07c      	b.n	8002a80 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d034      	beq.n	8002a2c <HAL_I2C_Mem_Read+0x1d0>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d130      	bne.n	8002a2c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	2200      	movs	r2, #0
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f927 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e04d      	b.n	8002a80 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2bff      	cmp	r3, #255	; 0xff
 80029ec:	d90e      	bls.n	8002a0c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	22ff      	movs	r2, #255	; 0xff
 80029f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	8979      	ldrh	r1, [r7, #10]
 80029fc:	2300      	movs	r3, #0
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fab7 	bl	8002f78 <I2C_TransferConfig>
 8002a0a:	e00f      	b.n	8002a2c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	8979      	ldrh	r1, [r7, #10]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 faa6 	bl	8002f78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d19a      	bne.n	800296c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f974 	bl	8002d28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e01a      	b.n	8002a80 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_I2C_Mem_Read+0x230>)
 8002a5e:	400b      	ands	r3, r1
 8002a60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	80002400 	.word	0x80002400
 8002a8c:	fe00e800 	.word	0xfe00e800

08002a90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	817b      	strh	r3, [r7, #10]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	813b      	strh	r3, [r7, #8]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	8979      	ldrh	r1, [r7, #10]
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <I2C_RequestMemoryWrite+0xa4>)
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fa5d 	bl	8002f78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	69b9      	ldr	r1, [r7, #24]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f8f0 	bl	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e02c      	b.n	8002b2c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad8:	893b      	ldrh	r3, [r7, #8]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae2:	e015      	b.n	8002b10 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ae4:	893b      	ldrh	r3, [r7, #8]
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	69b9      	ldr	r1, [r7, #24]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f8d6 	bl	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e012      	b.n	8002b2c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b06:	893b      	ldrh	r3, [r7, #8]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2200      	movs	r2, #0
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f884 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	80002000 	.word	0x80002000

08002b38 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	4608      	mov	r0, r1
 8002b42:	4611      	mov	r1, r2
 8002b44:	461a      	mov	r2, r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	817b      	strh	r3, [r7, #10]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	813b      	strh	r3, [r7, #8]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	8979      	ldrh	r1, [r7, #10]
 8002b58:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <I2C_RequestMemoryRead+0xa4>)
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fa0a 	bl	8002f78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	69b9      	ldr	r1, [r7, #24]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f89d 	bl	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e02c      	b.n	8002bd2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b7e:	893b      	ldrh	r3, [r7, #8]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
 8002b88:	e015      	b.n	8002bb6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b8a:	893b      	ldrh	r3, [r7, #8]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	69b9      	ldr	r1, [r7, #24]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f883 	bl	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e012      	b.n	8002bd2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bac:	893b      	ldrh	r3, [r7, #8]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2140      	movs	r1, #64	; 0x40
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f831 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	80002000 	.word	0x80002000

08002be0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d103      	bne.n	8002bfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d007      	beq.n	8002c1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	619a      	str	r2, [r3, #24]
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c38:	e022      	b.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d01e      	beq.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7ff f829 	bl	8001c98 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d113      	bne.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e00f      	b.n	8002ca0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d0cd      	beq.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cb4:	e02c      	b.n	8002d10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f870 	bl	8002da0 <I2C_IsErrorOccurred>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e02a      	b.n	8002d20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d01e      	beq.n	8002d10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7fe ffe1 	bl	8001c98 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d113      	bne.n	8002d10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e007      	b.n	8002d20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d1cb      	bne.n	8002cb6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d34:	e028      	b.n	8002d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f830 	bl	8002da0 <I2C_IsErrorOccurred>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e026      	b.n	8002d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7fe ffa5 	bl	8001c98 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d113      	bne.n	8002d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e007      	b.n	8002d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d1cf      	bne.n	8002d36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d075      	beq.n	8002eb8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dd4:	e056      	b.n	8002e84 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d052      	beq.n	8002e84 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dde:	f7fe ff5b 	bl	8001c98 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <I2C_IsErrorOccurred+0x54>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d147      	bne.n	8002e84 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e16:	d12e      	bne.n	8002e76 <I2C_IsErrorOccurred+0xd6>
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e1e:	d02a      	beq.n	8002e76 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d027      	beq.n	8002e76 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e36:	f7fe ff2f 	bl	8001c98 <HAL_GetTick>
 8002e3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e3c:	e01b      	b.n	8002e76 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e3e:	f7fe ff2b 	bl	8001c98 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b19      	cmp	r3, #25
 8002e4a:	d914      	bls.n	8002e76 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d1dc      	bne.n	8002e3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d003      	beq.n	8002e9a <I2C_IsErrorOccurred+0xfa>
 8002e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d09d      	beq.n	8002dd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	f043 0308 	orr.w	r3, r3, #8
 8002ef2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002efc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01c      	beq.n	8002f68 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff fe56 	bl	8002be0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <I2C_IsErrorOccurred+0x1d4>)
 8002f40:	400b      	ands	r3, r1
 8002f42:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3728      	adds	r7, #40	; 0x28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	fe00e800 	.word	0xfe00e800

08002f78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	817b      	strh	r3, [r7, #10]
 8002f86:	4613      	mov	r3, r2
 8002f88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f90:	7a7b      	ldrb	r3, [r7, #9]
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fa6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	0d5b      	lsrs	r3, r3, #21
 8002fb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <I2C_TransferConfig+0x60>)
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	ea02 0103 	and.w	r1, r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	03ff63ff 	.word	0x03ff63ff

08002fdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d138      	bne.n	8003064 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e032      	b.n	8003066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800302e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b20      	cmp	r3, #32
 8003086:	d139      	bne.n	80030fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003092:	2302      	movs	r3, #2
 8003094:	e033      	b.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2224      	movs	r2, #36	; 0x24
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	e007      	b.n	800313a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800312a:	4b07      	ldr	r3, [pc, #28]	; (8003148 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 0204 	bic.w	r2, r3, #4
 8003132:	4905      	ldr	r1, [pc, #20]	; (8003148 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
  }

  return status;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40030400 	.word	0x40030400

0800314c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_ICACHE_Enable+0x1c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <HAL_ICACHE_Enable+0x1c>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40030400 	.word	0x40030400

0800316c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003174:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800317c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d101      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e057      	b.n	800323a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d90a      	bls.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4313      	orrs	r3, r2
 800319e:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a4:	60d3      	str	r3, [r2, #12]
 80031a6:	e007      	b.n	80031b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80031b0:	4925      	ldr	r1, [pc, #148]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80031b8:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a24      	ldr	r2, [pc, #144]	; (8003250 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	2232      	movs	r2, #50	; 0x32
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	4a21      	ldr	r2, [pc, #132]	; (8003250 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	3301      	adds	r3, #1
 80031d4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80031d6:	e002      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80031de:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_PWREx_ControlVoltageScaling+0x84>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f3      	bne.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01b      	beq.n	800322e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a15      	ldr	r2, [pc, #84]	; (8003250 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	099b      	lsrs	r3, r3, #6
 8003202:	2232      	movs	r2, #50	; 0x32
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	4a11      	ldr	r2, [pc, #68]	; (8003250 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	3301      	adds	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003214:	e002      	b.n	800321c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3b01      	subs	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f3      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e000      	b.n	800323a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	46020800 	.word	0x46020800
 800324c:	20000014 	.word	0x20000014
 8003250:	10624dd3 	.word	0x10624dd3

08003254 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <HAL_PWREx_GetVoltageRange+0x18>)
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	46020800 	.word	0x46020800

08003270 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	4a04      	ldr	r2, [pc, #16]	; (800328c <HAL_PWREx_EnableVddIO2+0x1c>)
 800327a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800327e:	6113      	str	r3, [r2, #16]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	46020800 	.word	0x46020800

08003290 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	46020800 	.word	0x46020800

080032b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d102      	bne.n	80032ca <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f000 bec3 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ca:	4b9c      	ldr	r3, [pc, #624]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d4:	4b99      	ldr	r3, [pc, #612]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8172 	beq.w	80035d0 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <HAL_RCC_OscConfig+0x52>
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	f040 80e4 	bne.w	80034c2 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	f040 80e0 	bne.w	80034c2 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003302:	4b8e      	ldr	r3, [pc, #568]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d006      	beq.n	800331c <HAL_RCC_OscConfig+0x6c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f000 be9a 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003320:	4b86      	ldr	r3, [pc, #536]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <HAL_RCC_OscConfig+0x86>
 800332c:	4b83      	ldr	r3, [pc, #524]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003334:	e005      	b.n	8003342 <HAL_RCC_OscConfig+0x92>
 8003336:	4b81      	ldr	r3, [pc, #516]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003342:	4293      	cmp	r3, r2
 8003344:	d255      	bcs.n	80033f2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	4618      	mov	r0, r3
 8003352:	f001 f9d3 	bl	80046fc <RCC_SetFlashLatencyFromMSIRange>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f000 be77 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003362:	4b76      	ldr	r3, [pc, #472]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4a75      	ldr	r2, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003368:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800336c:	6093      	str	r3, [r2, #8]
 800336e:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	4970      	ldr	r1, [pc, #448]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003388:	d309      	bcc.n	800339e <HAL_RCC_OscConfig+0xee>
 800338a:	4b6c      	ldr	r3, [pc, #432]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f023 021f 	bic.w	r2, r3, #31
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4969      	ldr	r1, [pc, #420]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003398:	4313      	orrs	r3, r2
 800339a:	60cb      	str	r3, [r1, #12]
 800339c:	e07e      	b.n	800349c <HAL_RCC_OscConfig+0x1ec>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	da0a      	bge.n	80033bc <HAL_RCC_OscConfig+0x10c>
 80033a6:	4b65      	ldr	r3, [pc, #404]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	015b      	lsls	r3, r3, #5
 80033b4:	4961      	ldr	r1, [pc, #388]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60cb      	str	r3, [r1, #12]
 80033ba:	e06f      	b.n	800349c <HAL_RCC_OscConfig+0x1ec>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d30a      	bcc.n	80033dc <HAL_RCC_OscConfig+0x12c>
 80033c6:	4b5d      	ldr	r3, [pc, #372]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	029b      	lsls	r3, r3, #10
 80033d4:	4959      	ldr	r1, [pc, #356]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60cb      	str	r3, [r1, #12]
 80033da:	e05f      	b.n	800349c <HAL_RCC_OscConfig+0x1ec>
 80033dc:	4b57      	ldr	r3, [pc, #348]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	03db      	lsls	r3, r3, #15
 80033ea:	4954      	ldr	r1, [pc, #336]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60cb      	str	r3, [r1, #12]
 80033f0:	e054      	b.n	800349c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80033f2:	4b52      	ldr	r3, [pc, #328]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4a51      	ldr	r2, [pc, #324]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80033f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033fc:	6093      	str	r3, [r2, #8]
 80033fe:	4b4f      	ldr	r3, [pc, #316]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	494c      	ldr	r1, [pc, #304]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 800340c:	4313      	orrs	r3, r2
 800340e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003418:	d309      	bcc.n	800342e <HAL_RCC_OscConfig+0x17e>
 800341a:	4b48      	ldr	r3, [pc, #288]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f023 021f 	bic.w	r2, r3, #31
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4945      	ldr	r1, [pc, #276]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003428:	4313      	orrs	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
 800342c:	e028      	b.n	8003480 <HAL_RCC_OscConfig+0x1d0>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	2b00      	cmp	r3, #0
 8003434:	da0a      	bge.n	800344c <HAL_RCC_OscConfig+0x19c>
 8003436:	4b41      	ldr	r3, [pc, #260]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	015b      	lsls	r3, r3, #5
 8003444:	493d      	ldr	r1, [pc, #244]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	60cb      	str	r3, [r1, #12]
 800344a:	e019      	b.n	8003480 <HAL_RCC_OscConfig+0x1d0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d30a      	bcc.n	800346c <HAL_RCC_OscConfig+0x1bc>
 8003456:	4b39      	ldr	r3, [pc, #228]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	029b      	lsls	r3, r3, #10
 8003464:	4935      	ldr	r1, [pc, #212]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	60cb      	str	r3, [r1, #12]
 800346a:	e009      	b.n	8003480 <HAL_RCC_OscConfig+0x1d0>
 800346c:	4b33      	ldr	r3, [pc, #204]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	03db      	lsls	r3, r3, #15
 800347a:	4930      	ldr	r1, [pc, #192]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 800347c:	4313      	orrs	r3, r2
 800347e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	4618      	mov	r0, r3
 800348c:	f001 f936 	bl	80046fc <RCC_SetFlashLatencyFromMSIRange>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f000 bdda 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800349c:	f001 f8d8 	bl	8004650 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_RCC_OscConfig+0x290>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe fbad 	bl	8001c04 <HAL_InitTick>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80034b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 808a 	beq.w	80035ce <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 80034ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034be:	f000 bdc7 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d066      	beq.n	8003598 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80034ca:	4b1c      	ldr	r3, [pc, #112]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1b      	ldr	r2, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80034d6:	f7fe fbdf 	bl	8001c98 <HAL_GetTick>
 80034da:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80034dc:	e009      	b.n	80034f2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034de:	f7fe fbdb 	bl	8001c98 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d902      	bls.n	80034f2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	f000 bdaf 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0ef      	beq.n	80034de <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80034fe:	4b0f      	ldr	r3, [pc, #60]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4a0e      	ldr	r2, [pc, #56]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003504:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003508:	6093      	str	r3, [r2, #8]
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	4909      	ldr	r1, [pc, #36]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003518:	4313      	orrs	r3, r2
 800351a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003524:	d30e      	bcc.n	8003544 <HAL_RCC_OscConfig+0x294>
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f023 021f 	bic.w	r2, r3, #31
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4902      	ldr	r1, [pc, #8]	; (800353c <HAL_RCC_OscConfig+0x28c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
 8003538:	e04a      	b.n	80035d0 <HAL_RCC_OscConfig+0x320>
 800353a:	bf00      	nop
 800353c:	46020c00 	.word	0x46020c00
 8003540:	20000018 	.word	0x20000018
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	2b00      	cmp	r3, #0
 800354a:	da0a      	bge.n	8003562 <HAL_RCC_OscConfig+0x2b2>
 800354c:	4b9b      	ldr	r3, [pc, #620]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	015b      	lsls	r3, r3, #5
 800355a:	4998      	ldr	r1, [pc, #608]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800355c:	4313      	orrs	r3, r2
 800355e:	60cb      	str	r3, [r1, #12]
 8003560:	e036      	b.n	80035d0 <HAL_RCC_OscConfig+0x320>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356a:	d30a      	bcc.n	8003582 <HAL_RCC_OscConfig+0x2d2>
 800356c:	4b93      	ldr	r3, [pc, #588]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	029b      	lsls	r3, r3, #10
 800357a:	4990      	ldr	r1, [pc, #576]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
 8003580:	e026      	b.n	80035d0 <HAL_RCC_OscConfig+0x320>
 8003582:	4b8e      	ldr	r3, [pc, #568]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	03db      	lsls	r3, r3, #15
 8003590:	498a      	ldr	r1, [pc, #552]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003592:	4313      	orrs	r3, r2
 8003594:	60cb      	str	r3, [r1, #12]
 8003596:	e01b      	b.n	80035d0 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003598:	4b88      	ldr	r3, [pc, #544]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a87      	ldr	r2, [pc, #540]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80035a4:	f7fe fb78 	bl	8001c98 <HAL_GetTick>
 80035a8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80035aa:	e009      	b.n	80035c0 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ac:	f7fe fb74 	bl	8001c98 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d902      	bls.n	80035c0 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	f000 bd48 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80035c0:	4b7e      	ldr	r3, [pc, #504]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1ef      	bne.n	80035ac <HAL_RCC_OscConfig+0x2fc>
 80035cc:	e000      	b.n	80035d0 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8094 	beq.w	8003706 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_OscConfig+0x340>
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d110      	bne.n	800360c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d10d      	bne.n	800360c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	4b72      	ldr	r3, [pc, #456]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8083 	beq.w	8003704 <HAL_RCC_OscConfig+0x454>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d17e      	bne.n	8003704 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f000 bd22 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003614:	d106      	bne.n	8003624 <HAL_RCC_OscConfig+0x374>
 8003616:	4b69      	ldr	r3, [pc, #420]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a68      	ldr	r2, [pc, #416]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e041      	b.n	80036a8 <HAL_RCC_OscConfig+0x3f8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800362c:	d112      	bne.n	8003654 <HAL_RCC_OscConfig+0x3a4>
 800362e:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a62      	ldr	r2, [pc, #392]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b60      	ldr	r3, [pc, #384]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a5f      	ldr	r2, [pc, #380]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003640:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5c      	ldr	r2, [pc, #368]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e029      	b.n	80036a8 <HAL_RCC_OscConfig+0x3f8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800365c:	d112      	bne.n	8003684 <HAL_RCC_OscConfig+0x3d4>
 800365e:	4b57      	ldr	r3, [pc, #348]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a56      	ldr	r2, [pc, #344]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b54      	ldr	r3, [pc, #336]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a53      	ldr	r2, [pc, #332]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b51      	ldr	r3, [pc, #324]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a50      	ldr	r2, [pc, #320]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e011      	b.n	80036a8 <HAL_RCC_OscConfig+0x3f8>
 8003684:	4b4d      	ldr	r3, [pc, #308]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a4c      	ldr	r2, [pc, #304]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b4a      	ldr	r3, [pc, #296]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a49      	ldr	r2, [pc, #292]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a46      	ldr	r2, [pc, #280]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 80036a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80036a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d014      	beq.n	80036da <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 80036b0:	f7fe faf2 	bl	8001c98 <HAL_GetTick>
 80036b4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b6:	e009      	b.n	80036cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fe faee 	bl	8001c98 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d902      	bls.n	80036cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	f000 bcc2 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036cc:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ef      	beq.n	80036b8 <HAL_RCC_OscConfig+0x408>
 80036d8:	e015      	b.n	8003706 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80036da:	f7fe fadd 	bl	8001c98 <HAL_GetTick>
 80036de:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036e0:	e009      	b.n	80036f6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e2:	f7fe fad9 	bl	8001c98 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b64      	cmp	r3, #100	; 0x64
 80036ee:	d902      	bls.n	80036f6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	f000 bcad 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ef      	bne.n	80036e2 <HAL_RCC_OscConfig+0x432>
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d066      	beq.n	80037e0 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	2b04      	cmp	r3, #4
 8003716:	d005      	beq.n	8003724 <HAL_RCC_OscConfig+0x474>
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d11a      	bne.n	8003754 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	2b02      	cmp	r3, #2
 8003722:	d117      	bne.n	8003754 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	2b00      	cmp	r3, #0
 800372e:	d006      	beq.n	800373e <HAL_RCC_OscConfig+0x48e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f000 bc89 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	041b      	lsls	r3, r3, #16
 800374c:	491b      	ldr	r1, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003752:	e045      	b.n	80037e0 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d024      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003766:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003768:	f7fe fa96 	bl	8001c98 <HAL_GetTick>
 800376c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376e:	e009      	b.n	8003784 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003770:	f7fe fa92 	bl	8001c98 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d902      	bls.n	8003784 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	f000 bc66 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003784:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	4907      	ldr	r1, [pc, #28]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	610b      	str	r3, [r1, #16]
 80037a4:	e01c      	b.n	80037e0 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a04      	ldr	r2, [pc, #16]	; (80037bc <HAL_RCC_OscConfig+0x50c>)
 80037ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037b2:	f7fe fa71 	bl	8001c98 <HAL_GetTick>
 80037b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037b8:	e00c      	b.n	80037d4 <HAL_RCC_OscConfig+0x524>
 80037ba:	bf00      	nop
 80037bc:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c0:	f7fe fa6a 	bl	8001c98 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d902      	bls.n	80037d4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	f000 bc3e 	b.w	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d4:	4baf      	ldr	r3, [pc, #700]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ef      	bne.n	80037c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80c7 	beq.w	800397c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f4:	4ba7      	ldr	r3, [pc, #668]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d111      	bne.n	8003826 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4ba4      	ldr	r3, [pc, #656]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003808:	4aa2      	ldr	r2, [pc, #648]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003812:	4ba0      	ldr	r3, [pc, #640]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003826:	4b9c      	ldr	r3, [pc, #624]	; (8003a98 <HAL_RCC_OscConfig+0x7e8>)
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d118      	bne.n	8003864 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003832:	4b99      	ldr	r3, [pc, #612]	; (8003a98 <HAL_RCC_OscConfig+0x7e8>)
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	4a98      	ldr	r2, [pc, #608]	; (8003a98 <HAL_RCC_OscConfig+0x7e8>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800383e:	f7fe fa2b 	bl	8001c98 <HAL_GetTick>
 8003842:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003846:	f7fe fa27 	bl	8001c98 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e3fb      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003858:	4b8f      	ldr	r3, [pc, #572]	; (8003a98 <HAL_RCC_OscConfig+0x7e8>)
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d05f      	beq.n	800392c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800386c:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 800386e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003872:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	429a      	cmp	r2, r3
 8003880:	d037      	beq.n	80038f2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d006      	beq.n	800389a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e3da      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 80038a4:	4b7b      	ldr	r3, [pc, #492]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80038a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038aa:	4a7a      	ldr	r2, [pc, #488]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80038ac:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80038b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80038b4:	f7fe f9f0 	bl	8001c98 <HAL_GetTick>
 80038b8:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038bc:	f7fe f9ec 	bl	8001c98 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e3c0      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038ce:	4b71      	ldr	r3, [pc, #452]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80038d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ef      	bne.n	80038bc <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80038dc:	4b6d      	ldr	r3, [pc, #436]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80038de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	496a      	ldr	r1, [pc, #424]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80038f2:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80038f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f8:	4a66      	ldr	r2, [pc, #408]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80038fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003902:	f7fe f9c9 	bl	8001c98 <HAL_GetTick>
 8003906:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390a:	f7fe f9c5 	bl	8001c98 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e399      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800391c:	4b5d      	ldr	r3, [pc, #372]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 800391e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ef      	beq.n	800390a <HAL_RCC_OscConfig+0x65a>
 800392a:	e01b      	b.n	8003964 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800392c:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 800392e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003932:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003934:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003938:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800393c:	f7fe f9ac 	bl	8001c98 <HAL_GetTick>
 8003940:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003944:	f7fe f9a8 	bl	8001c98 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e37c      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003956:	4b4f      	ldr	r3, [pc, #316]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800395c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ef      	bne.n	8003944 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003964:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003968:	2b01      	cmp	r3, #1
 800396a:	d107      	bne.n	800397c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b49      	ldr	r3, [pc, #292]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003972:	4a48      	ldr	r2, [pc, #288]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003974:	f023 0304 	bic.w	r3, r3, #4
 8003978:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8112 	beq.w	8003bae <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800398a:	2300      	movs	r3, #0
 800398c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003990:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d111      	bne.n	80039c2 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80039a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a4:	4a3b      	ldr	r2, [pc, #236]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80039ae:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 80039b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039c2:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <HAL_RCC_OscConfig+0x7e8>)
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <HAL_RCC_OscConfig+0x7e8>)
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	4a31      	ldr	r2, [pc, #196]	; (8003a98 <HAL_RCC_OscConfig+0x7e8>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fe f95d 	bl	8001c98 <HAL_GetTick>
 80039de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fe f959 	bl	8001c98 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e32d      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <HAL_RCC_OscConfig+0x7e8>)
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01f      	beq.n	8003a4c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a18:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a2e:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a38:	e018      	b.n	8003a6c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a3a:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a40:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a4a:	e00f      	b.n	8003a6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a52:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a62:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <HAL_RCC_OscConfig+0x7e4>)
 8003a64:	f023 0304 	bic.w	r3, r3, #4
 8003a68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d058      	beq.n	8003b26 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8003a74:	f7fe f910 	bl	8001c98 <HAL_GetTick>
 8003a78:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7a:	e00f      	b.n	8003a9c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7c:	f7fe f90c 	bl	8001c98 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d906      	bls.n	8003a9c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e2de      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
 8003a92:	bf00      	nop
 8003a94:	46020c00 	.word	0x46020c00
 8003a98:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9c:	4b9c      	ldr	r3, [pc, #624]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0e8      	beq.n	8003a7c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01b      	beq.n	8003aee <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ab6:	4b96      	ldr	r3, [pc, #600]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003abc:	4a94      	ldr	r2, [pc, #592]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fe f8e6 	bl	8001c98 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e2b8      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ade:	4b8c      	ldr	r3, [pc, #560]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ed      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x818>
 8003aec:	e053      	b.n	8003b96 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003aee:	4b88      	ldr	r3, [pc, #544]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003af4:	4a86      	ldr	r2, [pc, #536]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b00:	f7fe f8ca 	bl	8001c98 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e29c      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b16:	4b7e      	ldr	r3, [pc, #504]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ed      	bne.n	8003b00 <HAL_RCC_OscConfig+0x850>
 8003b24:	e037      	b.n	8003b96 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003b26:	f7fe f8b7 	bl	8001c98 <HAL_GetTick>
 8003b2a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2e:	f7fe f8b3 	bl	8001c98 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e285      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b44:	4b72      	ldr	r3, [pc, #456]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1ed      	bne.n	8003b2e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003b52:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01a      	beq.n	8003b96 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b60:	4b6b      	ldr	r3, [pc, #428]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b66:	4a6a      	ldr	r2, [pc, #424]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fe f891 	bl	8001c98 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e263      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b88:	4b61      	ldr	r3, [pc, #388]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ed      	bne.n	8003b72 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b96:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9e:	4b5c      	ldr	r3, [pc, #368]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba4:	4a5a      	ldr	r2, [pc, #360]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003ba6:	f023 0304 	bic.w	r3, r3, #4
 8003baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d036      	beq.n	8003c28 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d019      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003bc2:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a52      	ldr	r2, [pc, #328]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003bc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bcc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003bce:	f7fe f863 	bl	8001c98 <HAL_GetTick>
 8003bd2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd6:	f7fe f85f 	bl	8001c98 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e233      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003be8:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x926>
 8003bf4:	e018      	b.n	8003c28 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003bf6:	4b46      	ldr	r3, [pc, #280]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a45      	ldr	r2, [pc, #276]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c00:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c02:	f7fe f849 	bl	8001c98 <HAL_GetTick>
 8003c06:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c0a:	f7fe f845 	bl	8001c98 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e219      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c1c:	4b3c      	ldr	r3, [pc, #240]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1f0      	bne.n	8003c0a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d036      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d019      	beq.n	8003c70 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003c3c:	4b34      	ldr	r3, [pc, #208]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a33      	ldr	r2, [pc, #204]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c46:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c48:	f7fe f826 	bl	8001c98 <HAL_GetTick>
 8003c4c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c50:	f7fe f822 	bl	8001c98 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e1f6      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c62:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x9a0>
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003c70:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003c76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c7c:	f7fe f80c 	bl	8001c98 <HAL_GetTick>
 8003c80:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c84:	f7fe f808 	bl	8001c98 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e1dc      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003c96:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d07f      	beq.n	8003dae <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d062      	beq.n	8003d7c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc0:	6093      	str	r3, [r2, #8]
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	4910      	ldr	r1, [pc, #64]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003cdc:	d309      	bcc.n	8003cf2 <HAL_RCC_OscConfig+0xa42>
 8003cde:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f023 021f 	bic.w	r2, r3, #31
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	4909      	ldr	r1, [pc, #36]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60cb      	str	r3, [r1, #12]
 8003cf0:	e02a      	b.n	8003d48 <HAL_RCC_OscConfig+0xa98>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	da0c      	bge.n	8003d14 <HAL_RCC_OscConfig+0xa64>
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	015b      	lsls	r3, r3, #5
 8003d08:	4901      	ldr	r1, [pc, #4]	; (8003d10 <HAL_RCC_OscConfig+0xa60>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60cb      	str	r3, [r1, #12]
 8003d0e:	e01b      	b.n	8003d48 <HAL_RCC_OscConfig+0xa98>
 8003d10:	46020c00 	.word	0x46020c00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1c:	d30a      	bcc.n	8003d34 <HAL_RCC_OscConfig+0xa84>
 8003d1e:	4ba5      	ldr	r3, [pc, #660]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	029b      	lsls	r3, r3, #10
 8003d2c:	49a1      	ldr	r1, [pc, #644]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60cb      	str	r3, [r1, #12]
 8003d32:	e009      	b.n	8003d48 <HAL_RCC_OscConfig+0xa98>
 8003d34:	4b9f      	ldr	r3, [pc, #636]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	03db      	lsls	r3, r3, #15
 8003d42:	499c      	ldr	r1, [pc, #624]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003d48:	4b9a      	ldr	r3, [pc, #616]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a99      	ldr	r2, [pc, #612]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003d4e:	f043 0310 	orr.w	r3, r3, #16
 8003d52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d54:	f7fd ffa0 	bl	8001c98 <HAL_GetTick>
 8003d58:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003d5c:	f7fd ff9c 	bl	8001c98 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e170      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d6e:	4b91      	ldr	r3, [pc, #580]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0xaac>
 8003d7a:	e018      	b.n	8003dae <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003d7c:	4b8d      	ldr	r3, [pc, #564]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a8c      	ldr	r2, [pc, #560]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d88:	f7fd ff86 	bl	8001c98 <HAL_GetTick>
 8003d8c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003d90:	f7fd ff82 	bl	8001c98 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e156      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003da2:	4b84      	ldr	r3, [pc, #528]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 814b 	beq.w	800404e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dbe:	4b7d      	ldr	r3, [pc, #500]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	f000 80fa 	beq.w	8003fc0 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	f040 80cc 	bne.w	8003f6e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003dd6:	4b77      	ldr	r3, [pc, #476]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a76      	ldr	r2, [pc, #472]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003ddc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003de2:	f7fd ff59 	bl	8001c98 <HAL_GetTick>
 8003de6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fd ff55 	bl	8001c98 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e129      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003dfc:	4b6d      	ldr	r3, [pc, #436]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f0      	bne.n	8003dea <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e08:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d111      	bne.n	8003e3a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1c:	4a65      	ldr	r2, [pc, #404]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003e1e:	f043 0304 	orr.w	r3, r3, #4
 8003e22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e26:	4b63      	ldr	r3, [pc, #396]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003e3a:	4b5f      	ldr	r3, [pc, #380]	; (8003fb8 <HAL_RCC_OscConfig+0xd08>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e46:	d102      	bne.n	8003e4e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e4e:	4b5a      	ldr	r3, [pc, #360]	; (8003fb8 <HAL_RCC_OscConfig+0xd08>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4a59      	ldr	r2, [pc, #356]	; (8003fb8 <HAL_RCC_OscConfig+0xd08>)
 8003e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e58:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003e5a:	4b56      	ldr	r3, [pc, #344]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e6e:	3a01      	subs	r2, #1
 8003e70:	0212      	lsls	r2, r2, #8
 8003e72:	4311      	orrs	r1, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	494e      	ldr	r1, [pc, #312]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	628b      	str	r3, [r1, #40]	; 0x28
 8003e80:	4b4c      	ldr	r3, [pc, #304]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e84:	4b4d      	ldr	r3, [pc, #308]	; (8003fbc <HAL_RCC_OscConfig+0xd0c>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e96:	3a01      	subs	r2, #1
 8003e98:	0252      	lsls	r2, r2, #9
 8003e9a:	b292      	uxth	r2, r2
 8003e9c:	4311      	orrs	r1, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ea2:	3a01      	subs	r2, #1
 8003ea4:	0412      	lsls	r2, r2, #16
 8003ea6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003eb0:	3a01      	subs	r2, #1
 8003eb2:	0612      	lsls	r2, r2, #24
 8003eb4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	493e      	ldr	r1, [pc, #248]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ec0:	4b3c      	ldr	r3, [pc, #240]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003ec6:	f023 0310 	bic.w	r3, r3, #16
 8003eca:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003ecc:	4b39      	ldr	r3, [pc, #228]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003edc:	00d2      	lsls	r2, r2, #3
 8003ede:	4935      	ldr	r1, [pc, #212]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ee4:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	4a32      	ldr	r2, [pc, #200]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003eea:	f043 0310 	orr.w	r3, r3, #16
 8003eee:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003ef0:	4b30      	ldr	r3, [pc, #192]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f023 020c 	bic.w	r2, r3, #12
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	492d      	ldr	r1, [pc, #180]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8003f02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <HAL_RCC_OscConfig+0xd08>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a2a      	ldr	r2, [pc, #168]	; (8003fb8 <HAL_RCC_OscConfig+0xd08>)
 8003f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f14:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003f16:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003f1e:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f24:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003f26:	f023 0304 	bic.w	r3, r3, #4
 8003f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f2e:	4b21      	ldr	r3, [pc, #132]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f38:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f44:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f46:	f7fd fea7 	bl	8001c98 <HAL_GetTick>
 8003f4a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd fea3 	bl	8001c98 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e077      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f60:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0xc9e>
 8003f6c:	e06f      	b.n	800404e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f7a:	f7fd fe8d 	bl	8001c98 <HAL_GetTick>
 8003f7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fd fe89 	bl	8001c98 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e05d      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	4a03      	ldr	r2, [pc, #12]	; (8003fb4 <HAL_RCC_OscConfig+0xd04>)
 8003fa6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003faa:	f023 0303 	bic.w	r3, r3, #3
 8003fae:	6293      	str	r3, [r2, #40]	; 0x28
 8003fb0:	e04d      	b.n	800404e <HAL_RCC_OscConfig+0xd9e>
 8003fb2:	bf00      	nop
 8003fb4:	46020c00 	.word	0x46020c00
 8003fb8:	46020800 	.word	0x46020800
 8003fbc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003fc0:	4b25      	ldr	r3, [pc, #148]	; (8004058 <HAL_RCC_OscConfig+0xda8>)
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_OscConfig+0xda8>)
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d03a      	beq.n	800404a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0203 	and.w	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d133      	bne.n	800404a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d12a      	bne.n	800404a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	0b1b      	lsrs	r3, r3, #12
 8003ff8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d122      	bne.n	800404a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d11a      	bne.n	800404a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	0a5b      	lsrs	r3, r3, #9
 8004018:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004020:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d111      	bne.n	800404a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d108      	bne.n	800404a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	0e1b      	lsrs	r3, r3, #24
 800403c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3738      	adds	r7, #56	; 0x38
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	46020c00 	.word	0x46020c00

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e1d9      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b9b      	ldr	r3, [pc, #620]	; (80042e0 <HAL_RCC_ClockConfig+0x284>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d910      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b98      	ldr	r3, [pc, #608]	; (80042e0 <HAL_RCC_ClockConfig+0x284>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 020f 	bic.w	r2, r3, #15
 8004086:	4996      	ldr	r1, [pc, #600]	; (80042e0 <HAL_RCC_ClockConfig+0x284>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b94      	ldr	r3, [pc, #592]	; (80042e0 <HAL_RCC_ClockConfig+0x284>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e1c1      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d010      	beq.n	80040ce <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	4b8c      	ldr	r3, [pc, #560]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d908      	bls.n	80040ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80040bc:	4b89      	ldr	r3, [pc, #548]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	4986      	ldr	r1, [pc, #536]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d012      	beq.n	8004100 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	4b81      	ldr	r3, [pc, #516]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d909      	bls.n	8004100 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80040ec:	4b7d      	ldr	r3, [pc, #500]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	497a      	ldr	r1, [pc, #488]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d010      	beq.n	800412e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	4b74      	ldr	r3, [pc, #464]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004118:	429a      	cmp	r2, r3
 800411a:	d908      	bls.n	800412e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800411c:	4b71      	ldr	r3, [pc, #452]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	496e      	ldr	r1, [pc, #440]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 800412a:	4313      	orrs	r3, r2
 800412c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d010      	beq.n	800415c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	4b69      	ldr	r3, [pc, #420]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	429a      	cmp	r2, r3
 8004148:	d908      	bls.n	800415c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800414a:	4b66      	ldr	r3, [pc, #408]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f023 020f 	bic.w	r2, r3, #15
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	4963      	ldr	r1, [pc, #396]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004158:	4313      	orrs	r3, r2
 800415a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80d2 	beq.w	800430e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d143      	bne.n	80041fe <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004176:	4b5b      	ldr	r3, [pc, #364]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d110      	bne.n	80041a6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b57      	ldr	r3, [pc, #348]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418a:	4a56      	ldr	r2, [pc, #344]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80041a6:	f7fd fd77 	bl	8001c98 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80041ac:	4b4e      	ldr	r3, [pc, #312]	; (80042e8 <HAL_RCC_ClockConfig+0x28c>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00f      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80041ba:	f7fd fd6d 	bl	8001c98 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e12b      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80041cc:	4b46      	ldr	r3, [pc, #280]	; (80042e8 <HAL_RCC_ClockConfig+0x28c>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80041de:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80041e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e4:	4a3f      	ldr	r2, [pc, #252]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80041e6:	f023 0304 	bic.w	r3, r3, #4
 80041ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041ee:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d121      	bne.n	800423e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e112      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d107      	bne.n	8004216 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d115      	bne.n	800423e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e106      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800421e:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0fa      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800422e:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0f2      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4926      	ldr	r1, [pc, #152]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 800424c:	4313      	orrs	r3, r2
 800424e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004250:	f7fd fd22 	bl	8001c98 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d112      	bne.n	8004284 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425e:	e00a      	b.n	8004276 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004260:	f7fd fd1a 	bl	8001c98 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e0d6      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004276:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d1ee      	bne.n	8004260 <HAL_RCC_ClockConfig+0x204>
 8004282:	e044      	b.n	800430e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d112      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800428c:	e00a      	b.n	80042a4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428e:	f7fd fd03 	bl	8001c98 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e0bf      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d1ee      	bne.n	800428e <HAL_RCC_ClockConfig+0x232>
 80042b0:	e02d      	b.n	800430e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d123      	bne.n	8004302 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fd fcec 	bl	8001c98 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e0a8      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042d2:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <HAL_RCC_ClockConfig+0x288>)
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1ee      	bne.n	80042bc <HAL_RCC_ClockConfig+0x260>
 80042de:	e016      	b.n	800430e <HAL_RCC_ClockConfig+0x2b2>
 80042e0:	40022000 	.word	0x40022000
 80042e4:	46020c00 	.word	0x46020c00
 80042e8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ec:	f7fd fcd4 	bl	8001c98 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e090      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004302:	4b4a      	ldr	r3, [pc, #296]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b04      	cmp	r3, #4
 800430c:	d1ee      	bne.n	80042ec <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d010      	beq.n	800433c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	4b43      	ldr	r3, [pc, #268]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	429a      	cmp	r2, r3
 8004328:	d208      	bcs.n	800433c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800432a:	4b40      	ldr	r3, [pc, #256]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f023 020f 	bic.w	r2, r3, #15
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	493d      	ldr	r1, [pc, #244]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 8004338:	4313      	orrs	r3, r2
 800433a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800433c:	4b3c      	ldr	r3, [pc, #240]	; (8004430 <HAL_RCC_ClockConfig+0x3d4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d210      	bcs.n	800436c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <HAL_RCC_ClockConfig+0x3d4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f023 020f 	bic.w	r2, r3, #15
 8004352:	4937      	ldr	r1, [pc, #220]	; (8004430 <HAL_RCC_ClockConfig+0x3d4>)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435a:	4b35      	ldr	r3, [pc, #212]	; (8004430 <HAL_RCC_ClockConfig+0x3d4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e05b      	b.n	8004424 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d010      	beq.n	800439a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	4b2b      	ldr	r3, [pc, #172]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004384:	429a      	cmp	r2, r3
 8004386:	d208      	bcs.n	800439a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004388:	4b28      	ldr	r3, [pc, #160]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4925      	ldr	r1, [pc, #148]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 8004396:	4313      	orrs	r3, r2
 8004398:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d012      	beq.n	80043cc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	4b20      	ldr	r3, [pc, #128]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d209      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80043b8:	4b1c      	ldr	r3, [pc, #112]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4919      	ldr	r1, [pc, #100]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d010      	beq.n	80043fa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695a      	ldr	r2, [r3, #20]
 80043dc:	4b13      	ldr	r3, [pc, #76]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d208      	bcs.n	80043fa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80043e8:	4b10      	ldr	r3, [pc, #64]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	490d      	ldr	r1, [pc, #52]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80043fa:	f000 f821 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80043fe:	4602      	mov	r2, r0
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x3d0>)
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	490a      	ldr	r1, [pc, #40]	; (8004434 <HAL_RCC_ClockConfig+0x3d8>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	4a09      	ldr	r2, [pc, #36]	; (8004438 <HAL_RCC_ClockConfig+0x3dc>)
 8004412:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_RCC_ClockConfig+0x3e0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fd fbf3 	bl	8001c04 <HAL_InitTick>
 800441e:	4603      	mov	r3, r0
 8004420:	73fb      	strb	r3, [r7, #15]

  return status;
 8004422:	7bfb      	ldrb	r3, [r7, #15]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	46020c00 	.word	0x46020c00
 8004430:	40022000 	.word	0x40022000
 8004434:	08008e88 	.word	0x08008e88
 8004438:	20000014 	.word	0x20000014
 800443c:	20000018 	.word	0x20000018

08004440 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	b08b      	sub	sp, #44	; 0x2c
 8004444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444e:	4b7b      	ldr	r3, [pc, #492]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004458:	4b78      	ldr	r3, [pc, #480]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x34>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d121      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d11e      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004474:	4b71      	ldr	r3, [pc, #452]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004480:	4b6e      	ldr	r3, [pc, #440]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004486:	0b1b      	lsrs	r3, r3, #12
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
 800448e:	e005      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004490:	4b6a      	ldr	r3, [pc, #424]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	0f1b      	lsrs	r3, r3, #28
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800449c:	4a68      	ldr	r2, [pc, #416]	; (8004640 <HAL_RCC_GetSysClockFreq+0x200>)
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d110      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044b0:	e00d      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044b2:	4b62      	ldr	r3, [pc, #392]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d102      	bne.n	80044c4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_RCC_GetSysClockFreq+0x204>)
 80044c0:	623b      	str	r3, [r7, #32]
 80044c2:	e004      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044ca:	4b5e      	ldr	r3, [pc, #376]	; (8004644 <HAL_RCC_GetSysClockFreq+0x204>)
 80044cc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	f040 80ac 	bne.w	800462e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80044d6:	4b59      	ldr	r3, [pc, #356]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80044e0:	4b56      	ldr	r3, [pc, #344]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	3301      	adds	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80044ee:	4b53      	ldr	r3, [pc, #332]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80044fa:	4b50      	ldr	r3, [pc, #320]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	08db      	lsrs	r3, r3, #3
 8004500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8086 	beq.w	800462a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d003      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0xec>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d022      	beq.n	8004570 <HAL_RCC_GetSysClockFreq+0x130>
 800452a:	e043      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004648 <HAL_RCC_GetSysClockFreq+0x208>
 800453a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453e:	4b3f      	ldr	r3, [pc, #252]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800454e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004552:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800464c <HAL_RCC_GetSysClockFreq+0x20c>
 8004556:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800455e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004562:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800456e:	e046      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004648 <HAL_RCC_GetSysClockFreq+0x208>
 800457e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004582:	4b2e      	ldr	r3, [pc, #184]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004592:	ed97 6a01 	vldr	s12, [r7, #4]
 8004596:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800464c <HAL_RCC_GetSysClockFreq+0x20c>
 800459a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800459e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ae:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80045b2:	e024      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	ee07 3a90 	vmov	s15, r3
 80045c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045dc:	ed97 6a01 	vldr	s12, [r7, #4]
 80045e0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800464c <HAL_RCC_GetSysClockFreq+0x20c>
 80045e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80045fc:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	0e1b      	lsrs	r3, r3, #24
 8004604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004608:	3301      	adds	r3, #1
 800460a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004616:	edd7 6a07 	vldr	s13, [r7, #28]
 800461a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800461e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004622:	ee17 3a90 	vmov	r3, s15
 8004626:	623b      	str	r3, [r7, #32]
 8004628:	e001      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800462e:	6a3b      	ldr	r3, [r7, #32]
}
 8004630:	4618      	mov	r0, r3
 8004632:	372c      	adds	r7, #44	; 0x2c
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	46020c00 	.word	0x46020c00
 8004640:	08008ea0 	.word	0x08008ea0
 8004644:	00f42400 	.word	0x00f42400
 8004648:	4b742400 	.word	0x4b742400
 800464c:	46000000 	.word	0x46000000

08004650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004654:	f7ff fef4 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <HAL_RCC_GetHCLKFreq+0x28>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	4906      	ldr	r1, [pc, #24]	; (800467c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004664:	5ccb      	ldrb	r3, [r1, r3]
 8004666:	fa22 f303 	lsr.w	r3, r2, r3
 800466a:	4a05      	ldr	r2, [pc, #20]	; (8004680 <HAL_RCC_GetHCLKFreq+0x30>)
 800466c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800466e:	4b04      	ldr	r3, [pc, #16]	; (8004680 <HAL_RCC_GetHCLKFreq+0x30>)
 8004670:	681b      	ldr	r3, [r3, #0]
}
 8004672:	4618      	mov	r0, r3
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	46020c00 	.word	0x46020c00
 800467c:	08008e88 	.word	0x08008e88
 8004680:	20000014 	.word	0x20000014

08004684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004688:	f7ff ffe2 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4903      	ldr	r1, [pc, #12]	; (80046a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	46020c00 	.word	0x46020c00
 80046a8:	08008e98 	.word	0x08008e98

080046ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80046b0:	f7ff ffce 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	4903      	ldr	r1, [pc, #12]	; (80046d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	46020c00 	.word	0x46020c00
 80046d0:	08008e98 	.word	0x08008e98

080046d4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80046d8:	f7ff ffba 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 80046dc:	4602      	mov	r2, r0
 80046de:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <HAL_RCC_GetPCLK3Freq+0x20>)
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	4903      	ldr	r1, [pc, #12]	; (80046f8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80046ea:	5ccb      	ldrb	r3, [r1, r3]
 80046ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	46020c00 	.word	0x46020c00
 80046f8:	08008e98 	.word	0x08008e98

080046fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004704:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004712:	f7fe fd9f 	bl	8003254 <HAL_PWREx_GetVoltageRange>
 8004716:	6178      	str	r0, [r7, #20]
 8004718:	e019      	b.n	800474e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800471c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004720:	4a37      	ldr	r2, [pc, #220]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800472a:	4b35      	ldr	r3, [pc, #212]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800472c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004738:	f7fe fd8c 	bl	8003254 <HAL_PWREx_GetVoltageRange>
 800473c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800473e:	4b30      	ldr	r3, [pc, #192]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004744:	4a2e      	ldr	r2, [pc, #184]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004746:	f023 0304 	bic.w	r3, r3, #4
 800474a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004754:	d003      	beq.n	800475e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800475c:	d109      	bne.n	8004772 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004764:	d202      	bcs.n	800476c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004766:	2301      	movs	r3, #1
 8004768:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800476a:	e033      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004770:	e030      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004778:	d208      	bcs.n	800478c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004780:	d102      	bne.n	8004788 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004782:	2303      	movs	r3, #3
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	e025      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e035      	b.n	80047f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004792:	d90f      	bls.n	80047b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047a0:	d902      	bls.n	80047a8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e015      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80047a8:	2301      	movs	r3, #1
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	e012      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e00f      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ba:	d109      	bne.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c2:	d102      	bne.n	80047ca <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80047c4:	2301      	movs	r3, #1
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e004      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80047ca:	2302      	movs	r3, #2
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	e001      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80047d0:	2301      	movs	r3, #1
 80047d2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f023 020f 	bic.w	r2, r3, #15
 80047dc:	4909      	ldr	r1, [pc, #36]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d001      	beq.n	80047f6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	46020c00 	.word	0x46020c00
 8004804:	40022000 	.word	0x40022000

08004808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800480c:	b0ba      	sub	sp, #232	; 0xe8
 800480e:	af00      	add	r7, sp, #0
 8004810:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004814:	2300      	movs	r3, #0
 8004816:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800481a:	2300      	movs	r3, #0
 800481c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f002 0401 	and.w	r4, r2, #1
 800482c:	2500      	movs	r5, #0
 800482e:	ea54 0305 	orrs.w	r3, r4, r5
 8004832:	d00b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004834:	4bcb      	ldr	r3, [pc, #812]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800483a:	f023 0103 	bic.w	r1, r3, #3
 800483e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004844:	4ac7      	ldr	r2, [pc, #796]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004846:	430b      	orrs	r3, r1
 8004848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800484c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f002 0802 	and.w	r8, r2, #2
 8004858:	f04f 0900 	mov.w	r9, #0
 800485c:	ea58 0309 	orrs.w	r3, r8, r9
 8004860:	d00b      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004862:	4bc0      	ldr	r3, [pc, #768]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004868:	f023 010c 	bic.w	r1, r3, #12
 800486c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	4abc      	ldr	r2, [pc, #752]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004874:	430b      	orrs	r3, r1
 8004876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800487a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f002 0a04 	and.w	sl, r2, #4
 8004886:	f04f 0b00 	mov.w	fp, #0
 800488a:	ea5a 030b 	orrs.w	r3, sl, fp
 800488e:	d00b      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004890:	4bb4      	ldr	r3, [pc, #720]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004896:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800489a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	4ab0      	ldr	r2, [pc, #704]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f002 0308 	and.w	r3, r2, #8
 80048b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048b8:	2300      	movs	r3, #0
 80048ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80048c8:	4ba6      	ldr	r3, [pc, #664]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d8:	4aa2      	ldr	r2, [pc, #648]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048da:	430b      	orrs	r3, r1
 80048dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f002 0310 	and.w	r3, r2, #16
 80048ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d00b      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004900:	4b98      	ldr	r3, [pc, #608]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004906:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800490a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	4a94      	ldr	r2, [pc, #592]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004912:	430b      	orrs	r3, r1
 8004914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f002 0320 	and.w	r3, r2, #32
 8004924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004928:	2300      	movs	r3, #0
 800492a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800492e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004932:	460b      	mov	r3, r1
 8004934:	4313      	orrs	r3, r2
 8004936:	d00b      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004938:	4b8a      	ldr	r3, [pc, #552]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800493a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800493e:	f023 0107 	bic.w	r1, r3, #7
 8004942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004948:	4a86      	ldr	r2, [pc, #536]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494a:	430b      	orrs	r3, r1
 800494c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800495c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004960:	2300      	movs	r3, #0
 8004962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004966:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800496a:	460b      	mov	r3, r1
 800496c:	4313      	orrs	r3, r2
 800496e:	d00b      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004970:	4b7c      	ldr	r3, [pc, #496]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004976:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800497a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800497e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004980:	4a78      	ldr	r2, [pc, #480]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004982:	430b      	orrs	r3, r1
 8004984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004988:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004994:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800499e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049a2:	460b      	mov	r3, r1
 80049a4:	4313      	orrs	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80049a8:	4b6e      	ldr	r3, [pc, #440]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b8:	4a6a      	ldr	r2, [pc, #424]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ba:	430b      	orrs	r3, r1
 80049bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80049cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049d6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d00b      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80049e0:	4b60      	ldr	r3, [pc, #384]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	4a5c      	ldr	r2, [pc, #368]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004a12:	460b      	mov	r3, r1
 8004a14:	4313      	orrs	r3, r2
 8004a16:	d00b      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004a18:	4b52      	ldr	r3, [pc, #328]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a1e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a28:	4a4e      	ldr	r2, [pc, #312]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004a50:	4b44      	ldr	r3, [pc, #272]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a56:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a60:	4a40      	ldr	r2, [pc, #256]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a62:	430b      	orrs	r3, r1
 8004a64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a7e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004a82:	460b      	mov	r3, r1
 8004a84:	4313      	orrs	r3, r2
 8004a86:	d00b      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004a88:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a8e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a98:	4a32      	ldr	r2, [pc, #200]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004aa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ab6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d00c      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004ac0:	4b28      	ldr	r3, [pc, #160]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad2:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004ae6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ae8:	2300      	movs	r3, #0
 8004aea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004aec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004af0:	460b      	mov	r3, r1
 8004af2:	4313      	orrs	r3, r2
 8004af4:	d04f      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	2b80      	cmp	r3, #128	; 0x80
 8004b00:	d02d      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d827      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b06:	2b60      	cmp	r3, #96	; 0x60
 8004b08:	d02e      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b0a:	2b60      	cmp	r3, #96	; 0x60
 8004b0c:	d823      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b0e:	2b40      	cmp	r3, #64	; 0x40
 8004b10:	d006      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d81f      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d011      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004b1e:	e01a      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b20:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	4a0f      	ldr	r2, [pc, #60]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b2c:	e01d      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b32:	3308      	adds	r3, #8
 8004b34:	4618      	mov	r0, r3
 8004b36:	f002 f981 	bl	8006e3c <RCCEx_PLL2_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b40:	e013      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b46:	332c      	adds	r3, #44	; 0x2c
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f002 fa0f 	bl	8006f6c <RCCEx_PLL3_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b54:	e009      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004b5c:	e005      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e003      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b62:	bf00      	nop
 8004b64:	46020c00 	.word	0x46020c00
        break;
 8004b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004b72:	4bb6      	ldr	r3, [pc, #728]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004b74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b78:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	4ab1      	ldr	r2, [pc, #708]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004b86:	430b      	orrs	r3, r1
 8004b88:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004b8c:	e003      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004b92:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004ba2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	677b      	str	r3, [r7, #116]	; 0x74
 8004ba8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004bac:	460b      	mov	r3, r1
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	d053      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbe:	d033      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc4:	d82c      	bhi.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bca:	d02f      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bd0:	d826      	bhi.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd6:	d008      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bdc:	d820      	bhi.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8004be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be6:	d011      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004be8:	e01a      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bea:	4b98      	ldr	r3, [pc, #608]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	4a97      	ldr	r2, [pc, #604]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004bf6:	e01a      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f002 f91c 	bl	8006e3c <RCCEx_PLL2_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c0a:	e010      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c10:	332c      	adds	r3, #44	; 0x2c
 8004c12:	4618      	mov	r0, r3
 8004c14:	f002 f9aa 	bl	8006f6c <RCCEx_PLL3_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c1e:	e006      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004c26:	e002      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004c28:	bf00      	nop
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8004c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10d      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004c36:	4b85      	ldr	r3, [pc, #532]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c3c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c48:	4a80      	ldr	r2, [pc, #512]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c50:	e003      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c52:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004c56:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004c66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c68:	2300      	movs	r3, #0
 8004c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c6c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c70:	460b      	mov	r3, r1
 8004c72:	4313      	orrs	r3, r2
 8004c74:	d046      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004c82:	d028      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c84:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004c88:	d821      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c8e:	d022      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c94:	d81b      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004c96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c9a:	d01c      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004c9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ca0:	d815      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca6:	d008      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cac:	d80f      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d011      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb6:	d00e      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8004cb8:	e009      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 f8bb 	bl	8006e3c <RCCEx_PLL2_Config>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ccc:	e004      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004cd4:	e000      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8004cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10d      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004ce0:	4b5a      	ldr	r3, [pc, #360]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ce6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cf2:	4a56      	ldr	r2, [pc, #344]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004cfa:	e003      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d00:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004d10:	663b      	str	r3, [r7, #96]	; 0x60
 8004d12:	2300      	movs	r3, #0
 8004d14:	667b      	str	r3, [r7, #100]	; 0x64
 8004d16:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	d03f      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d81e      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004d2c:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d73 	.word	0x08004d73
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d57 	.word	0x08004d57
 8004d40:	08004d73 	.word	0x08004d73
 8004d44:	08004d73 	.word	0x08004d73
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d48:	4b40      	ldr	r3, [pc, #256]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	4a3f      	ldr	r2, [pc, #252]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d52:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004d54:	e00e      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d5a:	332c      	adds	r3, #44	; 0x2c
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 f905 	bl	8006f6c <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d68:	e004      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004d70:	e000      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8004d72:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d74:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10d      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004d7c:	4b33      	ldr	r3, [pc, #204]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d82:	f023 0107 	bic.w	r1, r3, #7
 8004d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	4a2f      	ldr	r2, [pc, #188]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004d96:	e003      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d98:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004d9c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004da0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004dac:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dae:	2300      	movs	r3, #0
 8004db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d04d      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004dbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dc8:	d028      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004dca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dce:	d821      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004dd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dd4:	d024      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004dd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dda:	d81b      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de0:	d00e      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8004de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de6:	d815      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01b      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df0:	d110      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004df2:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004dfe:	e012      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e04:	332c      	adds	r3, #44	; 0x2c
 8004e06:	4618      	mov	r0, r3
 8004e08:	f002 f8b0 	bl	8006f6c <RCCEx_PLL3_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004e12:	e008      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004e1a:	e004      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004e1c:	bf00      	nop
 8004e1e:	e002      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8004e24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d110      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e34:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004e38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e40:	4a02      	ldr	r2, [pc, #8]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e48:	e006      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004e4a:	bf00      	nop
 8004e4c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004e54:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004e64:	653b      	str	r3, [r7, #80]	; 0x50
 8004e66:	2300      	movs	r3, #0
 8004e68:	657b      	str	r3, [r7, #84]	; 0x54
 8004e6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f000 80b5 	beq.w	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e7c:	4b9d      	ldr	r3, [pc, #628]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d113      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8a:	4b9a      	ldr	r3, [pc, #616]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e90:	4a98      	ldr	r2, [pc, #608]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004e9a:	4b96      	ldr	r3, [pc, #600]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004eb2:	4b91      	ldr	r3, [pc, #580]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	4a90      	ldr	r2, [pc, #576]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ebe:	f7fc feeb 	bl	8001c98 <HAL_GetTick>
 8004ec2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec8:	f7fc fee6 	bl	8001c98 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d903      	bls.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8004ede:	e005      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ee0:	4b85      	ldr	r3, [pc, #532]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ed      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8004eec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d165      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ef4:	4b7f      	ldr	r3, [pc, #508]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d023      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8004f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01b      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f1a:	4b76      	ldr	r3, [pc, #472]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f28:	4b72      	ldr	r3, [pc, #456]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f2e:	4a71      	ldr	r2, [pc, #452]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f38:	4b6e      	ldr	r3, [pc, #440]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f3e:	4a6d      	ldr	r2, [pc, #436]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f48:	4a6a      	ldr	r2, [pc, #424]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d019      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7fc fe9b 	bl	8001c98 <HAL_GetTick>
 8004f62:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f66:	e00d      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fc fe96 	bl	8001c98 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f72:	1ad2      	subs	r2, r2, r3
 8004f74:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d903      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8004f82:	e006      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f84:	4b5b      	ldr	r3, [pc, #364]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0ea      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8004f92:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10d      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004f9a:	4b56      	ldr	r3, [pc, #344]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004fac:	4a51      	ldr	r2, [pc, #324]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004fba:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8004fbe:	e003      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8004fc4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fc8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd0:	4b48      	ldr	r3, [pc, #288]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd6:	4a47      	ldr	r2, [pc, #284]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004fd8:	f023 0304 	bic.w	r3, r3, #4
 8004fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004fe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fee:	2300      	movs	r3, #0
 8004ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	d042      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005000:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005004:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005008:	d022      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800500a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800500e:	d81b      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005014:	d011      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800501a:	d815      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d019      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005024:	d110      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800502a:	3308      	adds	r3, #8
 800502c:	4618      	mov	r0, r3
 800502e:	f001 ff05 	bl	8006e3c <RCCEx_PLL2_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005038:	e00d      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503a:	4b2e      	ldr	r3, [pc, #184]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	4a2d      	ldr	r2, [pc, #180]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005044:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005046:	e006      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800504e:	e002      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005050:	bf00      	nop
 8005052:	e000      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005054:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005056:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10d      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800505e:	4b25      	ldr	r3, [pc, #148]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005064:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800506c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005070:	4a20      	ldr	r2, [pc, #128]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005072:	430b      	orrs	r3, r1
 8005074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005078:	e003      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800507e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800508e:	643b      	str	r3, [r7, #64]	; 0x40
 8005090:	2300      	movs	r3, #0
 8005092:	647b      	str	r3, [r7, #68]	; 0x44
 8005094:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005098:	460b      	mov	r3, r1
 800509a:	4313      	orrs	r3, r2
 800509c:	d032      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800509e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050aa:	d00b      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80050ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b0:	d804      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80050b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ba:	d007      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80050c2:	e004      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80050c4:	bf00      	nop
 80050c6:	e002      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80050c8:	bf00      	nop
 80050ca:	e000      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80050cc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80050ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d112      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80050d6:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050e8:	4a02      	ldr	r2, [pc, #8]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80050ea:	430b      	orrs	r3, r1
 80050ec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80050f0:	e008      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80050f2:	bf00      	nop
 80050f4:	46020c00 	.word	0x46020c00
 80050f8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005100:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005110:	63bb      	str	r3, [r7, #56]	; 0x38
 8005112:	2300      	movs	r3, #0
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005116:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800511a:	460b      	mov	r3, r1
 800511c:	4313      	orrs	r3, r2
 800511e:	d00c      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005120:	4b98      	ldr	r3, [pc, #608]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005122:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005126:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800512a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800512e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005132:	4a94      	ldr	r2, [pc, #592]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005134:	430b      	orrs	r3, r1
 8005136:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800513a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005146:	633b      	str	r3, [r7, #48]	; 0x30
 8005148:	2300      	movs	r3, #0
 800514a:	637b      	str	r3, [r7, #52]	; 0x34
 800514c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005150:	460b      	mov	r3, r1
 8005152:	4313      	orrs	r3, r2
 8005154:	d019      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800515a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800515e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005162:	d105      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005164:	4b87      	ldr	r3, [pc, #540]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	4a86      	ldr	r2, [pc, #536]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800516a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005170:	4b84      	ldr	r3, [pc, #528]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005172:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005176:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800517a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800517e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005182:	4a80      	ldr	r2, [pc, #512]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005184:	430b      	orrs	r3, r1
 8005186:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800518a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
 8005198:	2300      	movs	r3, #0
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80051a0:	460b      	mov	r3, r1
 80051a2:	4313      	orrs	r3, r2
 80051a4:	d00c      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80051a6:	4b77      	ldr	r3, [pc, #476]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051b8:	4972      	ldr	r1, [pc, #456]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80051c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
 80051d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051d6:	460b      	mov	r3, r1
 80051d8:	4313      	orrs	r3, r2
 80051da:	d00c      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80051dc:	4b69      	ldr	r3, [pc, #420]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051ee:	4965      	ldr	r1, [pc, #404]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80051f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	2300      	movs	r3, #0
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800520c:	460b      	mov	r3, r1
 800520e:	4313      	orrs	r3, r2
 8005210:	d00c      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005212:	4b5c      	ldr	r3, [pc, #368]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005218:	f023 0218 	bic.w	r2, r3, #24
 800521c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005220:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005224:	4957      	ldr	r1, [pc, #348]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800522c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005242:	460b      	mov	r3, r1
 8005244:	4313      	orrs	r3, r2
 8005246:	d032      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800524c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005254:	d105      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005256:	4b4b      	ldr	r3, [pc, #300]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	4a4a      	ldr	r2, [pc, #296]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800525c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005260:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800526a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800526e:	d108      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005274:	3308      	adds	r3, #8
 8005276:	4618      	mov	r0, r3
 8005278:	f001 fde0 	bl	8006e3c <RCCEx_PLL2_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005282:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800528a:	4b3e      	ldr	r3, [pc, #248]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800528c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005298:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800529c:	4939      	ldr	r1, [pc, #228]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80052a4:	e003      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80052aa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80052ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80052c4:	460b      	mov	r3, r1
 80052c6:	4313      	orrs	r3, r2
 80052c8:	d03a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80052ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052d6:	d00e      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80052d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052dc:	d815      	bhi.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d017      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80052e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052e6:	d110      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e8:	4b26      	ldr	r3, [pc, #152]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	4a25      	ldr	r2, [pc, #148]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80052ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80052f4:	e00e      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052fa:	3308      	adds	r3, #8
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 fd9d 	bl	8006e3c <RCCEx_PLL2_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005308:	e004      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005310:	e000      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005312:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005314:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10d      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800531c:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800531e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005322:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800532a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532e:	4915      	ldr	r1, [pc, #84]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005336:	e003      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005338:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800533c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	2300      	movs	r3, #0
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005356:	460b      	mov	r3, r1
 8005358:	4313      	orrs	r3, r2
 800535a:	d00c      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800535e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005362:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800536a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800536e:	4905      	ldr	r1, [pc, #20]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005376:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800537a:	4618      	mov	r0, r3
 800537c:	37e8      	adds	r7, #232	; 0xe8
 800537e:	46bd      	mov	sp, r7
 8005380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005384:	46020c00 	.word	0x46020c00

08005388 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005388:	b480      	push	{r7}
 800538a:	b089      	sub	sp, #36	; 0x24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005390:	4bac      	ldr	r3, [pc, #688]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005398:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800539a:	4baa      	ldr	r3, [pc, #680]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80053a4:	4ba7      	ldr	r3, [pc, #668]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	3301      	adds	r3, #1
 80053b0:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80053b2:	4ba4      	ldr	r3, [pc, #656]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80053bc:	4ba1      	ldr	r3, [pc, #644]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	08db      	lsrs	r3, r3, #3
 80053c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	fb02 f303 	mul.w	r3, r2, r3
 80053cc:	ee07 3a90 	vmov	s15, r3
 80053d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 8123 	beq.w	8005626 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d062      	beq.n	80054ac <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	f200 8081 	bhi.w	80054f0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d024      	beq.n	800543e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d17a      	bne.n	80054f0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	ee07 3a90 	vmov	s15, r3
 8005400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005404:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8005408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540c:	4b8d      	ldr	r3, [pc, #564]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005414:	ee07 3a90 	vmov	s15, r3
 8005418:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800541c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005420:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800564c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005424:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005428:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800542c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005430:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005438:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800543c:	e08f      	b.n	800555e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800543e:	4b81      	ldr	r3, [pc, #516]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800544a:	4b7e      	ldr	r3, [pc, #504]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	0f1b      	lsrs	r3, r3, #28
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	e006      	b.n	8005464 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8005456:	4b7b      	ldr	r3, [pc, #492]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005458:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	0f1b      	lsrs	r3, r3, #28
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	4a7a      	ldr	r2, [pc, #488]	; (8005650 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548a:	ed97 6a02 	vldr	s12, [r7, #8]
 800548e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800564c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800549e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054aa:	e058      	b.n	800555e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005648 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80054ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054be:	4b61      	ldr	r3, [pc, #388]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80054c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80054ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80054d2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800564c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80054d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80054de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ee:	e036      	b.n	800555e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80054f0:	4b54      	ldr	r3, [pc, #336]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 80054fc:	4b51      	ldr	r3, [pc, #324]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	0f1b      	lsrs	r3, r3, #28
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	e006      	b.n	8005516 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8005508:	4b4e      	ldr	r3, [pc, #312]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800550a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800550e:	041b      	lsls	r3, r3, #16
 8005510:	0f1b      	lsrs	r3, r3, #28
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	4a4e      	ldr	r2, [pc, #312]	; (8005650 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	ee07 3a90 	vmov	s15, r3
 8005538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005540:	eddf 5a42 	vldr	s11, [pc, #264]	; 800564c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005550:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005558:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800555c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800555e:	4b39      	ldr	r3, [pc, #228]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8005560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d017      	beq.n	800559a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800556a:	4b36      	ldr	r3, [pc, #216]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800556c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556e:	0a5b      	lsrs	r3, r3, #9
 8005570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800557c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005580:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005584:	edd7 6a07 	vldr	s13, [r7, #28]
 8005588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005590:	ee17 2a90 	vmov	r2, s15
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	e002      	b.n	80055a0 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80055a0:	4b28      	ldr	r3, [pc, #160]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d017      	beq.n	80055dc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80055be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055c2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80055ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d2:	ee17 2a90 	vmov	r2, s15
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	e002      	b.n	80055e2 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80055e2:	4b18      	ldr	r3, [pc, #96]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d017      	beq.n	800561e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055ee:	4b15      	ldr	r3, [pc, #84]	; (8005644 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80055f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f2:	0e1b      	lsrs	r3, r3, #24
 80055f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005604:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005608:	edd7 6a07 	vldr	s13, [r7, #28]
 800560c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005614:	ee17 2a90 	vmov	r2, s15
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800561c:	e00c      	b.n	8005638 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	609a      	str	r2, [r3, #8]
}
 8005624:	e008      	b.n	8005638 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	609a      	str	r2, [r3, #8]
}
 8005638:	bf00      	nop
 800563a:	3724      	adds	r7, #36	; 0x24
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	46020c00 	.word	0x46020c00
 8005648:	4b742400 	.word	0x4b742400
 800564c:	46000000 	.word	0x46000000
 8005650:	08008ea0 	.word	0x08008ea0

08005654 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005654:	b480      	push	{r7}
 8005656:	b089      	sub	sp, #36	; 0x24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800565c:	4bac      	ldr	r3, [pc, #688]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005664:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005666:	4baa      	ldr	r3, [pc, #680]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005670:	4ba7      	ldr	r3, [pc, #668]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	0a1b      	lsrs	r3, r3, #8
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	3301      	adds	r3, #1
 800567c:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800567e:	4ba4      	ldr	r3, [pc, #656]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005688:	4ba1      	ldr	r3, [pc, #644]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	08db      	lsrs	r3, r3, #3
 800568e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	fb02 f303 	mul.w	r3, r2, r3
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8123 	beq.w	80058f2 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d062      	beq.n	8005778 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	f200 8081 	bhi.w	80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d024      	beq.n	800570a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d17a      	bne.n	80057bc <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005914 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80056d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d8:	4b8d      	ldr	r3, [pc, #564]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80056e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ec:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005918 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80056f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80056f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80056f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005704:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005708:	e08f      	b.n	800582a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800570a:	4b81      	ldr	r3, [pc, #516]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8005716:	4b7e      	ldr	r3, [pc, #504]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0f1b      	lsrs	r3, r3, #28
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	e006      	b.n	8005730 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8005722:	4b7b      	ldr	r3, [pc, #492]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005728:	041b      	lsls	r3, r3, #16
 800572a:	0f1b      	lsrs	r3, r3, #28
 800572c:	f003 030f 	and.w	r3, r3, #15
 8005730:	4a7a      	ldr	r2, [pc, #488]	; (800591c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a02 	vldr	s12, [r7, #8]
 800575a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005918 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005776:	e058      	b.n	800582a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005914 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8005786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578a:	4b61      	ldr	r3, [pc, #388]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800579a:	ed97 6a02 	vldr	s12, [r7, #8]
 800579e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005918 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80057a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80057a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80057aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80057b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ba:	e036      	b.n	800582a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80057bc:	4b54      	ldr	r3, [pc, #336]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 80057c8:	4b51      	ldr	r3, [pc, #324]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	0f1b      	lsrs	r3, r3, #28
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	e006      	b.n	80057e2 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 80057d4:	4b4e      	ldr	r3, [pc, #312]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80057d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	0f1b      	lsrs	r3, r3, #28
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	4a4e      	ldr	r2, [pc, #312]	; (800591c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80057e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	ee07 3a90 	vmov	s15, r3
 8005804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005808:	ed97 6a02 	vldr	s12, [r7, #8]
 800580c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005918 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800581c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005824:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005828:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800582a:	4b39      	ldr	r3, [pc, #228]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d017      	beq.n	8005866 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005836:	4b36      	ldr	r3, [pc, #216]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8005838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583a:	0a5b      	lsrs	r3, r3, #9
 800583c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005840:	ee07 3a90 	vmov	s15, r3
 8005844:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800584c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005850:	edd7 6a07 	vldr	s13, [r7, #28]
 8005854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800585c:	ee17 2a90 	vmov	r2, s15
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	e002      	b.n	800586c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800586c:	4b28      	ldr	r3, [pc, #160]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d017      	beq.n	80058a8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005878:	4b25      	ldr	r3, [pc, #148]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587c:	0c1b      	lsrs	r3, r3, #16
 800587e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800588a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800588e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005892:	edd7 6a07 	vldr	s13, [r7, #28]
 8005896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800589a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800589e:	ee17 2a90 	vmov	r2, s15
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	e002      	b.n	80058ae <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80058ae:	4b18      	ldr	r3, [pc, #96]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d017      	beq.n	80058ea <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058ba:	4b15      	ldr	r3, [pc, #84]	; (8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80058bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058be:	0e1b      	lsrs	r3, r3, #24
 80058c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c4:	ee07 3a90 	vmov	s15, r3
 80058c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80058cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058d0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80058d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e0:	ee17 2a90 	vmov	r2, s15
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80058e8:	e00c      	b.n	8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	609a      	str	r2, [r3, #8]
}
 80058f0:	e008      	b.n	8005904 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	3724      	adds	r7, #36	; 0x24
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	46020c00 	.word	0x46020c00
 8005914:	4b742400 	.word	0x4b742400
 8005918:	46000000 	.word	0x46000000
 800591c:	08008ea0 	.word	0x08008ea0

08005920 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005920:	b480      	push	{r7}
 8005922:	b089      	sub	sp, #36	; 0x24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005928:	4bac      	ldr	r3, [pc, #688]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800592a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005930:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005932:	4baa      	ldr	r3, [pc, #680]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800593c:	4ba7      	ldr	r3, [pc, #668]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	0a1b      	lsrs	r3, r3, #8
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	3301      	adds	r3, #1
 8005948:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800594a:	4ba4      	ldr	r3, [pc, #656]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005954:	4ba1      	ldr	r3, [pc, #644]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005958:	08db      	lsrs	r3, r3, #3
 800595a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	fb02 f303 	mul.w	r3, r2, r3
 8005964:	ee07 3a90 	vmov	s15, r3
 8005968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 8123 	beq.w	8005bbe <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b03      	cmp	r3, #3
 800597c:	d062      	beq.n	8005a44 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b03      	cmp	r3, #3
 8005982:	f200 8081 	bhi.w	8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d024      	beq.n	80059d6 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d17a      	bne.n	8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	ee07 3a90 	vmov	s15, r3
 8005998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005be0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80059a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a4:	4b8d      	ldr	r3, [pc, #564]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80059b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80059b8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80059bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80059c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80059c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80059cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d0:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80059d4:	e08f      	b.n	8005af6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80059d6:	4b81      	ldr	r3, [pc, #516]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80059e2:	4b7e      	ldr	r3, [pc, #504]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	0f1b      	lsrs	r3, r3, #28
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	e006      	b.n	80059fc <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80059ee:	4b7b      	ldr	r3, [pc, #492]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80059f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	0f1b      	lsrs	r3, r3, #28
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	4a7a      	ldr	r2, [pc, #488]	; (8005be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80059fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a26:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a42:	e058      	b.n	8005af6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	ee07 3a90 	vmov	s15, r3
 8005a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005be0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8005a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a56:	4b61      	ldr	r3, [pc, #388]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a6a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a86:	e036      	b.n	8005af6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a88:	4b54      	ldr	r3, [pc, #336]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8005a94:	4b51      	ldr	r3, [pc, #324]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	0f1b      	lsrs	r3, r3, #28
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	e006      	b.n	8005aae <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8005aa0:	4b4e      	ldr	r3, [pc, #312]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	0f1b      	lsrs	r3, r3, #28
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	4a4e      	ldr	r2, [pc, #312]	; (8005be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8005ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab4:	ee07 3a90 	vmov	s15, r3
 8005ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	ee07 3a90 	vmov	s15, r3
 8005ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ad8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005af4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005af6:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d017      	beq.n	8005b32 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b02:	4b36      	ldr	r3, [pc, #216]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b06:	0a5b      	lsrs	r3, r3, #9
 8005b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0c:	ee07 3a90 	vmov	s15, r3
 8005b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b18:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b28:	ee17 2a90 	vmov	r2, s15
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	e002      	b.n	8005b38 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005b38:	4b28      	ldr	r3, [pc, #160]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d017      	beq.n	8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b44:	4b25      	ldr	r3, [pc, #148]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b6a:	ee17 2a90 	vmov	r2, s15
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	e002      	b.n	8005b7a <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005b7a:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d017      	beq.n	8005bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b86:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8005b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8a:	0e1b      	lsrs	r3, r3, #24
 8005b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b9c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bac:	ee17 2a90 	vmov	r2, s15
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8005bb4:	e00c      	b.n	8005bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	609a      	str	r2, [r3, #8]
}
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	609a      	str	r2, [r3, #8]
}
 8005bd0:	bf00      	nop
 8005bd2:	3724      	adds	r7, #36	; 0x24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	46020c00 	.word	0x46020c00
 8005be0:	4b742400 	.word	0x4b742400
 8005be4:	46000000 	.word	0x46000000
 8005be8:	08008ea0 	.word	0x08008ea0

08005bec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08e      	sub	sp, #56	; 0x38
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bfa:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	d145      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c02:	4ba7      	ldr	r3, [pc, #668]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005c0e:	4ba4      	ldr	r3, [pc, #656]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d108      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c22:	d104      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2a:	f001 b8fc 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005c2e:	4b9c      	ldr	r3, [pc, #624]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c3c:	d114      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c44:	d110      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c46:	4b96      	ldr	r3, [pc, #600]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c54:	d103      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005c56:	23fa      	movs	r3, #250	; 0xfa
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c5a:	f001 b8e4 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005c5e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c64:	f001 b8df 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c68:	4b8d      	ldr	r3, [pc, #564]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c74:	d107      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c7c:	d103      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005c7e:	4b89      	ldr	r3, [pc, #548]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
 8005c82:	f001 b8d0 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8a:	f001 b8cc 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c92:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005c96:	430b      	orrs	r3, r1
 8005c98:	d151      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005c9a:	4b81      	ldr	r3, [pc, #516]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005c9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ca0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005ca4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	d035      	beq.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d841      	bhi.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	2b60      	cmp	r3, #96	; 0x60
 8005cb6:	d02a      	beq.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	2b60      	cmp	r3, #96	; 0x60
 8005cbc:	d83b      	bhi.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d009      	beq.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	d835      	bhi.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00c      	beq.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d012      	beq.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005cd6:	e02e      	b.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fb53 	bl	8005388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ce6:	f001 b89e 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cea:	f107 0318 	add.w	r3, r7, #24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fcb0 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cf8:	f001 b895 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cfc:	f107 030c 	add.w	r3, r7, #12
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fe0d 	bl	8005920 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d0a:	f001 b88c 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005d0e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d14:	f001 b887 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d18:	4b61      	ldr	r3, [pc, #388]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d24:	d103      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005d26:	4b60      	ldr	r3, [pc, #384]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d2a:	f001 b87c 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d32:	f001 b878 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d3a:	f001 b874 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d42:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005d46:	430b      	orrs	r3, r1
 8005d48:	d158      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005d4a:	4b55      	ldr	r3, [pc, #340]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d54:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5c:	d03b      	beq.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d64:	d846      	bhi.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d6c:	d02e      	beq.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d74:	d83e      	bhi.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7c:	d00b      	beq.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d84:	d836      	bhi.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00d      	beq.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d92:	d012      	beq.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005d94:	e02e      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff faf4 	bl	8005388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005da4:	f001 b83f 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005da8:	f107 0318 	add.w	r3, r7, #24
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fc51 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005db6:	f001 b836 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dba:	f107 030c 	add.w	r3, r7, #12
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fdae 	bl	8005920 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc8:	f001 b82d 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005dcc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dd2:	f001 b828 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dd6:	4b32      	ldr	r3, [pc, #200]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de2:	d103      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005de4:	4b30      	ldr	r3, [pc, #192]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005de6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005de8:	f001 b81d 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005df0:	f001 b819 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005df8:	f001 b815 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e00:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005e04:	430b      	orrs	r3, r1
 8005e06:	d126      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005e08:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005e14:	4b22      	ldr	r3, [pc, #136]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e20:	d106      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d103      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005e28:	4b1f      	ldr	r3, [pc, #124]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2c:	f000 bffb 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005e30:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e44:	d103      	bne.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8005e46:	4b19      	ldr	r3, [pc, #100]	; (8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
 8005e4a:	f000 bfec 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
 8005e52:	f000 bfe8 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	d164      	bne.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005e62:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e68:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005e6c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e74:	d03d      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e7c:	d852      	bhi.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e84:	d014      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e8c:	d84a      	bhi.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01f      	beq.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e9a:	d012      	beq.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005e9c:	e042      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005e9e:	bf00      	nop
 8005ea0:	46020c00 	.word	0x46020c00
 8005ea4:	0007a120 	.word	0x0007a120
 8005ea8:	00f42400 	.word	0x00f42400
 8005eac:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fa67 	bl	8005388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ebe:	f000 bfb2 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ec2:	f107 0318 	add.w	r3, r7, #24
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff fbc4 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ed0:	f000 bfa9 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005ed4:	4bab      	ldr	r3, [pc, #684]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee0:	d103      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8005ee2:	4ba9      	ldr	r3, [pc, #676]	; (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ee6:	f000 bf9e 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005eee:	f000 bf9a 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ef2:	4ba4      	ldr	r3, [pc, #656]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8005efe:	4ba1      	ldr	r3, [pc, #644]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	0e1b      	lsrs	r3, r3, #24
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	e006      	b.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8005f0a:	4b9e      	ldr	r3, [pc, #632]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	0e1b      	lsrs	r3, r3, #24
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	4a9c      	ldr	r2, [pc, #624]	; (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f20:	f000 bf81 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f28:	f000 bf7d 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f30:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8005f34:	430b      	orrs	r3, r1
 8005f36:	d175      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005f38:	4b92      	ldr	r3, [pc, #584]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f42:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d15b      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005f4a:	4b8e      	ldr	r3, [pc, #568]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f50:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005f54:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f5c:	d034      	beq.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f64:	d849      	bhi.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f6c:	d00b      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f74:	d841      	bhi.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d016      	beq.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f82:	d009      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8005f84:	e039      	b.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff f9fc 	bl	8005388 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005f94:	f000 bf47 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f98:	f107 0318 	add.w	r3, r7, #24
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fb59 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005fa6:	f000 bf3e 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005faa:	4b76      	ldr	r3, [pc, #472]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb6:	d103      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8005fb8:	4b73      	ldr	r3, [pc, #460]	; (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005fbc:	f000 bf33 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005fc4:	f000 bf2f 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005fc8:	4b6e      	ldr	r3, [pc, #440]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8005fd4:	4b6b      	ldr	r3, [pc, #428]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	0e1b      	lsrs	r3, r3, #24
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	e006      	b.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8005fe0:	4b68      	ldr	r3, [pc, #416]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fe6:	041b      	lsls	r3, r3, #16
 8005fe8:	0e1b      	lsrs	r3, r3, #24
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	4a67      	ldr	r2, [pc, #412]	; (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005ff6:	f000 bf16 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8005ffe:	f000 bf12 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006008:	d108      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800600a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff f9ba 	bl	8005388 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	637b      	str	r3, [r7, #52]	; 0x34
 8006018:	f000 bf05 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
 8006020:	f000 bf01 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006028:	1e51      	subs	r1, r2, #1
 800602a:	430b      	orrs	r3, r1
 800602c:	d136      	bne.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800602e:	4b55      	ldr	r3, [pc, #340]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	2b00      	cmp	r3, #0
 800603e:	d104      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006040:	f7fe fb34 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8006044:	6378      	str	r0, [r7, #52]	; 0x34
 8006046:	f000 beee 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	2b01      	cmp	r3, #1
 800604e:	d104      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006050:	f7fe f9f6 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8006054:	6378      	str	r0, [r7, #52]	; 0x34
 8006056:	f000 bee6 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800605a:	4b4a      	ldr	r3, [pc, #296]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006066:	d106      	bne.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	2b02      	cmp	r3, #2
 800606c:	d103      	bne.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800606e:	4b48      	ldr	r3, [pc, #288]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006070:	637b      	str	r3, [r7, #52]	; 0x34
 8006072:	f000 bed8 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006076:	4b43      	ldr	r3, [pc, #268]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b02      	cmp	r3, #2
 8006082:	d107      	bne.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	2b03      	cmp	r3, #3
 8006088:	d104      	bne.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800608a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
 8006090:	f000 bec9 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	637b      	str	r3, [r7, #52]	; 0x34
 8006098:	f000 bec5 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800609c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a0:	1e91      	subs	r1, r2, #2
 80060a2:	430b      	orrs	r3, r1
 80060a4:	d136      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80060a6:	4b37      	ldr	r3, [pc, #220]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80060a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ac:	f003 030c 	and.w	r3, r3, #12
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80060b8:	f7fe fae4 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80060bc:	6378      	str	r0, [r7, #52]	; 0x34
 80060be:	f000 beb2 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d104      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80060c8:	f7fe f9ba 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80060cc:	6378      	str	r0, [r7, #52]	; 0x34
 80060ce:	f000 beaa 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80060d2:	4b2c      	ldr	r3, [pc, #176]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060de:	d106      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d103      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80060e6:	4b2a      	ldr	r3, [pc, #168]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ea:	f000 be9c 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80060ee:	4b25      	ldr	r3, [pc, #148]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80060f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d107      	bne.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	2b0c      	cmp	r3, #12
 8006100:	d104      	bne.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8006102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006106:	637b      	str	r3, [r7, #52]	; 0x34
 8006108:	f000 be8d 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	637b      	str	r3, [r7, #52]	; 0x34
 8006110:	f000 be89 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006118:	1f11      	subs	r1, r2, #4
 800611a:	430b      	orrs	r3, r1
 800611c:	d13e      	bne.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800611e:	4b19      	ldr	r3, [pc, #100]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006124:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006128:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	2b00      	cmp	r3, #0
 800612e:	d104      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006130:	f7fe faa8 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8006134:	6378      	str	r0, [r7, #52]	; 0x34
 8006136:	f000 be76 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	2b10      	cmp	r3, #16
 800613e:	d104      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006140:	f7fe f97e 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8006144:	6378      	str	r0, [r7, #52]	; 0x34
 8006146:	f000 be6e 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800614a:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006156:	d106      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	2b20      	cmp	r3, #32
 800615c:	d103      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
 8006162:	f000 be60 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b02      	cmp	r3, #2
 8006172:	d10f      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	2b30      	cmp	r3, #48	; 0x30
 8006178:	d10c      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617e:	637b      	str	r3, [r7, #52]	; 0x34
 8006180:	f000 be51 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006184:	46020c00 	.word	0x46020c00
 8006188:	02dc6c00 	.word	0x02dc6c00
 800618c:	08008ea0 	.word	0x08008ea0
 8006190:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	637b      	str	r3, [r7, #52]	; 0x34
 8006198:	f000 be45 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800619c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a0:	f1a2 0108 	sub.w	r1, r2, #8
 80061a4:	430b      	orrs	r3, r1
 80061a6:	d136      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80061a8:	4b9f      	ldr	r3, [pc, #636]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80061aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80061ba:	f7fe fa63 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80061be:	6378      	str	r0, [r7, #52]	; 0x34
 80061c0:	f000 be31 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d104      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80061ca:	f7fe f939 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80061ce:	6378      	str	r0, [r7, #52]	; 0x34
 80061d0:	f000 be29 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80061d4:	4b94      	ldr	r3, [pc, #592]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e0:	d106      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	2b80      	cmp	r3, #128	; 0x80
 80061e6:	d103      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80061e8:	4b90      	ldr	r3, [pc, #576]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80061ea:	637b      	str	r3, [r7, #52]	; 0x34
 80061ec:	f000 be1b 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80061f0:	4b8d      	ldr	r3, [pc, #564]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80061f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d107      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	2bc0      	cmp	r3, #192	; 0xc0
 8006202:	d104      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8006204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
 800620a:	f000 be0c 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	637b      	str	r3, [r7, #52]	; 0x34
 8006212:	f000 be08 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621a:	f1a2 0110 	sub.w	r1, r2, #16
 800621e:	430b      	orrs	r3, r1
 8006220:	d139      	bne.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006222:	4b81      	ldr	r3, [pc, #516]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006234:	f7fe fa26 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8006238:	6378      	str	r0, [r7, #52]	; 0x34
 800623a:	f000 bdf4 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006244:	d104      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006246:	f7fe f8fb 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 800624a:	6378      	str	r0, [r7, #52]	; 0x34
 800624c:	f000 bdeb 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006250:	4b75      	ldr	r3, [pc, #468]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625c:	d107      	bne.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006264:	d103      	bne.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8006266:	4b71      	ldr	r3, [pc, #452]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
 800626a:	f000 bddc 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800626e:	4b6e      	ldr	r3, [pc, #440]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b02      	cmp	r3, #2
 800627a:	d108      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006282:	d104      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8006284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
 800628a:	f000 bdcc 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
 8006292:	f000 bdc8 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800629a:	f1a2 0120 	sub.w	r1, r2, #32
 800629e:	430b      	orrs	r3, r1
 80062a0:	d158      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80062a2:	4b61      	ldr	r3, [pc, #388]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d104      	bne.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80062b4:	f7fe fa0e 	bl	80046d4 <HAL_RCC_GetPCLK3Freq>
 80062b8:	6378      	str	r0, [r7, #52]	; 0x34
 80062ba:	f000 bdb4 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d104      	bne.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062c4:	f7fe f8bc 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80062c8:	6378      	str	r0, [r7, #52]	; 0x34
 80062ca:	f000 bdac 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80062ce:	4b56      	ldr	r3, [pc, #344]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062da:	d106      	bne.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d103      	bne.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 80062e2:	4b52      	ldr	r3, [pc, #328]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80062e4:	637b      	str	r3, [r7, #52]	; 0x34
 80062e6:	f000 bd9e 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80062ea:	4b4f      	ldr	r3, [pc, #316]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d107      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d104      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 80062fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
 8006304:	f000 bd8f 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006308:	4b47      	ldr	r3, [pc, #284]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b20      	cmp	r3, #32
 8006312:	d11b      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	2b04      	cmp	r3, #4
 8006318:	d118      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800631a:	4b43      	ldr	r3, [pc, #268]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d005      	beq.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006326:	4b40      	ldr	r3, [pc, #256]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	0e1b      	lsrs	r3, r3, #24
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	e006      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8006332:	4b3d      	ldr	r3, [pc, #244]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	0e1b      	lsrs	r3, r3, #24
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	4a3b      	ldr	r2, [pc, #236]	; (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006346:	637b      	str	r3, [r7, #52]	; 0x34
 8006348:	f000 bd6d 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	637b      	str	r3, [r7, #52]	; 0x34
 8006350:	f000 bd69 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006358:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800635c:	430b      	orrs	r3, r1
 800635e:	d169      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006360:	4b31      	ldr	r3, [pc, #196]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006366:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800636a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006372:	d104      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006374:	f7fe f864 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8006378:	6378      	str	r0, [r7, #52]	; 0x34
 800637a:	f000 bd54 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006384:	d108      	bne.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006386:	f107 0318 	add.w	r3, r7, #24
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff f962 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
 8006394:	f000 bd47 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	2b00      	cmp	r3, #0
 800639c:	d104      	bne.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800639e:	f7fe f957 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 80063a2:	6378      	str	r0, [r7, #52]	; 0x34
 80063a4:	f000 bd3f 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80063ae:	d118      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80063b0:	4b1d      	ldr	r3, [pc, #116]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80063bc:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	0f1b      	lsrs	r3, r3, #28
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	e006      	b.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80063ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	0f1b      	lsrs	r3, r3, #28
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	4a16      	ldr	r2, [pc, #88]	; (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80063d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
 80063de:	f000 bd22 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ee:	d107      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063f6:	d103      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 80063f8:	4b0c      	ldr	r3, [pc, #48]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
 80063fc:	f000 bd13 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006400:	4b09      	ldr	r3, [pc, #36]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640c:	d107      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006414:	d103      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006418:	637b      	str	r3, [r7, #52]	; 0x34
 800641a:	f000 bd04 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
 8006422:	f000 bd00 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006426:	bf00      	nop
 8006428:	46020c00 	.word	0x46020c00
 800642c:	00f42400 	.word	0x00f42400
 8006430:	08008ea0 	.word	0x08008ea0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006438:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800643c:	430b      	orrs	r3, r1
 800643e:	d14e      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006440:	4ba8      	ldr	r3, [pc, #672]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006442:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	2b04      	cmp	r3, #4
 8006450:	d841      	bhi.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006452:	a201      	add	r2, pc, #4	; (adr r2, 8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	08006491 	.word	0x08006491
 800645c:	0800646d 	.word	0x0800646d
 8006460:	0800647f 	.word	0x0800647f
 8006464:	0800649b 	.word	0x0800649b
 8006468:	080064a5 	.word	0x080064a5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800646c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe ff89 	bl	8005388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800647a:	f000 bcd4 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800647e:	f107 030c 	add.w	r3, r7, #12
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff fa4c 	bl	8005920 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800648c:	f000 bccb 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006490:	f7fe f8de 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 8006494:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006496:	f000 bcc6 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800649a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064a0:	f000 bcc1 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064a4:	4b8f      	ldr	r3, [pc, #572]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80064b0:	4b8c      	ldr	r3, [pc, #560]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	0e1b      	lsrs	r3, r3, #24
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	e006      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80064bc:	4b89      	ldr	r3, [pc, #548]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064c2:	041b      	lsls	r3, r3, #16
 80064c4:	0e1b      	lsrs	r3, r3, #24
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	4a87      	ldr	r2, [pc, #540]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80064cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064d2:	f000 bca8 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064da:	f000 bca4 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80064de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e2:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80064e6:	430b      	orrs	r3, r1
 80064e8:	d15d      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80064ea:	4b7e      	ldr	r3, [pc, #504]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80064ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064f0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80064f4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064fc:	d036      	beq.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006504:	d84b      	bhi.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800650c:	d029      	beq.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006514:	d843      	bhi.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651c:	d013      	beq.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006524:	d83b      	bhi.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	2b00      	cmp	r3, #0
 800652a:	d015      	beq.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006532:	d134      	bne.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe ff25 	bl	8005388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006542:	f000 bc70 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006546:	f107 030c 	add.w	r3, r7, #12
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff f9e8 	bl	8005920 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006554:	f000 bc67 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006558:	f7fe f87a 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 800655c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800655e:	f000 bc62 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006562:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006566:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006568:	f000 bc5d 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800656c:	4b5d      	ldr	r3, [pc, #372]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006578:	4b5a      	ldr	r3, [pc, #360]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	0e1b      	lsrs	r3, r3, #24
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	e006      	b.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006584:	4b57      	ldr	r3, [pc, #348]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	0e1b      	lsrs	r3, r3, #24
 800658e:	f003 030f 	and.w	r3, r3, #15
 8006592:	4a55      	ldr	r2, [pc, #340]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800659a:	f000 bc44 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065a2:	f000 bc40 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80065a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065aa:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80065ae:	430b      	orrs	r3, r1
 80065b0:	d14a      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80065b2:	4b4c      	ldr	r3, [pc, #304]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80065b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065c4:	f7fe f85e 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80065c8:	6378      	str	r0, [r7, #52]	; 0x34
 80065ca:	f000 bc2c 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d4:	d104      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065d6:	f7fd ff33 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80065da:	6378      	str	r0, [r7, #52]	; 0x34
 80065dc:	f000 bc23 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80065e0:	4b40      	ldr	r3, [pc, #256]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ec:	d107      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f4:	d103      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 80065f6:	4b3d      	ldr	r3, [pc, #244]	; (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80065f8:	637b      	str	r3, [r7, #52]	; 0x34
 80065fa:	f000 bc14 	b.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80065fe:	4b39      	ldr	r3, [pc, #228]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b20      	cmp	r3, #32
 8006608:	d11b      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006610:	d117      	bne.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006612:	4b34      	ldr	r3, [pc, #208]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800661e:	4b31      	ldr	r3, [pc, #196]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	0e1b      	lsrs	r3, r3, #24
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	e006      	b.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800662a:	4b2e      	ldr	r3, [pc, #184]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800662c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006630:	041b      	lsls	r3, r3, #16
 8006632:	0e1b      	lsrs	r3, r3, #24
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	4a2b      	ldr	r2, [pc, #172]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800663a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
 8006640:	e3f1      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
 8006646:	e3ee      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800664c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006650:	430b      	orrs	r3, r1
 8006652:	d14d      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006654:	4b23      	ldr	r3, [pc, #140]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800665a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800665e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006666:	f7fe f80d 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 800666a:	6378      	str	r0, [r7, #52]	; 0x34
 800666c:	e3db      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006674:	d103      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006676:	f7fd fee3 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 800667a:	6378      	str	r0, [r7, #52]	; 0x34
 800667c:	e3d3      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800667e:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668a:	d106      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006692:	d102      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8006694:	4b15      	ldr	r3, [pc, #84]	; (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006696:	637b      	str	r3, [r7, #52]	; 0x34
 8006698:	e3c5      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800669a:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d11b      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066ac:	d117      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066ae:	4b0d      	ldr	r3, [pc, #52]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 80066ba:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	0e1b      	lsrs	r3, r3, #24
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	e006      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80066c6:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80066c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	0e1b      	lsrs	r3, r3, #24
 80066d0:	f003 030f 	and.w	r3, r3, #15
 80066d4:	4a04      	ldr	r2, [pc, #16]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80066d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066da:	637b      	str	r3, [r7, #52]	; 0x34
 80066dc:	e3a3      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	637b      	str	r3, [r7, #52]	; 0x34
 80066e2:	e3a0      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80066e4:	46020c00 	.word	0x46020c00
 80066e8:	08008ea0 	.word	0x08008ea0
 80066ec:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80066f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f4:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80066f8:	430b      	orrs	r3, r1
 80066fa:	d148      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80066fc:	4b9d      	ldr	r3, [pc, #628]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80066fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006702:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006706:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	2bc0      	cmp	r3, #192	; 0xc0
 800670c:	d024      	beq.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	2bc0      	cmp	r3, #192	; 0xc0
 8006712:	d839      	bhi.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	2b80      	cmp	r3, #128	; 0x80
 8006718:	d00d      	beq.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	2b80      	cmp	r3, #128	; 0x80
 800671e:	d833      	bhi.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	d011      	beq.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800672c:	e02c      	b.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800672e:	f7fd ffd1 	bl	80046d4 <HAL_RCC_GetPCLK3Freq>
 8006732:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006734:	e377      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006736:	4b8f      	ldr	r3, [pc, #572]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800673e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006742:	d102      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8006744:	4b8c      	ldr	r3, [pc, #560]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006746:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006748:	e36d      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800674e:	e36a      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006750:	f7fd fe76 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8006754:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006756:	e366      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8006758:	4b86      	ldr	r3, [pc, #536]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8006764:	4b83      	ldr	r3, [pc, #524]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	0f1b      	lsrs	r3, r3, #28
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	e006      	b.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8006770:	4b80      	ldr	r3, [pc, #512]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006776:	041b      	lsls	r3, r3, #16
 8006778:	0f1b      	lsrs	r3, r3, #28
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	4a7f      	ldr	r2, [pc, #508]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006786:	e34e      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800678c:	e34b      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800678e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006792:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006796:	430b      	orrs	r3, r1
 8006798:	d147      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800679a:	4b76      	ldr	r3, [pc, #472]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800679c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067a4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d103      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067ac:	f7fd ff6a 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80067b0:	6378      	str	r0, [r7, #52]	; 0x34
 80067b2:	e338      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ba:	d103      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067bc:	f7fd fe40 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80067c0:	6378      	str	r0, [r7, #52]	; 0x34
 80067c2:	e330      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80067c4:	4b6b      	ldr	r3, [pc, #428]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d0:	d106      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d8:	d102      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 80067da:	4b67      	ldr	r3, [pc, #412]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80067dc:	637b      	str	r3, [r7, #52]	; 0x34
 80067de:	e322      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80067e0:	4b64      	ldr	r3, [pc, #400]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d11b      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067f2:	d117      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067f4:	4b5f      	ldr	r3, [pc, #380]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006800:	4b5c      	ldr	r3, [pc, #368]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	0e1b      	lsrs	r3, r3, #24
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	e006      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800680c:	4b59      	ldr	r3, [pc, #356]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800680e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006812:	041b      	lsls	r3, r3, #16
 8006814:	0e1b      	lsrs	r3, r3, #24
 8006816:	f003 030f 	and.w	r3, r3, #15
 800681a:	4a58      	ldr	r2, [pc, #352]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800681c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
 8006822:	e300      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
 8006828:	e2fd      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800682a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800682e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006832:	430b      	orrs	r3, r1
 8006834:	d15b      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006836:	4b4f      	ldr	r3, [pc, #316]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800683c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006840:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	2b00      	cmp	r3, #0
 8006846:	d117      	bne.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006848:	4b4a      	ldr	r3, [pc, #296]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8006854:	4b47      	ldr	r3, [pc, #284]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	0e1b      	lsrs	r3, r3, #24
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	e006      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8006860:	4b44      	ldr	r3, [pc, #272]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006866:	041b      	lsls	r3, r3, #16
 8006868:	0e1b      	lsrs	r3, r3, #24
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	4a43      	ldr	r2, [pc, #268]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
 8006876:	e2d6      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006878:	4b3e      	ldr	r3, [pc, #248]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800687a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800687e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006886:	d112      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688e:	d10e      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006890:	4b38      	ldr	r3, [pc, #224]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800689a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800689e:	d102      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 80068a0:	23fa      	movs	r3, #250	; 0xfa
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068a4:	e2bf      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80068a6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068ac:	e2bb      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80068ae:	4b31      	ldr	r3, [pc, #196]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ba:	d106      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c2:	d102      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 80068c4:	4b2c      	ldr	r3, [pc, #176]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
 80068c8:	e2ad      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80068ca:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80068cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d107      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068de:	d103      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 80068e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
 80068e6:	e29e      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
 80068ec:	e29b      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80068ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80068f6:	430b      	orrs	r3, r1
 80068f8:	d162      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80068fa:	4b1e      	ldr	r3, [pc, #120]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80068fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006900:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006904:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	2b00      	cmp	r3, #0
 800690a:	d117      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800690c:	4b19      	ldr	r3, [pc, #100]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8006918:	4b16      	ldr	r3, [pc, #88]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	0e1b      	lsrs	r3, r3, #24
 800691e:	f003 030f 	and.w	r3, r3, #15
 8006922:	e006      	b.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006924:	4b13      	ldr	r3, [pc, #76]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006926:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800692a:	041b      	lsls	r3, r3, #16
 800692c:	0e1b      	lsrs	r3, r3, #24
 800692e:	f003 030f 	and.w	r3, r3, #15
 8006932:	4a12      	ldr	r2, [pc, #72]	; (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8006934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
 800693a:	e274      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800693c:	4b0d      	ldr	r3, [pc, #52]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800693e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800694a:	d119      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006952:	d115      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800695a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006962:	d102      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8006964:	23fa      	movs	r3, #250	; 0xfa
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006968:	e25d      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800696a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800696e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006970:	e259      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006972:	bf00      	nop
 8006974:	46020c00 	.word	0x46020c00
 8006978:	00f42400 	.word	0x00f42400
 800697c:	08008ea0 	.word	0x08008ea0
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006980:	4b9d      	ldr	r3, [pc, #628]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698c:	d106      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006994:	d102      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8006996:	4b99      	ldr	r3, [pc, #612]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006998:	637b      	str	r3, [r7, #52]	; 0x34
 800699a:	e244      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800699c:	4b96      	ldr	r3, [pc, #600]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800699e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d107      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069b0:	d103      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 80069b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
 80069b8:	e235      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	637b      	str	r3, [r7, #52]	; 0x34
 80069be:	e232      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80069c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80069c8:	430b      	orrs	r3, r1
 80069ca:	d147      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80069cc:	4b8a      	ldr	r3, [pc, #552]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80069ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80069d6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d103      	bne.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069de:	f7fd fe51 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80069e2:	6378      	str	r0, [r7, #52]	; 0x34
 80069e4:	e21f      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80069e6:	4b84      	ldr	r3, [pc, #528]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80069e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069f4:	d112      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069fc:	d10e      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069fe:	4b7e      	ldr	r3, [pc, #504]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a0c:	d102      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8006a0e:	23fa      	movs	r3, #250	; 0xfa
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a12:	e208      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a1a:	e204      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006a1c:	4b76      	ldr	r3, [pc, #472]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a28:	d106      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a30:	d102      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8006a32:	4b72      	ldr	r3, [pc, #456]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
 8006a36:	e1f6      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006a38:	4b6f      	ldr	r3, [pc, #444]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d107      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a4c:	d103      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8006a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
 8006a54:	e1e7      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5a:	e1e4      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a60:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006a64:	430b      	orrs	r3, r1
 8006a66:	d12d      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006a68:	4b63      	ldr	r3, [pc, #396]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a6e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006a74:	4b60      	ldr	r3, [pc, #384]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a80:	d105      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d102      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8006a88:	4b5c      	ldr	r3, [pc, #368]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8c:	e1cb      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a94:	d107      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fc74 	bl	8005388 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa4:	e1bf      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006aac:	d107      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aae:	f107 0318 	add.w	r3, r7, #24
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fdce 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	637b      	str	r3, [r7, #52]	; 0x34
 8006abc:	e1b3      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac2:	e1b0      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006acc:	430b      	orrs	r3, r1
 8006ace:	d14d      	bne.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006ad0:	4b49      	ldr	r3, [pc, #292]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ad6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ae2:	d028      	beq.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006aea:	d83c      	bhi.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006af2:	d013      	beq.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006afa:	d834      	bhi.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d004      	beq.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b08:	d004      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006b0a:	e02c      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006b0c:	f7fd fdce 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8006b10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006b12:	e188      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006b14:	f7fd fc94 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8006b18:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006b1a:	e184      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b1c:	4b36      	ldr	r3, [pc, #216]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b28:	d102      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8006b2a:	4b34      	ldr	r3, [pc, #208]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b2e:	e17a      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b34:	e177      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b36:	4b30      	ldr	r3, [pc, #192]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8006b42:	4b2d      	ldr	r3, [pc, #180]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	0e1b      	lsrs	r3, r3, #24
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	e006      	b.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006b4e:	4b2a      	ldr	r3, [pc, #168]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b54:	041b      	lsls	r3, r3, #16
 8006b56:	0e1b      	lsrs	r3, r3, #24
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	4a28      	ldr	r2, [pc, #160]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8006b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b64:	e15f      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b6a:	e15c      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b70:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006b74:	430b      	orrs	r3, r1
 8006b76:	d154      	bne.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006b78:	4b1f      	ldr	r3, [pc, #124]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b82:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b8a:	d028      	beq.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b92:	d843      	bhi.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b9a:	d013      	beq.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ba2:	d83b      	bhi.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb0:	d004      	beq.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8006bb2:	e033      	b.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006bb4:	f7fd fd66 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8006bb8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006bba:	e134      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006bbc:	f7fd fc40 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8006bc0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006bc2:	e130      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd0:	d102      	bne.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8006bd2:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bd6:	e126      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bdc:	e123      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bde:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00c      	beq.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8006bea:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	0e1b      	lsrs	r3, r3, #24
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	e00d      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8006bf6:	bf00      	nop
 8006bf8:	46020c00 	.word	0x46020c00
 8006bfc:	00f42400 	.word	0x00f42400
 8006c00:	08008ea0 	.word	0x08008ea0
 8006c04:	4b8a      	ldr	r3, [pc, #552]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c0a:	041b      	lsls	r3, r3, #16
 8006c0c:	0e1b      	lsrs	r3, r3, #24
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	4a88      	ldr	r2, [pc, #544]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c1a:	e104      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c20:	e101      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c26:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	d16e      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006c2e:	4b80      	ldr	r3, [pc, #512]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c34:	f003 0318 	and.w	r3, r3, #24
 8006c38:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	2b18      	cmp	r3, #24
 8006c3e:	d862      	bhi.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006cad 	.word	0x08006cad
 8006c4c:	08006d07 	.word	0x08006d07
 8006c50:	08006d07 	.word	0x08006d07
 8006c54:	08006d07 	.word	0x08006d07
 8006c58:	08006d07 	.word	0x08006d07
 8006c5c:	08006d07 	.word	0x08006d07
 8006c60:	08006d07 	.word	0x08006d07
 8006c64:	08006d07 	.word	0x08006d07
 8006c68:	08006cb5 	.word	0x08006cb5
 8006c6c:	08006d07 	.word	0x08006d07
 8006c70:	08006d07 	.word	0x08006d07
 8006c74:	08006d07 	.word	0x08006d07
 8006c78:	08006d07 	.word	0x08006d07
 8006c7c:	08006d07 	.word	0x08006d07
 8006c80:	08006d07 	.word	0x08006d07
 8006c84:	08006d07 	.word	0x08006d07
 8006c88:	08006cbd 	.word	0x08006cbd
 8006c8c:	08006d07 	.word	0x08006d07
 8006c90:	08006d07 	.word	0x08006d07
 8006c94:	08006d07 	.word	0x08006d07
 8006c98:	08006d07 	.word	0x08006d07
 8006c9c:	08006d07 	.word	0x08006d07
 8006ca0:	08006d07 	.word	0x08006d07
 8006ca4:	08006d07 	.word	0x08006d07
 8006ca8:	08006cd7 	.word	0x08006cd7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006cac:	f7fd fd12 	bl	80046d4 <HAL_RCC_GetPCLK3Freq>
 8006cb0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006cb2:	e0b8      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006cb4:	f7fd fbc4 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8006cb8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006cba:	e0b4      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cbc:	4b5c      	ldr	r3, [pc, #368]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc8:	d102      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8006cca:	4b5b      	ldr	r3, [pc, #364]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cce:	e0aa      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cd4:	e0a7      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cd6:	4b56      	ldr	r3, [pc, #344]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8006ce2:	4b53      	ldr	r3, [pc, #332]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	0e1b      	lsrs	r3, r3, #24
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	e006      	b.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8006cee:	4b50      	ldr	r3, [pc, #320]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cf4:	041b      	lsls	r3, r3, #16
 8006cf6:	0e1b      	lsrs	r3, r3, #24
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	4a4d      	ldr	r2, [pc, #308]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d04:	e08f      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d0a:	e08c      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d10:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8006d14:	430b      	orrs	r3, r1
 8006d16:	d14c      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006d18:	4b45      	ldr	r3, [pc, #276]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006d1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d1e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006d22:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d2a:	d013      	beq.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d32:	d83b      	bhi.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d3a:	d013      	beq.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d42:	d833      	bhi.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d014      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d50:	d014      	beq.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006d52:	e02b      	b.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d54:	f107 0318 	add.w	r3, r7, #24
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fe fc7b 	bl	8005654 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d62:	e060      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe fb0d 	bl	8005388 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d72:	e058      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006d74:	f7fd fb64 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8006d78:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006d7a:	e054      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d7c:	4b2c      	ldr	r3, [pc, #176]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8006d88:	4b29      	ldr	r3, [pc, #164]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	0e1b      	lsrs	r3, r3, #24
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	e006      	b.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8006d94:	4b26      	ldr	r3, [pc, #152]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	0e1b      	lsrs	r3, r3, #24
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	4a24      	ldr	r2, [pc, #144]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8006da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006daa:	e03c      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006db0:	e039      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	d131      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006dbe:	4b1c      	ldr	r3, [pc, #112]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dc8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006dca:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d106      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d103      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8006dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de2:	637b      	str	r3, [r7, #52]	; 0x34
 8006de4:	e01f      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006de6:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df4:	d112      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dfc:	d10e      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8006e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e0c:	d102      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8006e0e:	23fa      	movs	r3, #250	; 0xfa
 8006e10:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e12:	e008      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e1a:	e004      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e20:	e001      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8006e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3738      	adds	r7, #56	; 0x38
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	46020c00 	.word	0x46020c00
 8006e34:	08008ea0 	.word	0x08008ea0
 8006e38:	00f42400 	.word	0x00f42400

08006e3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006e44:	4b47      	ldr	r3, [pc, #284]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a46      	ldr	r2, [pc, #280]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e4e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e50:	f7fa ff22 	bl	8001c98 <HAL_GetTick>
 8006e54:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e56:	e008      	b.n	8006e6a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e58:	f7fa ff1e 	bl	8001c98 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d901      	bls.n	8006e6a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e077      	b.n	8006f5a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e6a:	4b3e      	ldr	r3, [pc, #248]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f0      	bne.n	8006e58 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006e76:	4b3b      	ldr	r3, [pc, #236]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e7e:	f023 0303 	bic.w	r3, r3, #3
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6811      	ldr	r1, [r2, #0]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6852      	ldr	r2, [r2, #4]
 8006e8a:	3a01      	subs	r2, #1
 8006e8c:	0212      	lsls	r2, r2, #8
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	4934      	ldr	r1, [pc, #208]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006e96:	4b33      	ldr	r3, [pc, #204]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e9a:	4b33      	ldr	r3, [pc, #204]	; (8006f68 <RCCEx_PLL2_Config+0x12c>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6892      	ldr	r2, [r2, #8]
 8006ea2:	3a01      	subs	r2, #1
 8006ea4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68d2      	ldr	r2, [r2, #12]
 8006eac:	3a01      	subs	r2, #1
 8006eae:	0252      	lsls	r2, r2, #9
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	4311      	orrs	r1, r2
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	6912      	ldr	r2, [r2, #16]
 8006eb8:	3a01      	subs	r2, #1
 8006eba:	0412      	lsls	r2, r2, #16
 8006ebc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006ec0:	4311      	orrs	r1, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6952      	ldr	r2, [r2, #20]
 8006ec6:	3a01      	subs	r2, #1
 8006ec8:	0612      	lsls	r2, r2, #24
 8006eca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	4924      	ldr	r1, [pc, #144]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006ed6:	4b23      	ldr	r3, [pc, #140]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eda:	f023 020c 	bic.w	r2, r3, #12
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	4920      	ldr	r1, [pc, #128]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006ee8:	4b1e      	ldr	r3, [pc, #120]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	491c      	ldr	r1, [pc, #112]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006ef6:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006efc:	f023 0310 	bic.w	r3, r3, #16
 8006f00:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f02:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	69d2      	ldr	r2, [r2, #28]
 8006f12:	00d2      	lsls	r2, r2, #3
 8006f14:	4913      	ldr	r1, [pc, #76]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006f1a:	4b12      	ldr	r3, [pc, #72]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1e:	4a11      	ldr	r2, [pc, #68]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006f20:	f043 0310 	orr.w	r3, r3, #16
 8006f24:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006f26:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a0e      	ldr	r2, [pc, #56]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006f2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f30:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f32:	f7fa feb1 	bl	8001c98 <HAL_GetTick>
 8006f36:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f38:	e008      	b.n	8006f4c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f3a:	f7fa fead 	bl	8001c98 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e006      	b.n	8006f5a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <RCCEx_PLL2_Config+0x128>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0

}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	46020c00 	.word	0x46020c00
 8006f68:	80800000 	.word	0x80800000

08006f6c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006f74:	4b47      	ldr	r3, [pc, #284]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a46      	ldr	r2, [pc, #280]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8006f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f80:	f7fa fe8a 	bl	8001c98 <HAL_GetTick>
 8006f84:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f86:	e008      	b.n	8006f9a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f88:	f7fa fe86 	bl	8001c98 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e077      	b.n	800708a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f9a:	4b3e      	ldr	r3, [pc, #248]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f0      	bne.n	8006f88 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006fa6:	4b3b      	ldr	r3, [pc, #236]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006fae:	f023 0303 	bic.w	r3, r3, #3
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6811      	ldr	r1, [r2, #0]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6852      	ldr	r2, [r2, #4]
 8006fba:	3a01      	subs	r2, #1
 8006fbc:	0212      	lsls	r2, r2, #8
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	4934      	ldr	r1, [pc, #208]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	630b      	str	r3, [r1, #48]	; 0x30
 8006fc6:	4b33      	ldr	r3, [pc, #204]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8006fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fca:	4b33      	ldr	r3, [pc, #204]	; (8007098 <RCCEx_PLL3_Config+0x12c>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6892      	ldr	r2, [r2, #8]
 8006fd2:	3a01      	subs	r2, #1
 8006fd4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	68d2      	ldr	r2, [r2, #12]
 8006fdc:	3a01      	subs	r2, #1
 8006fde:	0252      	lsls	r2, r2, #9
 8006fe0:	b292      	uxth	r2, r2
 8006fe2:	4311      	orrs	r1, r2
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	6912      	ldr	r2, [r2, #16]
 8006fe8:	3a01      	subs	r2, #1
 8006fea:	0412      	lsls	r2, r2, #16
 8006fec:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006ff0:	4311      	orrs	r1, r2
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6952      	ldr	r2, [r2, #20]
 8006ff6:	3a01      	subs	r2, #1
 8006ff8:	0612      	lsls	r2, r2, #24
 8006ffa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006ffe:	430a      	orrs	r2, r1
 8007000:	4924      	ldr	r1, [pc, #144]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8007002:	4313      	orrs	r3, r2
 8007004:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007006:	4b23      	ldr	r3, [pc, #140]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	f023 020c 	bic.w	r2, r3, #12
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	4920      	ldr	r1, [pc, #128]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8007014:	4313      	orrs	r3, r2
 8007016:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007018:	4b1e      	ldr	r3, [pc, #120]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 800701a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	491c      	ldr	r1, [pc, #112]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8007022:	4313      	orrs	r3, r2
 8007024:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007026:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	4a1a      	ldr	r2, [pc, #104]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 800702c:	f023 0310 	bic.w	r3, r3, #16
 8007030:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007032:	4b18      	ldr	r3, [pc, #96]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8007034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800703a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	69d2      	ldr	r2, [r2, #28]
 8007042:	00d2      	lsls	r2, r2, #3
 8007044:	4913      	ldr	r1, [pc, #76]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8007046:	4313      	orrs	r3, r2
 8007048:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800704a:	4b12      	ldr	r3, [pc, #72]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	4a11      	ldr	r2, [pc, #68]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8007050:	f043 0310 	orr.w	r3, r3, #16
 8007054:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007056:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a0e      	ldr	r2, [pc, #56]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 800705c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007060:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007062:	f7fa fe19 	bl	8001c98 <HAL_GetTick>
 8007066:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007068:	e008      	b.n	800707c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800706a:	f7fa fe15 	bl	8001c98 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e006      	b.n	800708a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <RCCEx_PLL3_Config+0x128>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0f0      	beq.n	800706a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	46020c00 	.word	0x46020c00
 8007098:	80800000 	.word	0x80800000

0800709c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e042      	b.n	8007134 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7fa fcdf 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2224      	movs	r2, #36	; 0x24
 80070ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0201 	bic.w	r2, r2, #1
 80070dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f8d2 	bl	8007288 <UART_SetConfig>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e022      	b.n	8007134 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa68 	bl	80075cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800710a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800711a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 faef 	bl	8007710 <UART_CheckIdleState>
 8007132:	4603      	mov	r3, r0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08a      	sub	sp, #40	; 0x28
 8007140:	af02      	add	r7, sp, #8
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	4613      	mov	r3, r2
 800714a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007152:	2b20      	cmp	r3, #32
 8007154:	f040 8092 	bne.w	800727c <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_UART_Transmit+0x28>
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e08a      	b.n	800727e <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <HAL_UART_Transmit+0x3a>
 8007172:	2302      	movs	r3, #2
 8007174:	e083      	b.n	800727e <HAL_UART_Transmit+0x142>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007188:	2b80      	cmp	r3, #128	; 0x80
 800718a:	d107      	bne.n	800719c <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800719a:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2221      	movs	r2, #33	; 0x21
 80071a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071ac:	f7fa fd74 	bl	8001c98 <HAL_GetTick>
 80071b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	88fa      	ldrh	r2, [r7, #6]
 80071b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	88fa      	ldrh	r2, [r7, #6]
 80071be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ca:	d108      	bne.n	80071de <HAL_UART_Transmit+0xa2>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	e003      	b.n	80071e6 <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80071ee:	e02c      	b.n	800724a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2200      	movs	r2, #0
 80071f8:	2180      	movs	r1, #128	; 0x80
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 fad3 	bl	80077a6 <UART_WaitOnFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e039      	b.n	800727e <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10b      	bne.n	8007228 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800721e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	3302      	adds	r3, #2
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	e007      	b.n	8007238 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	781a      	ldrb	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3301      	adds	r3, #1
 8007236:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800723e:	b29b      	uxth	r3, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1cc      	bne.n	80071f0 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2200      	movs	r2, #0
 800725e:	2140      	movs	r1, #64	; 0x40
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 faa0 	bl	80077a6 <UART_WaitOnFlagUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e006      	b.n	800727e <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2220      	movs	r2, #32
 8007274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	e000      	b.n	800727e <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 800727c:	2302      	movs	r3, #2
  }
}
 800727e:	4618      	mov	r0, r3
 8007280:	3720      	adds	r7, #32
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800728c:	b094      	sub	sp, #80	; 0x50
 800728e:	af00      	add	r7, sp, #0
 8007290:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4b7e      	ldr	r3, [pc, #504]	; (8007498 <UART_SetConfig+0x210>)
 800729e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4977      	ldr	r1, [pc, #476]	; (800749c <UART_SetConfig+0x214>)
 80072c0:	4019      	ands	r1, r3
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c8:	430b      	orrs	r3, r1
 80072ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	68d9      	ldr	r1, [r3, #12]
 80072da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	ea40 0301 	orr.w	r3, r0, r1
 80072e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4b6a      	ldr	r3, [pc, #424]	; (8007498 <UART_SetConfig+0x210>)
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d009      	beq.n	8007308 <UART_SetConfig+0x80>
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	4b69      	ldr	r3, [pc, #420]	; (80074a0 <UART_SetConfig+0x218>)
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d004      	beq.n	8007308 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	6a1a      	ldr	r2, [r3, #32]
 8007302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007304:	4313      	orrs	r3, r2
 8007306:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007312:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731c:	430b      	orrs	r3, r1
 800731e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	f023 000f 	bic.w	r0, r3, #15
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	ea40 0301 	orr.w	r3, r0, r1
 8007336:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	4b59      	ldr	r3, [pc, #356]	; (80074a4 <UART_SetConfig+0x21c>)
 800733e:	429a      	cmp	r2, r3
 8007340:	d102      	bne.n	8007348 <UART_SetConfig+0xc0>
 8007342:	2301      	movs	r3, #1
 8007344:	64bb      	str	r3, [r7, #72]	; 0x48
 8007346:	e029      	b.n	800739c <UART_SetConfig+0x114>
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	4b56      	ldr	r3, [pc, #344]	; (80074a8 <UART_SetConfig+0x220>)
 800734e:	429a      	cmp	r2, r3
 8007350:	d102      	bne.n	8007358 <UART_SetConfig+0xd0>
 8007352:	2302      	movs	r3, #2
 8007354:	64bb      	str	r3, [r7, #72]	; 0x48
 8007356:	e021      	b.n	800739c <UART_SetConfig+0x114>
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	4b53      	ldr	r3, [pc, #332]	; (80074ac <UART_SetConfig+0x224>)
 800735e:	429a      	cmp	r2, r3
 8007360:	d102      	bne.n	8007368 <UART_SetConfig+0xe0>
 8007362:	2304      	movs	r3, #4
 8007364:	64bb      	str	r3, [r7, #72]	; 0x48
 8007366:	e019      	b.n	800739c <UART_SetConfig+0x114>
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	4b50      	ldr	r3, [pc, #320]	; (80074b0 <UART_SetConfig+0x228>)
 800736e:	429a      	cmp	r2, r3
 8007370:	d102      	bne.n	8007378 <UART_SetConfig+0xf0>
 8007372:	2308      	movs	r3, #8
 8007374:	64bb      	str	r3, [r7, #72]	; 0x48
 8007376:	e011      	b.n	800739c <UART_SetConfig+0x114>
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	4b4d      	ldr	r3, [pc, #308]	; (80074b4 <UART_SetConfig+0x22c>)
 800737e:	429a      	cmp	r2, r3
 8007380:	d102      	bne.n	8007388 <UART_SetConfig+0x100>
 8007382:	2310      	movs	r3, #16
 8007384:	64bb      	str	r3, [r7, #72]	; 0x48
 8007386:	e009      	b.n	800739c <UART_SetConfig+0x114>
 8007388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	4b42      	ldr	r3, [pc, #264]	; (8007498 <UART_SetConfig+0x210>)
 800738e:	429a      	cmp	r2, r3
 8007390:	d102      	bne.n	8007398 <UART_SetConfig+0x110>
 8007392:	2320      	movs	r3, #32
 8007394:	64bb      	str	r3, [r7, #72]	; 0x48
 8007396:	e001      	b.n	800739c <UART_SetConfig+0x114>
 8007398:	2300      	movs	r3, #0
 800739a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b3d      	ldr	r3, [pc, #244]	; (8007498 <UART_SetConfig+0x210>)
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d005      	beq.n	80073b2 <UART_SetConfig+0x12a>
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	4b3d      	ldr	r3, [pc, #244]	; (80074a0 <UART_SetConfig+0x218>)
 80073ac:	429a      	cmp	r2, r3
 80073ae:	f040 8085 	bne.w	80074bc <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80073b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073b4:	2200      	movs	r2, #0
 80073b6:	623b      	str	r3, [r7, #32]
 80073b8:	627a      	str	r2, [r7, #36]	; 0x24
 80073ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80073be:	f7fe fc15 	bl	8005bec <HAL_RCCEx_GetPeriphCLKFreq>
 80073c2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80073c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 80e8 	beq.w	800759c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	4a39      	ldr	r2, [pc, #228]	; (80074b8 <UART_SetConfig+0x230>)
 80073d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073d6:	461a      	mov	r2, r3
 80073d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073da:	fbb3 f3f2 	udiv	r3, r3, r2
 80073de:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	4413      	add	r3, r2
 80073ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d305      	bcc.n	80073fc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d903      	bls.n	8007404 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007402:	e048      	b.n	8007496 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007406:	2200      	movs	r2, #0
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	61fa      	str	r2, [r7, #28]
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	4a29      	ldr	r2, [pc, #164]	; (80074b8 <UART_SetConfig+0x230>)
 8007412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007416:	b29b      	uxth	r3, r3
 8007418:	2200      	movs	r2, #0
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	617a      	str	r2, [r7, #20]
 800741e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007422:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007426:	f7f9 fb43 	bl	8000ab0 <__aeabi_uldivmod>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4610      	mov	r0, r2
 8007430:	4619      	mov	r1, r3
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	020b      	lsls	r3, r1, #8
 800743c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007440:	0202      	lsls	r2, r0, #8
 8007442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007444:	6849      	ldr	r1, [r1, #4]
 8007446:	0849      	lsrs	r1, r1, #1
 8007448:	2000      	movs	r0, #0
 800744a:	460c      	mov	r4, r1
 800744c:	4605      	mov	r5, r0
 800744e:	eb12 0804 	adds.w	r8, r2, r4
 8007452:	eb43 0905 	adc.w	r9, r3, r5
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	60bb      	str	r3, [r7, #8]
 800745e:	60fa      	str	r2, [r7, #12]
 8007460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007464:	4640      	mov	r0, r8
 8007466:	4649      	mov	r1, r9
 8007468:	f7f9 fb22 	bl	8000ab0 <__aeabi_uldivmod>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4613      	mov	r3, r2
 8007472:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800747a:	d308      	bcc.n	800748e <UART_SetConfig+0x206>
 800747c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007482:	d204      	bcs.n	800748e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800748a:	60da      	str	r2, [r3, #12]
 800748c:	e003      	b.n	8007496 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007494:	e082      	b.n	800759c <UART_SetConfig+0x314>
 8007496:	e081      	b.n	800759c <UART_SetConfig+0x314>
 8007498:	46002400 	.word	0x46002400
 800749c:	cfff69f3 	.word	0xcfff69f3
 80074a0:	56002400 	.word	0x56002400
 80074a4:	40013800 	.word	0x40013800
 80074a8:	40004400 	.word	0x40004400
 80074ac:	40004800 	.word	0x40004800
 80074b0:	40004c00 	.word	0x40004c00
 80074b4:	40005000 	.word	0x40005000
 80074b8:	08008f60 	.word	0x08008f60
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074c4:	d13c      	bne.n	8007540 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80074c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c8:	2200      	movs	r2, #0
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	607a      	str	r2, [r7, #4]
 80074ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074d2:	f7fe fb8b 	bl	8005bec <HAL_RCCEx_GetPeriphCLKFreq>
 80074d6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d05e      	beq.n	800759c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	4a39      	ldr	r2, [pc, #228]	; (80075c8 <UART_SetConfig+0x340>)
 80074e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f0:	005a      	lsls	r2, r3, #1
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	441a      	add	r2, r3
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007506:	2b0f      	cmp	r3, #15
 8007508:	d916      	bls.n	8007538 <UART_SetConfig+0x2b0>
 800750a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007510:	d212      	bcs.n	8007538 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007514:	b29b      	uxth	r3, r3
 8007516:	f023 030f 	bic.w	r3, r3, #15
 800751a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800751c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	b29b      	uxth	r3, r3
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	b29a      	uxth	r2, r3
 8007528:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800752a:	4313      	orrs	r3, r2
 800752c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007534:	60da      	str	r2, [r3, #12]
 8007536:	e031      	b.n	800759c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800753e:	e02d      	b.n	800759c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007542:	2200      	movs	r2, #0
 8007544:	469a      	mov	sl, r3
 8007546:	4693      	mov	fp, r2
 8007548:	4650      	mov	r0, sl
 800754a:	4659      	mov	r1, fp
 800754c:	f7fe fb4e 	bl	8005bec <HAL_RCCEx_GetPeriphCLKFreq>
 8007550:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d021      	beq.n	800759c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	4a1a      	ldr	r2, [pc, #104]	; (80075c8 <UART_SetConfig+0x340>)
 800755e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007562:	461a      	mov	r2, r3
 8007564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007566:	fbb3 f2f2 	udiv	r2, r3, r2
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	085b      	lsrs	r3, r3, #1
 8007570:	441a      	add	r2, r3
 8007572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	fbb2 f3f3 	udiv	r3, r2, r3
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800757c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757e:	2b0f      	cmp	r3, #15
 8007580:	d909      	bls.n	8007596 <UART_SetConfig+0x30e>
 8007582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007588:	d205      	bcs.n	8007596 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800758a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758c:	b29a      	uxth	r2, r3
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60da      	str	r2, [r3, #12]
 8007594:	e002      	b.n	800759c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	2201      	movs	r2, #1
 80075a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a6:	2201      	movs	r2, #1
 80075a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	2200      	movs	r2, #0
 80075b0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80075b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b4:	2200      	movs	r2, #0
 80075b6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80075b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3750      	adds	r7, #80	; 0x50
 80075c0:	46bd      	mov	sp, r7
 80075c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075c6:	bf00      	nop
 80075c8:	08008f60 	.word	0x08008f60

080075cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00a      	beq.n	800763a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01a      	beq.n	80076e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ca:	d10a      	bne.n	80076e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	605a      	str	r2, [r3, #4]
  }
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af02      	add	r7, sp, #8
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007720:	f7fa faba 	bl	8001c98 <HAL_GetTick>
 8007724:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b08      	cmp	r3, #8
 8007732:	d10e      	bne.n	8007752 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f82f 	bl	80077a6 <UART_WaitOnFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e025      	b.n	800779e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b04      	cmp	r3, #4
 800775e:	d10e      	bne.n	800777e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f819 	bl	80077a6 <UART_WaitOnFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e00f      	b.n	800779e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b09c      	sub	sp, #112	; 0x70
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	603b      	str	r3, [r7, #0]
 80077b2:	4613      	mov	r3, r2
 80077b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b6:	e0a9      	b.n	800790c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077be:	f000 80a5 	beq.w	800790c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c2:	f7fa fa69 	bl	8001c98 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d302      	bcc.n	80077d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80077d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d140      	bne.n	800785a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077ec:	667b      	str	r3, [r7, #100]	; 0x64
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e6      	bne.n	80077d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3308      	adds	r3, #8
 8007810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	663b      	str	r3, [r7, #96]	; 0x60
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3308      	adds	r3, #8
 8007828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800782a:	64ba      	str	r2, [r7, #72]	; 0x48
 800782c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e5      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2220      	movs	r2, #32
 800784a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e069      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d051      	beq.n	800790c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007876:	d149      	bne.n	800790c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007880:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a0:	637b      	str	r3, [r7, #52]	; 0x34
 80078a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e6      	bne.n	8007882 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3308      	adds	r3, #8
 80078ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	613b      	str	r3, [r7, #16]
   return(result);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f023 0301 	bic.w	r3, r3, #1
 80078ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3308      	adds	r3, #8
 80078d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078d4:	623a      	str	r2, [r7, #32]
 80078d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	69f9      	ldr	r1, [r7, #28]
 80078da:	6a3a      	ldr	r2, [r7, #32]
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e5      	bne.n	80078b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e010      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	69da      	ldr	r2, [r3, #28]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4013      	ands	r3, r2
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	429a      	cmp	r2, r3
 800791a:	bf0c      	ite	eq
 800791c:	2301      	moveq	r3, #1
 800791e:	2300      	movne	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	429a      	cmp	r2, r3
 8007928:	f43f af46 	beq.w	80077b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3770      	adds	r7, #112	; 0x70
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_UARTEx_DisableFifoMode+0x16>
 8007948:	2302      	movs	r3, #2
 800794a:	e027      	b.n	800799c <HAL_UARTEx_DisableFifoMode+0x66>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2224      	movs	r2, #36	; 0x24
 8007958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0201 	bic.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800797a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079bc:	2302      	movs	r3, #2
 80079be:	e02d      	b.n	8007a1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2224      	movs	r2, #36	; 0x24
 80079cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0201 	bic.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f84f 	bl	8007aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d101      	bne.n	8007a3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e02d      	b.n	8007a98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2224      	movs	r2, #36	; 0x24
 8007a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0201 	bic.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f811 	bl	8007aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d108      	bne.n	8007ac2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ac0:	e031      	b.n	8007b26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ac2:	2308      	movs	r3, #8
 8007ac4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	0e5b      	lsrs	r3, r3, #25
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	0f5b      	lsrs	r3, r3, #29
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	7b3a      	ldrb	r2, [r7, #12]
 8007aee:	4911      	ldr	r1, [pc, #68]	; (8007b34 <UARTEx_SetNbDataToProcess+0x94>)
 8007af0:	5c8a      	ldrb	r2, [r1, r2]
 8007af2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007af6:	7b3a      	ldrb	r2, [r7, #12]
 8007af8:	490f      	ldr	r1, [pc, #60]	; (8007b38 <UARTEx_SetNbDataToProcess+0x98>)
 8007afa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	7b7a      	ldrb	r2, [r7, #13]
 8007b0c:	4909      	ldr	r1, [pc, #36]	; (8007b34 <UARTEx_SetNbDataToProcess+0x94>)
 8007b0e:	5c8a      	ldrb	r2, [r1, r2]
 8007b10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b14:	7b7a      	ldrb	r2, [r7, #13]
 8007b16:	4908      	ldr	r1, [pc, #32]	; (8007b38 <UARTEx_SetNbDataToProcess+0x98>)
 8007b18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b26:	bf00      	nop
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	08008f78 	.word	0x08008f78
 8007b38:	08008f80 	.word	0x08008f80

08007b3c <__errno>:
 8007b3c:	4b01      	ldr	r3, [pc, #4]	; (8007b44 <__errno+0x8>)
 8007b3e:	6818      	ldr	r0, [r3, #0]
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000020 	.word	0x20000020

08007b48 <__libc_init_array>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	4d0d      	ldr	r5, [pc, #52]	; (8007b80 <__libc_init_array+0x38>)
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	4c0d      	ldr	r4, [pc, #52]	; (8007b84 <__libc_init_array+0x3c>)
 8007b50:	1b64      	subs	r4, r4, r5
 8007b52:	10a4      	asrs	r4, r4, #2
 8007b54:	42a6      	cmp	r6, r4
 8007b56:	d109      	bne.n	8007b6c <__libc_init_array+0x24>
 8007b58:	4d0b      	ldr	r5, [pc, #44]	; (8007b88 <__libc_init_array+0x40>)
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	4c0b      	ldr	r4, [pc, #44]	; (8007b8c <__libc_init_array+0x44>)
 8007b5e:	f001 f823 	bl	8008ba8 <_init>
 8007b62:	1b64      	subs	r4, r4, r5
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	42a6      	cmp	r6, r4
 8007b68:	d105      	bne.n	8007b76 <__libc_init_array+0x2e>
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b70:	3601      	adds	r6, #1
 8007b72:	4798      	blx	r3
 8007b74:	e7ee      	b.n	8007b54 <__libc_init_array+0xc>
 8007b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	4798      	blx	r3
 8007b7e:	e7f2      	b.n	8007b66 <__libc_init_array+0x1e>
 8007b80:	08009028 	.word	0x08009028
 8007b84:	08009028 	.word	0x08009028
 8007b88:	08009028 	.word	0x08009028
 8007b8c:	0800902c 	.word	0x0800902c

08007b90 <memset>:
 8007b90:	4402      	add	r2, r0
 8007b92:	4603      	mov	r3, r0
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d100      	bne.n	8007b9a <memset+0xa>
 8007b98:	4770      	bx	lr
 8007b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b9e:	e7f9      	b.n	8007b94 <memset+0x4>

08007ba0 <__sfputc_r>:
 8007ba0:	6893      	ldr	r3, [r2, #8]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	6093      	str	r3, [r2, #8]
 8007ba8:	b410      	push	{r4}
 8007baa:	da08      	bge.n	8007bbe <__sfputc_r+0x1e>
 8007bac:	6994      	ldr	r4, [r2, #24]
 8007bae:	42a3      	cmp	r3, r4
 8007bb0:	db01      	blt.n	8007bb6 <__sfputc_r+0x16>
 8007bb2:	290a      	cmp	r1, #10
 8007bb4:	d103      	bne.n	8007bbe <__sfputc_r+0x1e>
 8007bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bba:	f000 bb19 	b.w	80081f0 <__swbuf_r>
 8007bbe:	6813      	ldr	r3, [r2, #0]
 8007bc0:	1c58      	adds	r0, r3, #1
 8007bc2:	6010      	str	r0, [r2, #0]
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	7019      	strb	r1, [r3, #0]
 8007bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <__sfputs_r>:
 8007bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	460f      	mov	r7, r1
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	18d5      	adds	r5, r2, r3
 8007bd8:	42ac      	cmp	r4, r5
 8007bda:	d101      	bne.n	8007be0 <__sfputs_r+0x12>
 8007bdc:	2000      	movs	r0, #0
 8007bde:	e007      	b.n	8007bf0 <__sfputs_r+0x22>
 8007be0:	463a      	mov	r2, r7
 8007be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be6:	4630      	mov	r0, r6
 8007be8:	f7ff ffda 	bl	8007ba0 <__sfputc_r>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d1f3      	bne.n	8007bd8 <__sfputs_r+0xa>
 8007bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bf4 <_vfiprintf_r>:
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	460d      	mov	r5, r1
 8007bfa:	b09d      	sub	sp, #116	; 0x74
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	4698      	mov	r8, r3
 8007c00:	4606      	mov	r6, r0
 8007c02:	b118      	cbz	r0, 8007c0c <_vfiprintf_r+0x18>
 8007c04:	6983      	ldr	r3, [r0, #24]
 8007c06:	b90b      	cbnz	r3, 8007c0c <_vfiprintf_r+0x18>
 8007c08:	f000 fcca 	bl	80085a0 <__sinit>
 8007c0c:	4b89      	ldr	r3, [pc, #548]	; (8007e34 <_vfiprintf_r+0x240>)
 8007c0e:	429d      	cmp	r5, r3
 8007c10:	d11b      	bne.n	8007c4a <_vfiprintf_r+0x56>
 8007c12:	6875      	ldr	r5, [r6, #4]
 8007c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c16:	07d9      	lsls	r1, r3, #31
 8007c18:	d405      	bmi.n	8007c26 <_vfiprintf_r+0x32>
 8007c1a:	89ab      	ldrh	r3, [r5, #12]
 8007c1c:	059a      	lsls	r2, r3, #22
 8007c1e:	d402      	bmi.n	8007c26 <_vfiprintf_r+0x32>
 8007c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c22:	f000 fd5b 	bl	80086dc <__retarget_lock_acquire_recursive>
 8007c26:	89ab      	ldrh	r3, [r5, #12]
 8007c28:	071b      	lsls	r3, r3, #28
 8007c2a:	d501      	bpl.n	8007c30 <_vfiprintf_r+0x3c>
 8007c2c:	692b      	ldr	r3, [r5, #16]
 8007c2e:	b9eb      	cbnz	r3, 8007c6c <_vfiprintf_r+0x78>
 8007c30:	4629      	mov	r1, r5
 8007c32:	4630      	mov	r0, r6
 8007c34:	f000 fb2e 	bl	8008294 <__swsetup_r>
 8007c38:	b1c0      	cbz	r0, 8007c6c <_vfiprintf_r+0x78>
 8007c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c3c:	07dc      	lsls	r4, r3, #31
 8007c3e:	d50e      	bpl.n	8007c5e <_vfiprintf_r+0x6a>
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
 8007c44:	b01d      	add	sp, #116	; 0x74
 8007c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4a:	4b7b      	ldr	r3, [pc, #492]	; (8007e38 <_vfiprintf_r+0x244>)
 8007c4c:	429d      	cmp	r5, r3
 8007c4e:	d101      	bne.n	8007c54 <_vfiprintf_r+0x60>
 8007c50:	68b5      	ldr	r5, [r6, #8]
 8007c52:	e7df      	b.n	8007c14 <_vfiprintf_r+0x20>
 8007c54:	4b79      	ldr	r3, [pc, #484]	; (8007e3c <_vfiprintf_r+0x248>)
 8007c56:	429d      	cmp	r5, r3
 8007c58:	bf08      	it	eq
 8007c5a:	68f5      	ldreq	r5, [r6, #12]
 8007c5c:	e7da      	b.n	8007c14 <_vfiprintf_r+0x20>
 8007c5e:	89ab      	ldrh	r3, [r5, #12]
 8007c60:	0598      	lsls	r0, r3, #22
 8007c62:	d4ed      	bmi.n	8007c40 <_vfiprintf_r+0x4c>
 8007c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c66:	f000 fd3a 	bl	80086de <__retarget_lock_release_recursive>
 8007c6a:	e7e9      	b.n	8007c40 <_vfiprintf_r+0x4c>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c72:	f04f 0901 	mov.w	r9, #1
 8007c76:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8007e40 <_vfiprintf_r+0x24c>
 8007c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7c:	2320      	movs	r3, #32
 8007c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c82:	2330      	movs	r3, #48	; 0x30
 8007c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c88:	4623      	mov	r3, r4
 8007c8a:	469a      	mov	sl, r3
 8007c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c90:	b10a      	cbz	r2, 8007c96 <_vfiprintf_r+0xa2>
 8007c92:	2a25      	cmp	r2, #37	; 0x25
 8007c94:	d1f9      	bne.n	8007c8a <_vfiprintf_r+0x96>
 8007c96:	ebba 0b04 	subs.w	fp, sl, r4
 8007c9a:	d00b      	beq.n	8007cb4 <_vfiprintf_r+0xc0>
 8007c9c:	465b      	mov	r3, fp
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7ff ff93 	bl	8007bce <__sfputs_r>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	f000 80aa 	beq.w	8007e02 <_vfiprintf_r+0x20e>
 8007cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb0:	445a      	add	r2, fp
 8007cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 80a2 	beq.w	8007e02 <_vfiprintf_r+0x20e>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc4:	f10a 0a01 	add.w	sl, sl, #1
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	9307      	str	r3, [sp, #28]
 8007ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8007cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd6:	4654      	mov	r4, sl
 8007cd8:	2205      	movs	r2, #5
 8007cda:	4859      	ldr	r0, [pc, #356]	; (8007e40 <_vfiprintf_r+0x24c>)
 8007cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce0:	f000 fd64 	bl	80087ac <memchr>
 8007ce4:	9a04      	ldr	r2, [sp, #16]
 8007ce6:	b9d8      	cbnz	r0, 8007d20 <_vfiprintf_r+0x12c>
 8007ce8:	06d1      	lsls	r1, r2, #27
 8007cea:	bf44      	itt	mi
 8007cec:	2320      	movmi	r3, #32
 8007cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf2:	0713      	lsls	r3, r2, #28
 8007cf4:	bf44      	itt	mi
 8007cf6:	232b      	movmi	r3, #43	; 0x2b
 8007cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007d00:	2b2a      	cmp	r3, #42	; 0x2a
 8007d02:	d015      	beq.n	8007d30 <_vfiprintf_r+0x13c>
 8007d04:	9a07      	ldr	r2, [sp, #28]
 8007d06:	4654      	mov	r4, sl
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f04f 0c0a 	mov.w	ip, #10
 8007d0e:	4621      	mov	r1, r4
 8007d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d14:	3b30      	subs	r3, #48	; 0x30
 8007d16:	2b09      	cmp	r3, #9
 8007d18:	d94e      	bls.n	8007db8 <_vfiprintf_r+0x1c4>
 8007d1a:	b1b0      	cbz	r0, 8007d4a <_vfiprintf_r+0x156>
 8007d1c:	9207      	str	r2, [sp, #28]
 8007d1e:	e014      	b.n	8007d4a <_vfiprintf_r+0x156>
 8007d20:	eba0 0308 	sub.w	r3, r0, r8
 8007d24:	46a2      	mov	sl, r4
 8007d26:	fa09 f303 	lsl.w	r3, r9, r3
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	e7d2      	b.n	8007cd6 <_vfiprintf_r+0xe2>
 8007d30:	9b03      	ldr	r3, [sp, #12]
 8007d32:	1d19      	adds	r1, r3, #4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	9103      	str	r1, [sp, #12]
 8007d3a:	bfbb      	ittet	lt
 8007d3c:	425b      	neglt	r3, r3
 8007d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d42:	9307      	strge	r3, [sp, #28]
 8007d44:	9307      	strlt	r3, [sp, #28]
 8007d46:	bfb8      	it	lt
 8007d48:	9204      	strlt	r2, [sp, #16]
 8007d4a:	7823      	ldrb	r3, [r4, #0]
 8007d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d4e:	d10c      	bne.n	8007d6a <_vfiprintf_r+0x176>
 8007d50:	7863      	ldrb	r3, [r4, #1]
 8007d52:	2b2a      	cmp	r3, #42	; 0x2a
 8007d54:	d135      	bne.n	8007dc2 <_vfiprintf_r+0x1ce>
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	3402      	adds	r4, #2
 8007d5a:	1d1a      	adds	r2, r3, #4
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	9203      	str	r2, [sp, #12]
 8007d62:	bfb8      	it	lt
 8007d64:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d68:	9305      	str	r3, [sp, #20]
 8007d6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e50 <_vfiprintf_r+0x25c>
 8007d6e:	2203      	movs	r2, #3
 8007d70:	7821      	ldrb	r1, [r4, #0]
 8007d72:	4650      	mov	r0, sl
 8007d74:	f000 fd1a 	bl	80087ac <memchr>
 8007d78:	b140      	cbz	r0, 8007d8c <_vfiprintf_r+0x198>
 8007d7a:	2340      	movs	r3, #64	; 0x40
 8007d7c:	eba0 000a 	sub.w	r0, r0, sl
 8007d80:	3401      	adds	r4, #1
 8007d82:	fa03 f000 	lsl.w	r0, r3, r0
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	4303      	orrs	r3, r0
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d90:	2206      	movs	r2, #6
 8007d92:	482c      	ldr	r0, [pc, #176]	; (8007e44 <_vfiprintf_r+0x250>)
 8007d94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d98:	f000 fd08 	bl	80087ac <memchr>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d03f      	beq.n	8007e20 <_vfiprintf_r+0x22c>
 8007da0:	4b29      	ldr	r3, [pc, #164]	; (8007e48 <_vfiprintf_r+0x254>)
 8007da2:	bb1b      	cbnz	r3, 8007dec <_vfiprintf_r+0x1f8>
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	3307      	adds	r3, #7
 8007da8:	f023 0307 	bic.w	r3, r3, #7
 8007dac:	3308      	adds	r3, #8
 8007dae:	9303      	str	r3, [sp, #12]
 8007db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db2:	443b      	add	r3, r7
 8007db4:	9309      	str	r3, [sp, #36]	; 0x24
 8007db6:	e767      	b.n	8007c88 <_vfiprintf_r+0x94>
 8007db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	e7a5      	b.n	8007d0e <_vfiprintf_r+0x11a>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	3401      	adds	r4, #1
 8007dc6:	f04f 0c0a 	mov.w	ip, #10
 8007dca:	4619      	mov	r1, r3
 8007dcc:	9305      	str	r3, [sp, #20]
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd4:	3a30      	subs	r2, #48	; 0x30
 8007dd6:	2a09      	cmp	r2, #9
 8007dd8:	d903      	bls.n	8007de2 <_vfiprintf_r+0x1ee>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0c5      	beq.n	8007d6a <_vfiprintf_r+0x176>
 8007dde:	9105      	str	r1, [sp, #20]
 8007de0:	e7c3      	b.n	8007d6a <_vfiprintf_r+0x176>
 8007de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007de6:	4604      	mov	r4, r0
 8007de8:	2301      	movs	r3, #1
 8007dea:	e7f0      	b.n	8007dce <_vfiprintf_r+0x1da>
 8007dec:	ab03      	add	r3, sp, #12
 8007dee:	462a      	mov	r2, r5
 8007df0:	a904      	add	r1, sp, #16
 8007df2:	4630      	mov	r0, r6
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	4b15      	ldr	r3, [pc, #84]	; (8007e4c <_vfiprintf_r+0x258>)
 8007df8:	e000      	b.n	8007dfc <_vfiprintf_r+0x208>
 8007dfa:	bf00      	nop
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	1c78      	adds	r0, r7, #1
 8007e00:	d1d6      	bne.n	8007db0 <_vfiprintf_r+0x1bc>
 8007e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e04:	07d9      	lsls	r1, r3, #31
 8007e06:	d405      	bmi.n	8007e14 <_vfiprintf_r+0x220>
 8007e08:	89ab      	ldrh	r3, [r5, #12]
 8007e0a:	059a      	lsls	r2, r3, #22
 8007e0c:	d402      	bmi.n	8007e14 <_vfiprintf_r+0x220>
 8007e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e10:	f000 fc65 	bl	80086de <__retarget_lock_release_recursive>
 8007e14:	89ab      	ldrh	r3, [r5, #12]
 8007e16:	065b      	lsls	r3, r3, #25
 8007e18:	f53f af12 	bmi.w	8007c40 <_vfiprintf_r+0x4c>
 8007e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e1e:	e711      	b.n	8007c44 <_vfiprintf_r+0x50>
 8007e20:	ab03      	add	r3, sp, #12
 8007e22:	462a      	mov	r2, r5
 8007e24:	a904      	add	r1, sp, #16
 8007e26:	4630      	mov	r0, r6
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	4b08      	ldr	r3, [pc, #32]	; (8007e4c <_vfiprintf_r+0x258>)
 8007e2c:	f000 f88c 	bl	8007f48 <_printf_i>
 8007e30:	e7e4      	b.n	8007dfc <_vfiprintf_r+0x208>
 8007e32:	bf00      	nop
 8007e34:	08008fe0 	.word	0x08008fe0
 8007e38:	08009000 	.word	0x08009000
 8007e3c:	08008fc0 	.word	0x08008fc0
 8007e40:	08008f8c 	.word	0x08008f8c
 8007e44:	08008f96 	.word	0x08008f96
 8007e48:	00000000 	.word	0x00000000
 8007e4c:	08007bcf 	.word	0x08007bcf
 8007e50:	08008f92 	.word	0x08008f92

08007e54 <vfiprintf>:
 8007e54:	4613      	mov	r3, r2
 8007e56:	460a      	mov	r2, r1
 8007e58:	4601      	mov	r1, r0
 8007e5a:	4802      	ldr	r0, [pc, #8]	; (8007e64 <vfiprintf+0x10>)
 8007e5c:	6800      	ldr	r0, [r0, #0]
 8007e5e:	f7ff bec9 	b.w	8007bf4 <_vfiprintf_r>
 8007e62:	bf00      	nop
 8007e64:	20000020 	.word	0x20000020

08007e68 <_printf_common>:
 8007e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e6c:	4616      	mov	r6, r2
 8007e6e:	4699      	mov	r9, r3
 8007e70:	688a      	ldr	r2, [r1, #8]
 8007e72:	4607      	mov	r7, r0
 8007e74:	690b      	ldr	r3, [r1, #16]
 8007e76:	460c      	mov	r4, r1
 8007e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	bfb8      	it	lt
 8007e80:	4613      	movlt	r3, r2
 8007e82:	6033      	str	r3, [r6, #0]
 8007e84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e88:	b10a      	cbz	r2, 8007e8e <_printf_common+0x26>
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	6033      	str	r3, [r6, #0]
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	0699      	lsls	r1, r3, #26
 8007e92:	bf42      	ittt	mi
 8007e94:	6833      	ldrmi	r3, [r6, #0]
 8007e96:	3302      	addmi	r3, #2
 8007e98:	6033      	strmi	r3, [r6, #0]
 8007e9a:	6825      	ldr	r5, [r4, #0]
 8007e9c:	f015 0506 	ands.w	r5, r5, #6
 8007ea0:	d106      	bne.n	8007eb0 <_printf_common+0x48>
 8007ea2:	f104 0a19 	add.w	sl, r4, #25
 8007ea6:	68e3      	ldr	r3, [r4, #12]
 8007ea8:	6832      	ldr	r2, [r6, #0]
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	42ab      	cmp	r3, r5
 8007eae:	dc29      	bgt.n	8007f04 <_printf_common+0x9c>
 8007eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eb4:	1e13      	subs	r3, r2, #0
 8007eb6:	6822      	ldr	r2, [r4, #0]
 8007eb8:	bf18      	it	ne
 8007eba:	2301      	movne	r3, #1
 8007ebc:	0692      	lsls	r2, r2, #26
 8007ebe:	d42e      	bmi.n	8007f1e <_printf_common+0xb6>
 8007ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	47c0      	blx	r8
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d021      	beq.n	8007f12 <_printf_common+0xaa>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	341a      	adds	r4, #26
 8007ed2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8007ed6:	f003 0306 	and.w	r3, r3, #6
 8007eda:	6832      	ldr	r2, [r6, #0]
 8007edc:	2600      	movs	r6, #0
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007ee4:	bf08      	it	eq
 8007ee6:	1aad      	subeq	r5, r5, r2
 8007ee8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007eec:	bf14      	ite	ne
 8007eee:	2500      	movne	r5, #0
 8007ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	bfc4      	itt	gt
 8007ef8:	1a9b      	subgt	r3, r3, r2
 8007efa:	18ed      	addgt	r5, r5, r3
 8007efc:	42b5      	cmp	r5, r6
 8007efe:	d11a      	bne.n	8007f36 <_printf_common+0xce>
 8007f00:	2000      	movs	r0, #0
 8007f02:	e008      	b.n	8007f16 <_printf_common+0xae>
 8007f04:	2301      	movs	r3, #1
 8007f06:	4652      	mov	r2, sl
 8007f08:	4649      	mov	r1, r9
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	47c0      	blx	r8
 8007f0e:	3001      	adds	r0, #1
 8007f10:	d103      	bne.n	8007f1a <_printf_common+0xb2>
 8007f12:	f04f 30ff 	mov.w	r0, #4294967295
 8007f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1a:	3501      	adds	r5, #1
 8007f1c:	e7c3      	b.n	8007ea6 <_printf_common+0x3e>
 8007f1e:	18e1      	adds	r1, r4, r3
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	2030      	movs	r0, #48	; 0x30
 8007f24:	3302      	adds	r3, #2
 8007f26:	4422      	add	r2, r4
 8007f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f34:	e7c4      	b.n	8007ec0 <_printf_common+0x58>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	47c0      	blx	r8
 8007f40:	3001      	adds	r0, #1
 8007f42:	d0e6      	beq.n	8007f12 <_printf_common+0xaa>
 8007f44:	3601      	adds	r6, #1
 8007f46:	e7d9      	b.n	8007efc <_printf_common+0x94>

08007f48 <_printf_i>:
 8007f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	7e0f      	ldrb	r7, [r1, #24]
 8007f4e:	4691      	mov	r9, r2
 8007f50:	4680      	mov	r8, r0
 8007f52:	460c      	mov	r4, r1
 8007f54:	2f78      	cmp	r7, #120	; 0x78
 8007f56:	469a      	mov	sl, r3
 8007f58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f5e:	d807      	bhi.n	8007f70 <_printf_i+0x28>
 8007f60:	2f62      	cmp	r7, #98	; 0x62
 8007f62:	d80a      	bhi.n	8007f7a <_printf_i+0x32>
 8007f64:	2f00      	cmp	r7, #0
 8007f66:	f000 80d8 	beq.w	800811a <_printf_i+0x1d2>
 8007f6a:	2f58      	cmp	r7, #88	; 0x58
 8007f6c:	f000 80a3 	beq.w	80080b6 <_printf_i+0x16e>
 8007f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f78:	e03a      	b.n	8007ff0 <_printf_i+0xa8>
 8007f7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f7e:	2b15      	cmp	r3, #21
 8007f80:	d8f6      	bhi.n	8007f70 <_printf_i+0x28>
 8007f82:	a101      	add	r1, pc, #4	; (adr r1, 8007f88 <_printf_i+0x40>)
 8007f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f88:	08007fe1 	.word	0x08007fe1
 8007f8c:	08007ff5 	.word	0x08007ff5
 8007f90:	08007f71 	.word	0x08007f71
 8007f94:	08007f71 	.word	0x08007f71
 8007f98:	08007f71 	.word	0x08007f71
 8007f9c:	08007f71 	.word	0x08007f71
 8007fa0:	08007ff5 	.word	0x08007ff5
 8007fa4:	08007f71 	.word	0x08007f71
 8007fa8:	08007f71 	.word	0x08007f71
 8007fac:	08007f71 	.word	0x08007f71
 8007fb0:	08007f71 	.word	0x08007f71
 8007fb4:	08008101 	.word	0x08008101
 8007fb8:	08008025 	.word	0x08008025
 8007fbc:	080080e3 	.word	0x080080e3
 8007fc0:	08007f71 	.word	0x08007f71
 8007fc4:	08007f71 	.word	0x08007f71
 8007fc8:	08008123 	.word	0x08008123
 8007fcc:	08007f71 	.word	0x08007f71
 8007fd0:	08008025 	.word	0x08008025
 8007fd4:	08007f71 	.word	0x08007f71
 8007fd8:	08007f71 	.word	0x08007f71
 8007fdc:	080080eb 	.word	0x080080eb
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	1d1a      	adds	r2, r3, #4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	602a      	str	r2, [r5, #0]
 8007fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e0a3      	b.n	800813c <_printf_i+0x1f4>
 8007ff4:	6820      	ldr	r0, [r4, #0]
 8007ff6:	6829      	ldr	r1, [r5, #0]
 8007ff8:	0606      	lsls	r6, r0, #24
 8007ffa:	f101 0304 	add.w	r3, r1, #4
 8007ffe:	d50a      	bpl.n	8008016 <_printf_i+0xce>
 8008000:	680e      	ldr	r6, [r1, #0]
 8008002:	602b      	str	r3, [r5, #0]
 8008004:	2e00      	cmp	r6, #0
 8008006:	da03      	bge.n	8008010 <_printf_i+0xc8>
 8008008:	232d      	movs	r3, #45	; 0x2d
 800800a:	4276      	negs	r6, r6
 800800c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008010:	485e      	ldr	r0, [pc, #376]	; (800818c <_printf_i+0x244>)
 8008012:	230a      	movs	r3, #10
 8008014:	e019      	b.n	800804a <_printf_i+0x102>
 8008016:	680e      	ldr	r6, [r1, #0]
 8008018:	f010 0f40 	tst.w	r0, #64	; 0x40
 800801c:	602b      	str	r3, [r5, #0]
 800801e:	bf18      	it	ne
 8008020:	b236      	sxthne	r6, r6
 8008022:	e7ef      	b.n	8008004 <_printf_i+0xbc>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	6820      	ldr	r0, [r4, #0]
 8008028:	1d19      	adds	r1, r3, #4
 800802a:	6029      	str	r1, [r5, #0]
 800802c:	0601      	lsls	r1, r0, #24
 800802e:	d501      	bpl.n	8008034 <_printf_i+0xec>
 8008030:	681e      	ldr	r6, [r3, #0]
 8008032:	e002      	b.n	800803a <_printf_i+0xf2>
 8008034:	0646      	lsls	r6, r0, #25
 8008036:	d5fb      	bpl.n	8008030 <_printf_i+0xe8>
 8008038:	881e      	ldrh	r6, [r3, #0]
 800803a:	2f6f      	cmp	r7, #111	; 0x6f
 800803c:	4853      	ldr	r0, [pc, #332]	; (800818c <_printf_i+0x244>)
 800803e:	bf0c      	ite	eq
 8008040:	2308      	moveq	r3, #8
 8008042:	230a      	movne	r3, #10
 8008044:	2100      	movs	r1, #0
 8008046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800804a:	6865      	ldr	r5, [r4, #4]
 800804c:	2d00      	cmp	r5, #0
 800804e:	60a5      	str	r5, [r4, #8]
 8008050:	bfa2      	ittt	ge
 8008052:	6821      	ldrge	r1, [r4, #0]
 8008054:	f021 0104 	bicge.w	r1, r1, #4
 8008058:	6021      	strge	r1, [r4, #0]
 800805a:	b90e      	cbnz	r6, 8008060 <_printf_i+0x118>
 800805c:	2d00      	cmp	r5, #0
 800805e:	d04d      	beq.n	80080fc <_printf_i+0x1b4>
 8008060:	4615      	mov	r5, r2
 8008062:	fbb6 f1f3 	udiv	r1, r6, r3
 8008066:	fb03 6711 	mls	r7, r3, r1, r6
 800806a:	5dc7      	ldrb	r7, [r0, r7]
 800806c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008070:	4637      	mov	r7, r6
 8008072:	460e      	mov	r6, r1
 8008074:	42bb      	cmp	r3, r7
 8008076:	d9f4      	bls.n	8008062 <_printf_i+0x11a>
 8008078:	2b08      	cmp	r3, #8
 800807a:	d10b      	bne.n	8008094 <_printf_i+0x14c>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	07de      	lsls	r6, r3, #31
 8008080:	d508      	bpl.n	8008094 <_printf_i+0x14c>
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	6861      	ldr	r1, [r4, #4]
 8008086:	4299      	cmp	r1, r3
 8008088:	bfde      	ittt	le
 800808a:	2330      	movle	r3, #48	; 0x30
 800808c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008090:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008094:	1b52      	subs	r2, r2, r5
 8008096:	6122      	str	r2, [r4, #16]
 8008098:	464b      	mov	r3, r9
 800809a:	aa03      	add	r2, sp, #12
 800809c:	4621      	mov	r1, r4
 800809e:	4640      	mov	r0, r8
 80080a0:	f8cd a000 	str.w	sl, [sp]
 80080a4:	f7ff fee0 	bl	8007e68 <_printf_common>
 80080a8:	3001      	adds	r0, #1
 80080aa:	d14c      	bne.n	8008146 <_printf_i+0x1fe>
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	b004      	add	sp, #16
 80080b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b6:	4835      	ldr	r0, [pc, #212]	; (800818c <_printf_i+0x244>)
 80080b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080bc:	6829      	ldr	r1, [r5, #0]
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80080c4:	6029      	str	r1, [r5, #0]
 80080c6:	061d      	lsls	r5, r3, #24
 80080c8:	d514      	bpl.n	80080f4 <_printf_i+0x1ac>
 80080ca:	07df      	lsls	r7, r3, #31
 80080cc:	bf44      	itt	mi
 80080ce:	f043 0320 	orrmi.w	r3, r3, #32
 80080d2:	6023      	strmi	r3, [r4, #0]
 80080d4:	b91e      	cbnz	r6, 80080de <_printf_i+0x196>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	f023 0320 	bic.w	r3, r3, #32
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	2310      	movs	r3, #16
 80080e0:	e7b0      	b.n	8008044 <_printf_i+0xfc>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	f043 0320 	orr.w	r3, r3, #32
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	2378      	movs	r3, #120	; 0x78
 80080ec:	4828      	ldr	r0, [pc, #160]	; (8008190 <_printf_i+0x248>)
 80080ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080f2:	e7e3      	b.n	80080bc <_printf_i+0x174>
 80080f4:	0659      	lsls	r1, r3, #25
 80080f6:	bf48      	it	mi
 80080f8:	b2b6      	uxthmi	r6, r6
 80080fa:	e7e6      	b.n	80080ca <_printf_i+0x182>
 80080fc:	4615      	mov	r5, r2
 80080fe:	e7bb      	b.n	8008078 <_printf_i+0x130>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	6826      	ldr	r6, [r4, #0]
 8008104:	1d18      	adds	r0, r3, #4
 8008106:	6961      	ldr	r1, [r4, #20]
 8008108:	6028      	str	r0, [r5, #0]
 800810a:	0635      	lsls	r5, r6, #24
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	d501      	bpl.n	8008114 <_printf_i+0x1cc>
 8008110:	6019      	str	r1, [r3, #0]
 8008112:	e002      	b.n	800811a <_printf_i+0x1d2>
 8008114:	0670      	lsls	r0, r6, #25
 8008116:	d5fb      	bpl.n	8008110 <_printf_i+0x1c8>
 8008118:	8019      	strh	r1, [r3, #0]
 800811a:	2300      	movs	r3, #0
 800811c:	4615      	mov	r5, r2
 800811e:	6123      	str	r3, [r4, #16]
 8008120:	e7ba      	b.n	8008098 <_printf_i+0x150>
 8008122:	682b      	ldr	r3, [r5, #0]
 8008124:	2100      	movs	r1, #0
 8008126:	1d1a      	adds	r2, r3, #4
 8008128:	602a      	str	r2, [r5, #0]
 800812a:	681d      	ldr	r5, [r3, #0]
 800812c:	6862      	ldr	r2, [r4, #4]
 800812e:	4628      	mov	r0, r5
 8008130:	f000 fb3c 	bl	80087ac <memchr>
 8008134:	b108      	cbz	r0, 800813a <_printf_i+0x1f2>
 8008136:	1b40      	subs	r0, r0, r5
 8008138:	6060      	str	r0, [r4, #4]
 800813a:	6863      	ldr	r3, [r4, #4]
 800813c:	6123      	str	r3, [r4, #16]
 800813e:	2300      	movs	r3, #0
 8008140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008144:	e7a8      	b.n	8008098 <_printf_i+0x150>
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	462a      	mov	r2, r5
 800814a:	4649      	mov	r1, r9
 800814c:	4640      	mov	r0, r8
 800814e:	47d0      	blx	sl
 8008150:	3001      	adds	r0, #1
 8008152:	d0ab      	beq.n	80080ac <_printf_i+0x164>
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	079b      	lsls	r3, r3, #30
 8008158:	d413      	bmi.n	8008182 <_printf_i+0x23a>
 800815a:	68e0      	ldr	r0, [r4, #12]
 800815c:	9b03      	ldr	r3, [sp, #12]
 800815e:	4298      	cmp	r0, r3
 8008160:	bfb8      	it	lt
 8008162:	4618      	movlt	r0, r3
 8008164:	e7a4      	b.n	80080b0 <_printf_i+0x168>
 8008166:	2301      	movs	r3, #1
 8008168:	4632      	mov	r2, r6
 800816a:	4649      	mov	r1, r9
 800816c:	4640      	mov	r0, r8
 800816e:	47d0      	blx	sl
 8008170:	3001      	adds	r0, #1
 8008172:	d09b      	beq.n	80080ac <_printf_i+0x164>
 8008174:	3501      	adds	r5, #1
 8008176:	68e3      	ldr	r3, [r4, #12]
 8008178:	9903      	ldr	r1, [sp, #12]
 800817a:	1a5b      	subs	r3, r3, r1
 800817c:	42ab      	cmp	r3, r5
 800817e:	dcf2      	bgt.n	8008166 <_printf_i+0x21e>
 8008180:	e7eb      	b.n	800815a <_printf_i+0x212>
 8008182:	2500      	movs	r5, #0
 8008184:	f104 0619 	add.w	r6, r4, #25
 8008188:	e7f5      	b.n	8008176 <_printf_i+0x22e>
 800818a:	bf00      	nop
 800818c:	08008f9d 	.word	0x08008f9d
 8008190:	08008fae 	.word	0x08008fae

08008194 <iprintf>:
 8008194:	b40f      	push	{r0, r1, r2, r3}
 8008196:	4b0a      	ldr	r3, [pc, #40]	; (80081c0 <iprintf+0x2c>)
 8008198:	b513      	push	{r0, r1, r4, lr}
 800819a:	681c      	ldr	r4, [r3, #0]
 800819c:	b124      	cbz	r4, 80081a8 <iprintf+0x14>
 800819e:	69a3      	ldr	r3, [r4, #24]
 80081a0:	b913      	cbnz	r3, 80081a8 <iprintf+0x14>
 80081a2:	4620      	mov	r0, r4
 80081a4:	f000 f9fc 	bl	80085a0 <__sinit>
 80081a8:	ab05      	add	r3, sp, #20
 80081aa:	9a04      	ldr	r2, [sp, #16]
 80081ac:	68a1      	ldr	r1, [r4, #8]
 80081ae:	4620      	mov	r0, r4
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	f7ff fd1f 	bl	8007bf4 <_vfiprintf_r>
 80081b6:	b002      	add	sp, #8
 80081b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081bc:	b004      	add	sp, #16
 80081be:	4770      	bx	lr
 80081c0:	20000020 	.word	0x20000020

080081c4 <putchar>:
 80081c4:	4b09      	ldr	r3, [pc, #36]	; (80081ec <putchar+0x28>)
 80081c6:	b513      	push	{r0, r1, r4, lr}
 80081c8:	681c      	ldr	r4, [r3, #0]
 80081ca:	4601      	mov	r1, r0
 80081cc:	b134      	cbz	r4, 80081dc <putchar+0x18>
 80081ce:	69a3      	ldr	r3, [r4, #24]
 80081d0:	b923      	cbnz	r3, 80081dc <putchar+0x18>
 80081d2:	9001      	str	r0, [sp, #4]
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 f9e3 	bl	80085a0 <__sinit>
 80081da:	9901      	ldr	r1, [sp, #4]
 80081dc:	68a2      	ldr	r2, [r4, #8]
 80081de:	4620      	mov	r0, r4
 80081e0:	b002      	add	sp, #8
 80081e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e6:	f000 bbcf 	b.w	8008988 <_putc_r>
 80081ea:	bf00      	nop
 80081ec:	20000020 	.word	0x20000020

080081f0 <__swbuf_r>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	460e      	mov	r6, r1
 80081f4:	4614      	mov	r4, r2
 80081f6:	4605      	mov	r5, r0
 80081f8:	b118      	cbz	r0, 8008202 <__swbuf_r+0x12>
 80081fa:	6983      	ldr	r3, [r0, #24]
 80081fc:	b90b      	cbnz	r3, 8008202 <__swbuf_r+0x12>
 80081fe:	f000 f9cf 	bl	80085a0 <__sinit>
 8008202:	4b21      	ldr	r3, [pc, #132]	; (8008288 <__swbuf_r+0x98>)
 8008204:	429c      	cmp	r4, r3
 8008206:	d12b      	bne.n	8008260 <__swbuf_r+0x70>
 8008208:	686c      	ldr	r4, [r5, #4]
 800820a:	69a3      	ldr	r3, [r4, #24]
 800820c:	60a3      	str	r3, [r4, #8]
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	071a      	lsls	r2, r3, #28
 8008212:	d52f      	bpl.n	8008274 <__swbuf_r+0x84>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	b36b      	cbz	r3, 8008274 <__swbuf_r+0x84>
 8008218:	6923      	ldr	r3, [r4, #16]
 800821a:	b2f6      	uxtb	r6, r6
 800821c:	6820      	ldr	r0, [r4, #0]
 800821e:	4637      	mov	r7, r6
 8008220:	1ac0      	subs	r0, r0, r3
 8008222:	6963      	ldr	r3, [r4, #20]
 8008224:	4283      	cmp	r3, r0
 8008226:	dc04      	bgt.n	8008232 <__swbuf_r+0x42>
 8008228:	4621      	mov	r1, r4
 800822a:	4628      	mov	r0, r5
 800822c:	f000 f924 	bl	8008478 <_fflush_r>
 8008230:	bb30      	cbnz	r0, 8008280 <__swbuf_r+0x90>
 8008232:	68a3      	ldr	r3, [r4, #8]
 8008234:	3001      	adds	r0, #1
 8008236:	3b01      	subs	r3, #1
 8008238:	60a3      	str	r3, [r4, #8]
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	1c5a      	adds	r2, r3, #1
 800823e:	6022      	str	r2, [r4, #0]
 8008240:	701e      	strb	r6, [r3, #0]
 8008242:	6963      	ldr	r3, [r4, #20]
 8008244:	4283      	cmp	r3, r0
 8008246:	d004      	beq.n	8008252 <__swbuf_r+0x62>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	07db      	lsls	r3, r3, #31
 800824c:	d506      	bpl.n	800825c <__swbuf_r+0x6c>
 800824e:	2e0a      	cmp	r6, #10
 8008250:	d104      	bne.n	800825c <__swbuf_r+0x6c>
 8008252:	4621      	mov	r1, r4
 8008254:	4628      	mov	r0, r5
 8008256:	f000 f90f 	bl	8008478 <_fflush_r>
 800825a:	b988      	cbnz	r0, 8008280 <__swbuf_r+0x90>
 800825c:	4638      	mov	r0, r7
 800825e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008260:	4b0a      	ldr	r3, [pc, #40]	; (800828c <__swbuf_r+0x9c>)
 8008262:	429c      	cmp	r4, r3
 8008264:	d101      	bne.n	800826a <__swbuf_r+0x7a>
 8008266:	68ac      	ldr	r4, [r5, #8]
 8008268:	e7cf      	b.n	800820a <__swbuf_r+0x1a>
 800826a:	4b09      	ldr	r3, [pc, #36]	; (8008290 <__swbuf_r+0xa0>)
 800826c:	429c      	cmp	r4, r3
 800826e:	bf08      	it	eq
 8008270:	68ec      	ldreq	r4, [r5, #12]
 8008272:	e7ca      	b.n	800820a <__swbuf_r+0x1a>
 8008274:	4621      	mov	r1, r4
 8008276:	4628      	mov	r0, r5
 8008278:	f000 f80c 	bl	8008294 <__swsetup_r>
 800827c:	2800      	cmp	r0, #0
 800827e:	d0cb      	beq.n	8008218 <__swbuf_r+0x28>
 8008280:	f04f 37ff 	mov.w	r7, #4294967295
 8008284:	e7ea      	b.n	800825c <__swbuf_r+0x6c>
 8008286:	bf00      	nop
 8008288:	08008fe0 	.word	0x08008fe0
 800828c:	08009000 	.word	0x08009000
 8008290:	08008fc0 	.word	0x08008fc0

08008294 <__swsetup_r>:
 8008294:	4b32      	ldr	r3, [pc, #200]	; (8008360 <__swsetup_r+0xcc>)
 8008296:	b570      	push	{r4, r5, r6, lr}
 8008298:	681d      	ldr	r5, [r3, #0]
 800829a:	4606      	mov	r6, r0
 800829c:	460c      	mov	r4, r1
 800829e:	b125      	cbz	r5, 80082aa <__swsetup_r+0x16>
 80082a0:	69ab      	ldr	r3, [r5, #24]
 80082a2:	b913      	cbnz	r3, 80082aa <__swsetup_r+0x16>
 80082a4:	4628      	mov	r0, r5
 80082a6:	f000 f97b 	bl	80085a0 <__sinit>
 80082aa:	4b2e      	ldr	r3, [pc, #184]	; (8008364 <__swsetup_r+0xd0>)
 80082ac:	429c      	cmp	r4, r3
 80082ae:	d10f      	bne.n	80082d0 <__swsetup_r+0x3c>
 80082b0:	686c      	ldr	r4, [r5, #4]
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082b8:	0719      	lsls	r1, r3, #28
 80082ba:	d42c      	bmi.n	8008316 <__swsetup_r+0x82>
 80082bc:	06dd      	lsls	r5, r3, #27
 80082be:	d411      	bmi.n	80082e4 <__swsetup_r+0x50>
 80082c0:	2309      	movs	r3, #9
 80082c2:	6033      	str	r3, [r6, #0]
 80082c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295
 80082cc:	81a3      	strh	r3, [r4, #12]
 80082ce:	e03e      	b.n	800834e <__swsetup_r+0xba>
 80082d0:	4b25      	ldr	r3, [pc, #148]	; (8008368 <__swsetup_r+0xd4>)
 80082d2:	429c      	cmp	r4, r3
 80082d4:	d101      	bne.n	80082da <__swsetup_r+0x46>
 80082d6:	68ac      	ldr	r4, [r5, #8]
 80082d8:	e7eb      	b.n	80082b2 <__swsetup_r+0x1e>
 80082da:	4b24      	ldr	r3, [pc, #144]	; (800836c <__swsetup_r+0xd8>)
 80082dc:	429c      	cmp	r4, r3
 80082de:	bf08      	it	eq
 80082e0:	68ec      	ldreq	r4, [r5, #12]
 80082e2:	e7e6      	b.n	80082b2 <__swsetup_r+0x1e>
 80082e4:	0758      	lsls	r0, r3, #29
 80082e6:	d512      	bpl.n	800830e <__swsetup_r+0x7a>
 80082e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ea:	b141      	cbz	r1, 80082fe <__swsetup_r+0x6a>
 80082ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082f0:	4299      	cmp	r1, r3
 80082f2:	d002      	beq.n	80082fa <__swsetup_r+0x66>
 80082f4:	4630      	mov	r0, r6
 80082f6:	f000 fa67 	bl	80087c8 <_free_r>
 80082fa:	2300      	movs	r3, #0
 80082fc:	6363      	str	r3, [r4, #52]	; 0x34
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008304:	81a3      	strh	r3, [r4, #12]
 8008306:	2300      	movs	r3, #0
 8008308:	6063      	str	r3, [r4, #4]
 800830a:	6923      	ldr	r3, [r4, #16]
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	f043 0308 	orr.w	r3, r3, #8
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	6923      	ldr	r3, [r4, #16]
 8008318:	b94b      	cbnz	r3, 800832e <__swsetup_r+0x9a>
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008324:	d003      	beq.n	800832e <__swsetup_r+0x9a>
 8008326:	4621      	mov	r1, r4
 8008328:	4630      	mov	r0, r6
 800832a:	f000 f9ff 	bl	800872c <__smakebuf_r>
 800832e:	89a0      	ldrh	r0, [r4, #12]
 8008330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008334:	f010 0301 	ands.w	r3, r0, #1
 8008338:	d00a      	beq.n	8008350 <__swsetup_r+0xbc>
 800833a:	2300      	movs	r3, #0
 800833c:	60a3      	str	r3, [r4, #8]
 800833e:	6963      	ldr	r3, [r4, #20]
 8008340:	425b      	negs	r3, r3
 8008342:	61a3      	str	r3, [r4, #24]
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	b943      	cbnz	r3, 800835a <__swsetup_r+0xc6>
 8008348:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800834c:	d1ba      	bne.n	80082c4 <__swsetup_r+0x30>
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	0781      	lsls	r1, r0, #30
 8008352:	bf58      	it	pl
 8008354:	6963      	ldrpl	r3, [r4, #20]
 8008356:	60a3      	str	r3, [r4, #8]
 8008358:	e7f4      	b.n	8008344 <__swsetup_r+0xb0>
 800835a:	2000      	movs	r0, #0
 800835c:	e7f7      	b.n	800834e <__swsetup_r+0xba>
 800835e:	bf00      	nop
 8008360:	20000020 	.word	0x20000020
 8008364:	08008fe0 	.word	0x08008fe0
 8008368:	08009000 	.word	0x08009000
 800836c:	08008fc0 	.word	0x08008fc0

08008370 <__sflush_r>:
 8008370:	898a      	ldrh	r2, [r1, #12]
 8008372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008376:	4605      	mov	r5, r0
 8008378:	0710      	lsls	r0, r2, #28
 800837a:	460c      	mov	r4, r1
 800837c:	d458      	bmi.n	8008430 <__sflush_r+0xc0>
 800837e:	684b      	ldr	r3, [r1, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	dc05      	bgt.n	8008390 <__sflush_r+0x20>
 8008384:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	dc02      	bgt.n	8008390 <__sflush_r+0x20>
 800838a:	2000      	movs	r0, #0
 800838c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008392:	2e00      	cmp	r6, #0
 8008394:	d0f9      	beq.n	800838a <__sflush_r+0x1a>
 8008396:	2300      	movs	r3, #0
 8008398:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800839c:	682f      	ldr	r7, [r5, #0]
 800839e:	602b      	str	r3, [r5, #0]
 80083a0:	d032      	beq.n	8008408 <__sflush_r+0x98>
 80083a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	075a      	lsls	r2, r3, #29
 80083a8:	d505      	bpl.n	80083b6 <__sflush_r+0x46>
 80083aa:	6863      	ldr	r3, [r4, #4]
 80083ac:	1ac0      	subs	r0, r0, r3
 80083ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083b0:	b10b      	cbz	r3, 80083b6 <__sflush_r+0x46>
 80083b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083b4:	1ac0      	subs	r0, r0, r3
 80083b6:	2300      	movs	r3, #0
 80083b8:	4602      	mov	r2, r0
 80083ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083bc:	4628      	mov	r0, r5
 80083be:	6a21      	ldr	r1, [r4, #32]
 80083c0:	47b0      	blx	r6
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	d106      	bne.n	80083d6 <__sflush_r+0x66>
 80083c8:	6829      	ldr	r1, [r5, #0]
 80083ca:	291d      	cmp	r1, #29
 80083cc:	d82c      	bhi.n	8008428 <__sflush_r+0xb8>
 80083ce:	4a29      	ldr	r2, [pc, #164]	; (8008474 <__sflush_r+0x104>)
 80083d0:	40ca      	lsrs	r2, r1
 80083d2:	07d6      	lsls	r6, r2, #31
 80083d4:	d528      	bpl.n	8008428 <__sflush_r+0xb8>
 80083d6:	2200      	movs	r2, #0
 80083d8:	04d9      	lsls	r1, r3, #19
 80083da:	6062      	str	r2, [r4, #4]
 80083dc:	6922      	ldr	r2, [r4, #16]
 80083de:	6022      	str	r2, [r4, #0]
 80083e0:	d504      	bpl.n	80083ec <__sflush_r+0x7c>
 80083e2:	1c42      	adds	r2, r0, #1
 80083e4:	d101      	bne.n	80083ea <__sflush_r+0x7a>
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	b903      	cbnz	r3, 80083ec <__sflush_r+0x7c>
 80083ea:	6560      	str	r0, [r4, #84]	; 0x54
 80083ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ee:	602f      	str	r7, [r5, #0]
 80083f0:	2900      	cmp	r1, #0
 80083f2:	d0ca      	beq.n	800838a <__sflush_r+0x1a>
 80083f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083f8:	4299      	cmp	r1, r3
 80083fa:	d002      	beq.n	8008402 <__sflush_r+0x92>
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 f9e3 	bl	80087c8 <_free_r>
 8008402:	2000      	movs	r0, #0
 8008404:	6360      	str	r0, [r4, #52]	; 0x34
 8008406:	e7c1      	b.n	800838c <__sflush_r+0x1c>
 8008408:	6a21      	ldr	r1, [r4, #32]
 800840a:	2301      	movs	r3, #1
 800840c:	4628      	mov	r0, r5
 800840e:	47b0      	blx	r6
 8008410:	1c41      	adds	r1, r0, #1
 8008412:	d1c7      	bne.n	80083a4 <__sflush_r+0x34>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0c4      	beq.n	80083a4 <__sflush_r+0x34>
 800841a:	2b1d      	cmp	r3, #29
 800841c:	d001      	beq.n	8008422 <__sflush_r+0xb2>
 800841e:	2b16      	cmp	r3, #22
 8008420:	d101      	bne.n	8008426 <__sflush_r+0xb6>
 8008422:	602f      	str	r7, [r5, #0]
 8008424:	e7b1      	b.n	800838a <__sflush_r+0x1a>
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	e7ad      	b.n	800838c <__sflush_r+0x1c>
 8008430:	690f      	ldr	r7, [r1, #16]
 8008432:	2f00      	cmp	r7, #0
 8008434:	d0a9      	beq.n	800838a <__sflush_r+0x1a>
 8008436:	0793      	lsls	r3, r2, #30
 8008438:	680e      	ldr	r6, [r1, #0]
 800843a:	600f      	str	r7, [r1, #0]
 800843c:	bf0c      	ite	eq
 800843e:	694b      	ldreq	r3, [r1, #20]
 8008440:	2300      	movne	r3, #0
 8008442:	eba6 0807 	sub.w	r8, r6, r7
 8008446:	608b      	str	r3, [r1, #8]
 8008448:	f1b8 0f00 	cmp.w	r8, #0
 800844c:	dd9d      	ble.n	800838a <__sflush_r+0x1a>
 800844e:	4643      	mov	r3, r8
 8008450:	463a      	mov	r2, r7
 8008452:	6a21      	ldr	r1, [r4, #32]
 8008454:	4628      	mov	r0, r5
 8008456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008458:	47b0      	blx	r6
 800845a:	2800      	cmp	r0, #0
 800845c:	dc06      	bgt.n	800846c <__sflush_r+0xfc>
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	e78f      	b.n	800838c <__sflush_r+0x1c>
 800846c:	4407      	add	r7, r0
 800846e:	eba8 0800 	sub.w	r8, r8, r0
 8008472:	e7e9      	b.n	8008448 <__sflush_r+0xd8>
 8008474:	20400001 	.word	0x20400001

08008478 <_fflush_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	690b      	ldr	r3, [r1, #16]
 800847c:	4605      	mov	r5, r0
 800847e:	460c      	mov	r4, r1
 8008480:	b913      	cbnz	r3, 8008488 <_fflush_r+0x10>
 8008482:	2500      	movs	r5, #0
 8008484:	4628      	mov	r0, r5
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	b118      	cbz	r0, 8008492 <_fflush_r+0x1a>
 800848a:	6983      	ldr	r3, [r0, #24]
 800848c:	b90b      	cbnz	r3, 8008492 <_fflush_r+0x1a>
 800848e:	f000 f887 	bl	80085a0 <__sinit>
 8008492:	4b14      	ldr	r3, [pc, #80]	; (80084e4 <_fflush_r+0x6c>)
 8008494:	429c      	cmp	r4, r3
 8008496:	d11b      	bne.n	80084d0 <_fflush_r+0x58>
 8008498:	686c      	ldr	r4, [r5, #4]
 800849a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0ef      	beq.n	8008482 <_fflush_r+0xa>
 80084a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084a4:	07d0      	lsls	r0, r2, #31
 80084a6:	d404      	bmi.n	80084b2 <_fflush_r+0x3a>
 80084a8:	0599      	lsls	r1, r3, #22
 80084aa:	d402      	bmi.n	80084b2 <_fflush_r+0x3a>
 80084ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ae:	f000 f915 	bl	80086dc <__retarget_lock_acquire_recursive>
 80084b2:	4628      	mov	r0, r5
 80084b4:	4621      	mov	r1, r4
 80084b6:	f7ff ff5b 	bl	8008370 <__sflush_r>
 80084ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084bc:	4605      	mov	r5, r0
 80084be:	07da      	lsls	r2, r3, #31
 80084c0:	d4e0      	bmi.n	8008484 <_fflush_r+0xc>
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	059b      	lsls	r3, r3, #22
 80084c6:	d4dd      	bmi.n	8008484 <_fflush_r+0xc>
 80084c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ca:	f000 f908 	bl	80086de <__retarget_lock_release_recursive>
 80084ce:	e7d9      	b.n	8008484 <_fflush_r+0xc>
 80084d0:	4b05      	ldr	r3, [pc, #20]	; (80084e8 <_fflush_r+0x70>)
 80084d2:	429c      	cmp	r4, r3
 80084d4:	d101      	bne.n	80084da <_fflush_r+0x62>
 80084d6:	68ac      	ldr	r4, [r5, #8]
 80084d8:	e7df      	b.n	800849a <_fflush_r+0x22>
 80084da:	4b04      	ldr	r3, [pc, #16]	; (80084ec <_fflush_r+0x74>)
 80084dc:	429c      	cmp	r4, r3
 80084de:	bf08      	it	eq
 80084e0:	68ec      	ldreq	r4, [r5, #12]
 80084e2:	e7da      	b.n	800849a <_fflush_r+0x22>
 80084e4:	08008fe0 	.word	0x08008fe0
 80084e8:	08009000 	.word	0x08009000
 80084ec:	08008fc0 	.word	0x08008fc0

080084f0 <std>:
 80084f0:	2300      	movs	r3, #0
 80084f2:	b510      	push	{r4, lr}
 80084f4:	4604      	mov	r4, r0
 80084f6:	6083      	str	r3, [r0, #8]
 80084f8:	8181      	strh	r1, [r0, #12]
 80084fa:	4619      	mov	r1, r3
 80084fc:	6643      	str	r3, [r0, #100]	; 0x64
 80084fe:	81c2      	strh	r2, [r0, #14]
 8008500:	2208      	movs	r2, #8
 8008502:	6183      	str	r3, [r0, #24]
 8008504:	e9c0 3300 	strd	r3, r3, [r0]
 8008508:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800850c:	305c      	adds	r0, #92	; 0x5c
 800850e:	f7ff fb3f 	bl	8007b90 <memset>
 8008512:	4b05      	ldr	r3, [pc, #20]	; (8008528 <std+0x38>)
 8008514:	6224      	str	r4, [r4, #32]
 8008516:	6263      	str	r3, [r4, #36]	; 0x24
 8008518:	4b04      	ldr	r3, [pc, #16]	; (800852c <std+0x3c>)
 800851a:	62a3      	str	r3, [r4, #40]	; 0x28
 800851c:	4b04      	ldr	r3, [pc, #16]	; (8008530 <std+0x40>)
 800851e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008520:	4b04      	ldr	r3, [pc, #16]	; (8008534 <std+0x44>)
 8008522:	6323      	str	r3, [r4, #48]	; 0x30
 8008524:	bd10      	pop	{r4, pc}
 8008526:	bf00      	nop
 8008528:	08008a39 	.word	0x08008a39
 800852c:	08008a5b 	.word	0x08008a5b
 8008530:	08008a93 	.word	0x08008a93
 8008534:	08008ab7 	.word	0x08008ab7

08008538 <_cleanup_r>:
 8008538:	4901      	ldr	r1, [pc, #4]	; (8008540 <_cleanup_r+0x8>)
 800853a:	f000 b8af 	b.w	800869c <_fwalk_reent>
 800853e:	bf00      	nop
 8008540:	08008479 	.word	0x08008479

08008544 <__sfmoreglue>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	2268      	movs	r2, #104	; 0x68
 8008548:	1e4d      	subs	r5, r1, #1
 800854a:	460e      	mov	r6, r1
 800854c:	4355      	muls	r5, r2
 800854e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008552:	f000 f9a5 	bl	80088a0 <_malloc_r>
 8008556:	4604      	mov	r4, r0
 8008558:	b140      	cbz	r0, 800856c <__sfmoreglue+0x28>
 800855a:	2100      	movs	r1, #0
 800855c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008560:	e9c0 1600 	strd	r1, r6, [r0]
 8008564:	300c      	adds	r0, #12
 8008566:	60a0      	str	r0, [r4, #8]
 8008568:	f7ff fb12 	bl	8007b90 <memset>
 800856c:	4620      	mov	r0, r4
 800856e:	bd70      	pop	{r4, r5, r6, pc}

08008570 <__sfp_lock_acquire>:
 8008570:	4801      	ldr	r0, [pc, #4]	; (8008578 <__sfp_lock_acquire+0x8>)
 8008572:	f000 b8b3 	b.w	80086dc <__retarget_lock_acquire_recursive>
 8008576:	bf00      	nop
 8008578:	200003a1 	.word	0x200003a1

0800857c <__sfp_lock_release>:
 800857c:	4801      	ldr	r0, [pc, #4]	; (8008584 <__sfp_lock_release+0x8>)
 800857e:	f000 b8ae 	b.w	80086de <__retarget_lock_release_recursive>
 8008582:	bf00      	nop
 8008584:	200003a1 	.word	0x200003a1

08008588 <__sinit_lock_acquire>:
 8008588:	4801      	ldr	r0, [pc, #4]	; (8008590 <__sinit_lock_acquire+0x8>)
 800858a:	f000 b8a7 	b.w	80086dc <__retarget_lock_acquire_recursive>
 800858e:	bf00      	nop
 8008590:	200003a2 	.word	0x200003a2

08008594 <__sinit_lock_release>:
 8008594:	4801      	ldr	r0, [pc, #4]	; (800859c <__sinit_lock_release+0x8>)
 8008596:	f000 b8a2 	b.w	80086de <__retarget_lock_release_recursive>
 800859a:	bf00      	nop
 800859c:	200003a2 	.word	0x200003a2

080085a0 <__sinit>:
 80085a0:	b510      	push	{r4, lr}
 80085a2:	4604      	mov	r4, r0
 80085a4:	f7ff fff0 	bl	8008588 <__sinit_lock_acquire>
 80085a8:	69a3      	ldr	r3, [r4, #24]
 80085aa:	b11b      	cbz	r3, 80085b4 <__sinit+0x14>
 80085ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b0:	f7ff bff0 	b.w	8008594 <__sinit_lock_release>
 80085b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085b8:	6523      	str	r3, [r4, #80]	; 0x50
 80085ba:	4620      	mov	r0, r4
 80085bc:	4b12      	ldr	r3, [pc, #72]	; (8008608 <__sinit+0x68>)
 80085be:	4a13      	ldr	r2, [pc, #76]	; (800860c <__sinit+0x6c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	62a2      	str	r2, [r4, #40]	; 0x28
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	bf04      	itt	eq
 80085c8:	2301      	moveq	r3, #1
 80085ca:	61a3      	streq	r3, [r4, #24]
 80085cc:	f000 f820 	bl	8008610 <__sfp>
 80085d0:	6060      	str	r0, [r4, #4]
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 f81c 	bl	8008610 <__sfp>
 80085d8:	60a0      	str	r0, [r4, #8]
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 f818 	bl	8008610 <__sfp>
 80085e0:	2200      	movs	r2, #0
 80085e2:	2104      	movs	r1, #4
 80085e4:	60e0      	str	r0, [r4, #12]
 80085e6:	6860      	ldr	r0, [r4, #4]
 80085e8:	f7ff ff82 	bl	80084f0 <std>
 80085ec:	2201      	movs	r2, #1
 80085ee:	2109      	movs	r1, #9
 80085f0:	68a0      	ldr	r0, [r4, #8]
 80085f2:	f7ff ff7d 	bl	80084f0 <std>
 80085f6:	2202      	movs	r2, #2
 80085f8:	2112      	movs	r1, #18
 80085fa:	68e0      	ldr	r0, [r4, #12]
 80085fc:	f7ff ff78 	bl	80084f0 <std>
 8008600:	2301      	movs	r3, #1
 8008602:	61a3      	str	r3, [r4, #24]
 8008604:	e7d2      	b.n	80085ac <__sinit+0xc>
 8008606:	bf00      	nop
 8008608:	08008f88 	.word	0x08008f88
 800860c:	08008539 	.word	0x08008539

08008610 <__sfp>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	4607      	mov	r7, r0
 8008614:	f7ff ffac 	bl	8008570 <__sfp_lock_acquire>
 8008618:	4b1e      	ldr	r3, [pc, #120]	; (8008694 <__sfp+0x84>)
 800861a:	681e      	ldr	r6, [r3, #0]
 800861c:	69b3      	ldr	r3, [r6, #24]
 800861e:	b913      	cbnz	r3, 8008626 <__sfp+0x16>
 8008620:	4630      	mov	r0, r6
 8008622:	f7ff ffbd 	bl	80085a0 <__sinit>
 8008626:	3648      	adds	r6, #72	; 0x48
 8008628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800862c:	3b01      	subs	r3, #1
 800862e:	d503      	bpl.n	8008638 <__sfp+0x28>
 8008630:	6833      	ldr	r3, [r6, #0]
 8008632:	b30b      	cbz	r3, 8008678 <__sfp+0x68>
 8008634:	6836      	ldr	r6, [r6, #0]
 8008636:	e7f7      	b.n	8008628 <__sfp+0x18>
 8008638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800863c:	b9d5      	cbnz	r5, 8008674 <__sfp+0x64>
 800863e:	4b16      	ldr	r3, [pc, #88]	; (8008698 <__sfp+0x88>)
 8008640:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008644:	6665      	str	r5, [r4, #100]	; 0x64
 8008646:	60e3      	str	r3, [r4, #12]
 8008648:	f000 f847 	bl	80086da <__retarget_lock_init_recursive>
 800864c:	f7ff ff96 	bl	800857c <__sfp_lock_release>
 8008650:	2208      	movs	r2, #8
 8008652:	4629      	mov	r1, r5
 8008654:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008658:	6025      	str	r5, [r4, #0]
 800865a:	61a5      	str	r5, [r4, #24]
 800865c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008660:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008664:	f7ff fa94 	bl	8007b90 <memset>
 8008668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800866c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008670:	4620      	mov	r0, r4
 8008672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008674:	3468      	adds	r4, #104	; 0x68
 8008676:	e7d9      	b.n	800862c <__sfp+0x1c>
 8008678:	2104      	movs	r1, #4
 800867a:	4638      	mov	r0, r7
 800867c:	f7ff ff62 	bl	8008544 <__sfmoreglue>
 8008680:	4604      	mov	r4, r0
 8008682:	6030      	str	r0, [r6, #0]
 8008684:	2800      	cmp	r0, #0
 8008686:	d1d5      	bne.n	8008634 <__sfp+0x24>
 8008688:	f7ff ff78 	bl	800857c <__sfp_lock_release>
 800868c:	230c      	movs	r3, #12
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	e7ee      	b.n	8008670 <__sfp+0x60>
 8008692:	bf00      	nop
 8008694:	08008f88 	.word	0x08008f88
 8008698:	ffff0001 	.word	0xffff0001

0800869c <_fwalk_reent>:
 800869c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a0:	4606      	mov	r6, r0
 80086a2:	4688      	mov	r8, r1
 80086a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086a8:	2700      	movs	r7, #0
 80086aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086ae:	f1b9 0901 	subs.w	r9, r9, #1
 80086b2:	d505      	bpl.n	80086c0 <_fwalk_reent+0x24>
 80086b4:	6824      	ldr	r4, [r4, #0]
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	d1f7      	bne.n	80086aa <_fwalk_reent+0xe>
 80086ba:	4638      	mov	r0, r7
 80086bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c0:	89ab      	ldrh	r3, [r5, #12]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d907      	bls.n	80086d6 <_fwalk_reent+0x3a>
 80086c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086ca:	3301      	adds	r3, #1
 80086cc:	d003      	beq.n	80086d6 <_fwalk_reent+0x3a>
 80086ce:	4629      	mov	r1, r5
 80086d0:	4630      	mov	r0, r6
 80086d2:	47c0      	blx	r8
 80086d4:	4307      	orrs	r7, r0
 80086d6:	3568      	adds	r5, #104	; 0x68
 80086d8:	e7e9      	b.n	80086ae <_fwalk_reent+0x12>

080086da <__retarget_lock_init_recursive>:
 80086da:	4770      	bx	lr

080086dc <__retarget_lock_acquire_recursive>:
 80086dc:	4770      	bx	lr

080086de <__retarget_lock_release_recursive>:
 80086de:	4770      	bx	lr

080086e0 <__swhatbuf_r>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	460e      	mov	r6, r1
 80086e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e8:	b096      	sub	sp, #88	; 0x58
 80086ea:	4614      	mov	r4, r2
 80086ec:	2900      	cmp	r1, #0
 80086ee:	461d      	mov	r5, r3
 80086f0:	da08      	bge.n	8008704 <__swhatbuf_r+0x24>
 80086f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	602a      	str	r2, [r5, #0]
 80086fa:	061a      	lsls	r2, r3, #24
 80086fc:	d410      	bmi.n	8008720 <__swhatbuf_r+0x40>
 80086fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008702:	e00e      	b.n	8008722 <__swhatbuf_r+0x42>
 8008704:	466a      	mov	r2, sp
 8008706:	f000 f9fd 	bl	8008b04 <_fstat_r>
 800870a:	2800      	cmp	r0, #0
 800870c:	dbf1      	blt.n	80086f2 <__swhatbuf_r+0x12>
 800870e:	9a01      	ldr	r2, [sp, #4]
 8008710:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008714:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008718:	425a      	negs	r2, r3
 800871a:	415a      	adcs	r2, r3
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	e7ee      	b.n	80086fe <__swhatbuf_r+0x1e>
 8008720:	2340      	movs	r3, #64	; 0x40
 8008722:	2000      	movs	r0, #0
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	b016      	add	sp, #88	; 0x58
 8008728:	bd70      	pop	{r4, r5, r6, pc}
	...

0800872c <__smakebuf_r>:
 800872c:	898b      	ldrh	r3, [r1, #12]
 800872e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008730:	079d      	lsls	r5, r3, #30
 8008732:	4606      	mov	r6, r0
 8008734:	460c      	mov	r4, r1
 8008736:	d507      	bpl.n	8008748 <__smakebuf_r+0x1c>
 8008738:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	2301      	movs	r3, #1
 8008742:	6163      	str	r3, [r4, #20]
 8008744:	b002      	add	sp, #8
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	ab01      	add	r3, sp, #4
 800874a:	466a      	mov	r2, sp
 800874c:	f7ff ffc8 	bl	80086e0 <__swhatbuf_r>
 8008750:	9900      	ldr	r1, [sp, #0]
 8008752:	4605      	mov	r5, r0
 8008754:	4630      	mov	r0, r6
 8008756:	f000 f8a3 	bl	80088a0 <_malloc_r>
 800875a:	b948      	cbnz	r0, 8008770 <__smakebuf_r+0x44>
 800875c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008760:	059a      	lsls	r2, r3, #22
 8008762:	d4ef      	bmi.n	8008744 <__smakebuf_r+0x18>
 8008764:	f023 0303 	bic.w	r3, r3, #3
 8008768:	f043 0302 	orr.w	r3, r3, #2
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	e7e3      	b.n	8008738 <__smakebuf_r+0xc>
 8008770:	4b0d      	ldr	r3, [pc, #52]	; (80087a8 <__smakebuf_r+0x7c>)
 8008772:	62b3      	str	r3, [r6, #40]	; 0x28
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	6020      	str	r0, [r4, #0]
 8008778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800877c:	6120      	str	r0, [r4, #16]
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	9b00      	ldr	r3, [sp, #0]
 8008782:	6163      	str	r3, [r4, #20]
 8008784:	9b01      	ldr	r3, [sp, #4]
 8008786:	b15b      	cbz	r3, 80087a0 <__smakebuf_r+0x74>
 8008788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800878c:	4630      	mov	r0, r6
 800878e:	f000 f9cb 	bl	8008b28 <_isatty_r>
 8008792:	b128      	cbz	r0, 80087a0 <__smakebuf_r+0x74>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	f023 0303 	bic.w	r3, r3, #3
 800879a:	f043 0301 	orr.w	r3, r3, #1
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	89a0      	ldrh	r0, [r4, #12]
 80087a2:	4305      	orrs	r5, r0
 80087a4:	81a5      	strh	r5, [r4, #12]
 80087a6:	e7cd      	b.n	8008744 <__smakebuf_r+0x18>
 80087a8:	08008539 	.word	0x08008539

080087ac <memchr>:
 80087ac:	b2c9      	uxtb	r1, r1
 80087ae:	4402      	add	r2, r0
 80087b0:	b510      	push	{r4, lr}
 80087b2:	4290      	cmp	r0, r2
 80087b4:	4603      	mov	r3, r0
 80087b6:	d101      	bne.n	80087bc <memchr+0x10>
 80087b8:	2300      	movs	r3, #0
 80087ba:	e003      	b.n	80087c4 <memchr+0x18>
 80087bc:	781c      	ldrb	r4, [r3, #0]
 80087be:	3001      	adds	r0, #1
 80087c0:	428c      	cmp	r4, r1
 80087c2:	d1f6      	bne.n	80087b2 <memchr+0x6>
 80087c4:	4618      	mov	r0, r3
 80087c6:	bd10      	pop	{r4, pc}

080087c8 <_free_r>:
 80087c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087ca:	2900      	cmp	r1, #0
 80087cc:	d043      	beq.n	8008856 <_free_r+0x8e>
 80087ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d2:	1f0c      	subs	r4, r1, #4
 80087d4:	9001      	str	r0, [sp, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfb8      	it	lt
 80087da:	18e4      	addlt	r4, r4, r3
 80087dc:	f000 f9c6 	bl	8008b6c <__malloc_lock>
 80087e0:	4a1e      	ldr	r2, [pc, #120]	; (800885c <_free_r+0x94>)
 80087e2:	9801      	ldr	r0, [sp, #4]
 80087e4:	6813      	ldr	r3, [r2, #0]
 80087e6:	b933      	cbnz	r3, 80087f6 <_free_r+0x2e>
 80087e8:	6063      	str	r3, [r4, #4]
 80087ea:	6014      	str	r4, [r2, #0]
 80087ec:	b003      	add	sp, #12
 80087ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087f2:	f000 b9c1 	b.w	8008b78 <__malloc_unlock>
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	d908      	bls.n	800880c <_free_r+0x44>
 80087fa:	6825      	ldr	r5, [r4, #0]
 80087fc:	1961      	adds	r1, r4, r5
 80087fe:	428b      	cmp	r3, r1
 8008800:	bf01      	itttt	eq
 8008802:	6819      	ldreq	r1, [r3, #0]
 8008804:	685b      	ldreq	r3, [r3, #4]
 8008806:	1949      	addeq	r1, r1, r5
 8008808:	6021      	streq	r1, [r4, #0]
 800880a:	e7ed      	b.n	80087e8 <_free_r+0x20>
 800880c:	461a      	mov	r2, r3
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	b10b      	cbz	r3, 8008816 <_free_r+0x4e>
 8008812:	42a3      	cmp	r3, r4
 8008814:	d9fa      	bls.n	800880c <_free_r+0x44>
 8008816:	6811      	ldr	r1, [r2, #0]
 8008818:	1855      	adds	r5, r2, r1
 800881a:	42a5      	cmp	r5, r4
 800881c:	d10b      	bne.n	8008836 <_free_r+0x6e>
 800881e:	6824      	ldr	r4, [r4, #0]
 8008820:	4421      	add	r1, r4
 8008822:	1854      	adds	r4, r2, r1
 8008824:	6011      	str	r1, [r2, #0]
 8008826:	42a3      	cmp	r3, r4
 8008828:	d1e0      	bne.n	80087ec <_free_r+0x24>
 800882a:	681c      	ldr	r4, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	4421      	add	r1, r4
 8008830:	6053      	str	r3, [r2, #4]
 8008832:	6011      	str	r1, [r2, #0]
 8008834:	e7da      	b.n	80087ec <_free_r+0x24>
 8008836:	d902      	bls.n	800883e <_free_r+0x76>
 8008838:	230c      	movs	r3, #12
 800883a:	6003      	str	r3, [r0, #0]
 800883c:	e7d6      	b.n	80087ec <_free_r+0x24>
 800883e:	6825      	ldr	r5, [r4, #0]
 8008840:	1961      	adds	r1, r4, r5
 8008842:	428b      	cmp	r3, r1
 8008844:	bf02      	ittt	eq
 8008846:	6819      	ldreq	r1, [r3, #0]
 8008848:	685b      	ldreq	r3, [r3, #4]
 800884a:	1949      	addeq	r1, r1, r5
 800884c:	6063      	str	r3, [r4, #4]
 800884e:	bf08      	it	eq
 8008850:	6021      	streq	r1, [r4, #0]
 8008852:	6054      	str	r4, [r2, #4]
 8008854:	e7ca      	b.n	80087ec <_free_r+0x24>
 8008856:	b003      	add	sp, #12
 8008858:	bd30      	pop	{r4, r5, pc}
 800885a:	bf00      	nop
 800885c:	200003a4 	.word	0x200003a4

08008860 <sbrk_aligned>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	4e0e      	ldr	r6, [pc, #56]	; (800889c <sbrk_aligned+0x3c>)
 8008864:	460c      	mov	r4, r1
 8008866:	4605      	mov	r5, r0
 8008868:	6831      	ldr	r1, [r6, #0]
 800886a:	b911      	cbnz	r1, 8008872 <sbrk_aligned+0x12>
 800886c:	f000 f8d4 	bl	8008a18 <_sbrk_r>
 8008870:	6030      	str	r0, [r6, #0]
 8008872:	4621      	mov	r1, r4
 8008874:	4628      	mov	r0, r5
 8008876:	f000 f8cf 	bl	8008a18 <_sbrk_r>
 800887a:	1c43      	adds	r3, r0, #1
 800887c:	d00a      	beq.n	8008894 <sbrk_aligned+0x34>
 800887e:	1cc4      	adds	r4, r0, #3
 8008880:	f024 0403 	bic.w	r4, r4, #3
 8008884:	42a0      	cmp	r0, r4
 8008886:	d007      	beq.n	8008898 <sbrk_aligned+0x38>
 8008888:	1a21      	subs	r1, r4, r0
 800888a:	4628      	mov	r0, r5
 800888c:	f000 f8c4 	bl	8008a18 <_sbrk_r>
 8008890:	3001      	adds	r0, #1
 8008892:	d101      	bne.n	8008898 <sbrk_aligned+0x38>
 8008894:	f04f 34ff 	mov.w	r4, #4294967295
 8008898:	4620      	mov	r0, r4
 800889a:	bd70      	pop	{r4, r5, r6, pc}
 800889c:	200003a8 	.word	0x200003a8

080088a0 <_malloc_r>:
 80088a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a4:	1ccd      	adds	r5, r1, #3
 80088a6:	4607      	mov	r7, r0
 80088a8:	f025 0503 	bic.w	r5, r5, #3
 80088ac:	3508      	adds	r5, #8
 80088ae:	2d0c      	cmp	r5, #12
 80088b0:	bf38      	it	cc
 80088b2:	250c      	movcc	r5, #12
 80088b4:	2d00      	cmp	r5, #0
 80088b6:	db01      	blt.n	80088bc <_malloc_r+0x1c>
 80088b8:	42a9      	cmp	r1, r5
 80088ba:	d905      	bls.n	80088c8 <_malloc_r+0x28>
 80088bc:	230c      	movs	r3, #12
 80088be:	2600      	movs	r6, #0
 80088c0:	603b      	str	r3, [r7, #0]
 80088c2:	4630      	mov	r0, r6
 80088c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c8:	4e2e      	ldr	r6, [pc, #184]	; (8008984 <_malloc_r+0xe4>)
 80088ca:	f000 f94f 	bl	8008b6c <__malloc_lock>
 80088ce:	6833      	ldr	r3, [r6, #0]
 80088d0:	461c      	mov	r4, r3
 80088d2:	bb34      	cbnz	r4, 8008922 <_malloc_r+0x82>
 80088d4:	4629      	mov	r1, r5
 80088d6:	4638      	mov	r0, r7
 80088d8:	f7ff ffc2 	bl	8008860 <sbrk_aligned>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	4604      	mov	r4, r0
 80088e0:	d14d      	bne.n	800897e <_malloc_r+0xde>
 80088e2:	6834      	ldr	r4, [r6, #0]
 80088e4:	4626      	mov	r6, r4
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	d140      	bne.n	800896c <_malloc_r+0xcc>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	4631      	mov	r1, r6
 80088ee:	4638      	mov	r0, r7
 80088f0:	eb04 0803 	add.w	r8, r4, r3
 80088f4:	f000 f890 	bl	8008a18 <_sbrk_r>
 80088f8:	4580      	cmp	r8, r0
 80088fa:	d13a      	bne.n	8008972 <_malloc_r+0xd2>
 80088fc:	6821      	ldr	r1, [r4, #0]
 80088fe:	3503      	adds	r5, #3
 8008900:	4638      	mov	r0, r7
 8008902:	1a6d      	subs	r5, r5, r1
 8008904:	f025 0503 	bic.w	r5, r5, #3
 8008908:	3508      	adds	r5, #8
 800890a:	2d0c      	cmp	r5, #12
 800890c:	bf38      	it	cc
 800890e:	250c      	movcc	r5, #12
 8008910:	4629      	mov	r1, r5
 8008912:	f7ff ffa5 	bl	8008860 <sbrk_aligned>
 8008916:	3001      	adds	r0, #1
 8008918:	d02b      	beq.n	8008972 <_malloc_r+0xd2>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	442b      	add	r3, r5
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	e00e      	b.n	8008940 <_malloc_r+0xa0>
 8008922:	6822      	ldr	r2, [r4, #0]
 8008924:	1b52      	subs	r2, r2, r5
 8008926:	d41e      	bmi.n	8008966 <_malloc_r+0xc6>
 8008928:	2a0b      	cmp	r2, #11
 800892a:	d916      	bls.n	800895a <_malloc_r+0xba>
 800892c:	1961      	adds	r1, r4, r5
 800892e:	42a3      	cmp	r3, r4
 8008930:	6025      	str	r5, [r4, #0]
 8008932:	bf18      	it	ne
 8008934:	6059      	strne	r1, [r3, #4]
 8008936:	6863      	ldr	r3, [r4, #4]
 8008938:	bf08      	it	eq
 800893a:	6031      	streq	r1, [r6, #0]
 800893c:	5162      	str	r2, [r4, r5]
 800893e:	604b      	str	r3, [r1, #4]
 8008940:	f104 060b 	add.w	r6, r4, #11
 8008944:	4638      	mov	r0, r7
 8008946:	f000 f917 	bl	8008b78 <__malloc_unlock>
 800894a:	1d23      	adds	r3, r4, #4
 800894c:	f026 0607 	bic.w	r6, r6, #7
 8008950:	1af2      	subs	r2, r6, r3
 8008952:	d0b6      	beq.n	80088c2 <_malloc_r+0x22>
 8008954:	1b9b      	subs	r3, r3, r6
 8008956:	50a3      	str	r3, [r4, r2]
 8008958:	e7b3      	b.n	80088c2 <_malloc_r+0x22>
 800895a:	6862      	ldr	r2, [r4, #4]
 800895c:	42a3      	cmp	r3, r4
 800895e:	bf0c      	ite	eq
 8008960:	6032      	streq	r2, [r6, #0]
 8008962:	605a      	strne	r2, [r3, #4]
 8008964:	e7ec      	b.n	8008940 <_malloc_r+0xa0>
 8008966:	4623      	mov	r3, r4
 8008968:	6864      	ldr	r4, [r4, #4]
 800896a:	e7b2      	b.n	80088d2 <_malloc_r+0x32>
 800896c:	4634      	mov	r4, r6
 800896e:	6876      	ldr	r6, [r6, #4]
 8008970:	e7b9      	b.n	80088e6 <_malloc_r+0x46>
 8008972:	230c      	movs	r3, #12
 8008974:	4638      	mov	r0, r7
 8008976:	603b      	str	r3, [r7, #0]
 8008978:	f000 f8fe 	bl	8008b78 <__malloc_unlock>
 800897c:	e7a1      	b.n	80088c2 <_malloc_r+0x22>
 800897e:	6025      	str	r5, [r4, #0]
 8008980:	e7de      	b.n	8008940 <_malloc_r+0xa0>
 8008982:	bf00      	nop
 8008984:	200003a4 	.word	0x200003a4

08008988 <_putc_r>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	460d      	mov	r5, r1
 800898c:	4614      	mov	r4, r2
 800898e:	4606      	mov	r6, r0
 8008990:	b118      	cbz	r0, 800899a <_putc_r+0x12>
 8008992:	6983      	ldr	r3, [r0, #24]
 8008994:	b90b      	cbnz	r3, 800899a <_putc_r+0x12>
 8008996:	f7ff fe03 	bl	80085a0 <__sinit>
 800899a:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <_putc_r+0x84>)
 800899c:	429c      	cmp	r4, r3
 800899e:	d124      	bne.n	80089ea <_putc_r+0x62>
 80089a0:	6874      	ldr	r4, [r6, #4]
 80089a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089a4:	07d8      	lsls	r0, r3, #31
 80089a6:	d405      	bmi.n	80089b4 <_putc_r+0x2c>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	0599      	lsls	r1, r3, #22
 80089ac:	d402      	bmi.n	80089b4 <_putc_r+0x2c>
 80089ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089b0:	f7ff fe94 	bl	80086dc <__retarget_lock_acquire_recursive>
 80089b4:	68a3      	ldr	r3, [r4, #8]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	60a3      	str	r3, [r4, #8]
 80089bc:	da05      	bge.n	80089ca <_putc_r+0x42>
 80089be:	69a2      	ldr	r2, [r4, #24]
 80089c0:	4293      	cmp	r3, r2
 80089c2:	db1c      	blt.n	80089fe <_putc_r+0x76>
 80089c4:	b2eb      	uxtb	r3, r5
 80089c6:	2b0a      	cmp	r3, #10
 80089c8:	d019      	beq.n	80089fe <_putc_r+0x76>
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	6022      	str	r2, [r4, #0]
 80089d0:	701d      	strb	r5, [r3, #0]
 80089d2:	b2ed      	uxtb	r5, r5
 80089d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089d6:	07da      	lsls	r2, r3, #31
 80089d8:	d405      	bmi.n	80089e6 <_putc_r+0x5e>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	059b      	lsls	r3, r3, #22
 80089de:	d402      	bmi.n	80089e6 <_putc_r+0x5e>
 80089e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e2:	f7ff fe7c 	bl	80086de <__retarget_lock_release_recursive>
 80089e6:	4628      	mov	r0, r5
 80089e8:	bd70      	pop	{r4, r5, r6, pc}
 80089ea:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <_putc_r+0x88>)
 80089ec:	429c      	cmp	r4, r3
 80089ee:	d101      	bne.n	80089f4 <_putc_r+0x6c>
 80089f0:	68b4      	ldr	r4, [r6, #8]
 80089f2:	e7d6      	b.n	80089a2 <_putc_r+0x1a>
 80089f4:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <_putc_r+0x8c>)
 80089f6:	429c      	cmp	r4, r3
 80089f8:	bf08      	it	eq
 80089fa:	68f4      	ldreq	r4, [r6, #12]
 80089fc:	e7d1      	b.n	80089a2 <_putc_r+0x1a>
 80089fe:	4629      	mov	r1, r5
 8008a00:	4622      	mov	r2, r4
 8008a02:	4630      	mov	r0, r6
 8008a04:	f7ff fbf4 	bl	80081f0 <__swbuf_r>
 8008a08:	4605      	mov	r5, r0
 8008a0a:	e7e3      	b.n	80089d4 <_putc_r+0x4c>
 8008a0c:	08008fe0 	.word	0x08008fe0
 8008a10:	08009000 	.word	0x08009000
 8008a14:	08008fc0 	.word	0x08008fc0

08008a18 <_sbrk_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	4d05      	ldr	r5, [pc, #20]	; (8008a34 <_sbrk_r+0x1c>)
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	602b      	str	r3, [r5, #0]
 8008a24:	f7f8 ff74 	bl	8001910 <_sbrk>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_sbrk_r+0x1a>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_sbrk_r+0x1a>
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	200003ac 	.word	0x200003ac

08008a38 <__sread>:
 8008a38:	b510      	push	{r4, lr}
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a40:	f000 f8a0 	bl	8008b84 <_read_r>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	bfab      	itete	ge
 8008a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a4c:	181b      	addge	r3, r3, r0
 8008a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a52:	bfac      	ite	ge
 8008a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a56:	81a3      	strhlt	r3, [r4, #12]
 8008a58:	bd10      	pop	{r4, pc}

08008a5a <__swrite>:
 8008a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5e:	461f      	mov	r7, r3
 8008a60:	898b      	ldrh	r3, [r1, #12]
 8008a62:	4605      	mov	r5, r0
 8008a64:	460c      	mov	r4, r1
 8008a66:	05db      	lsls	r3, r3, #23
 8008a68:	4616      	mov	r6, r2
 8008a6a:	d505      	bpl.n	8008a78 <__swrite+0x1e>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a74:	f000 f868 	bl	8008b48 <_lseek_r>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	4632      	mov	r2, r6
 8008a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a80:	4628      	mov	r0, r5
 8008a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a86:	81a3      	strh	r3, [r4, #12]
 8008a88:	463b      	mov	r3, r7
 8008a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8e:	f000 b817 	b.w	8008ac0 <_write_r>

08008a92 <__sseek>:
 8008a92:	b510      	push	{r4, lr}
 8008a94:	460c      	mov	r4, r1
 8008a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9a:	f000 f855 	bl	8008b48 <_lseek_r>
 8008a9e:	1c43      	adds	r3, r0, #1
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	bf15      	itete	ne
 8008aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008aae:	81a3      	strheq	r3, [r4, #12]
 8008ab0:	bf18      	it	ne
 8008ab2:	81a3      	strhne	r3, [r4, #12]
 8008ab4:	bd10      	pop	{r4, pc}

08008ab6 <__sclose>:
 8008ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aba:	f000 b813 	b.w	8008ae4 <_close_r>
	...

08008ac0 <_write_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4d06      	ldr	r5, [pc, #24]	; (8008ae0 <_write_r+0x20>)
 8008ac6:	4608      	mov	r0, r1
 8008ac8:	4611      	mov	r1, r2
 8008aca:	2200      	movs	r2, #0
 8008acc:	602a      	str	r2, [r5, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f7f8 fecd 	bl	800186e <_write>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_write_r+0x1e>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_write_r+0x1e>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	200003ac 	.word	0x200003ac

08008ae4 <_close_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4d05      	ldr	r5, [pc, #20]	; (8008b00 <_close_r+0x1c>)
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	602b      	str	r3, [r5, #0]
 8008af0:	f7f8 fed9 	bl	80018a6 <_close>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_close_r+0x1a>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_close_r+0x1a>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	200003ac 	.word	0x200003ac

08008b04 <_fstat_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	2300      	movs	r3, #0
 8008b08:	4d06      	ldr	r5, [pc, #24]	; (8008b24 <_fstat_r+0x20>)
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	f7f8 fed4 	bl	80018be <_fstat>
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	d102      	bne.n	8008b20 <_fstat_r+0x1c>
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	b103      	cbz	r3, 8008b20 <_fstat_r+0x1c>
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
 8008b22:	bf00      	nop
 8008b24:	200003ac 	.word	0x200003ac

08008b28 <_isatty_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	4d05      	ldr	r5, [pc, #20]	; (8008b44 <_isatty_r+0x1c>)
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	f7f8 fed3 	bl	80018de <_isatty>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_isatty_r+0x1a>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_isatty_r+0x1a>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	200003ac 	.word	0x200003ac

08008b48 <_lseek_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4d06      	ldr	r5, [pc, #24]	; (8008b68 <_lseek_r+0x20>)
 8008b4e:	4608      	mov	r0, r1
 8008b50:	4611      	mov	r1, r2
 8008b52:	2200      	movs	r2, #0
 8008b54:	602a      	str	r2, [r5, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	f7f8 fecc 	bl	80018f4 <_lseek>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_lseek_r+0x1e>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_lseek_r+0x1e>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	200003ac 	.word	0x200003ac

08008b6c <__malloc_lock>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	; (8008b74 <__malloc_lock+0x8>)
 8008b6e:	f7ff bdb5 	b.w	80086dc <__retarget_lock_acquire_recursive>
 8008b72:	bf00      	nop
 8008b74:	200003a0 	.word	0x200003a0

08008b78 <__malloc_unlock>:
 8008b78:	4801      	ldr	r0, [pc, #4]	; (8008b80 <__malloc_unlock+0x8>)
 8008b7a:	f7ff bdb0 	b.w	80086de <__retarget_lock_release_recursive>
 8008b7e:	bf00      	nop
 8008b80:	200003a0 	.word	0x200003a0

08008b84 <_read_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4604      	mov	r4, r0
 8008b88:	4d06      	ldr	r5, [pc, #24]	; (8008ba4 <_read_r+0x20>)
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	602a      	str	r2, [r5, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f7f8 fe4e 	bl	8001834 <_read>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_read_r+0x1e>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_read_r+0x1e>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	200003ac 	.word	0x200003ac

08008ba8 <_init>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	bf00      	nop
 8008bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bae:	bc08      	pop	{r3}
 8008bb0:	469e      	mov	lr, r3
 8008bb2:	4770      	bx	lr

08008bb4 <_fini>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	bf00      	nop
 8008bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bba:	bc08      	pop	{r3}
 8008bbc:	469e      	mov	lr, r3
 8008bbe:	4770      	bx	lr
